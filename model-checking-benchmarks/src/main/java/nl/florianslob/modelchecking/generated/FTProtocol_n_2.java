/* !!! IMPORTANT !!!
 * !!! This code is generated from a protocol definition. !!!
 * !!! Any Changes made to this code could be overridden. !!!
 * !!! If you want to change the protocol, change its definition and regenerate this code. !!!
 **/
package nl.florianslob.modelchecking.generated;

// Import types from the API
import nl.florianslob.modelchecking.base.api.v2.*;

import java.util.Optional;
import java.util.Random;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class FTProtocol_n_2 implements IProtocol {
	private volatile int state = 0;
	private final Object monitor = this;
	
	private final BlockingQueue<Object> queueFrommasterTofft_0_ = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFrommasterToevolve_1_ = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFrommasterTofft_1_ = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFromfft_0_Tomaster = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFromevolve_0_Tomaster = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFrommasterToevolve_0_ = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFromfft_1_Tomaster = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFromevolve_1_Tomaster = new LinkedBlockingQueue<>(); 
	
	@Override
	public IEnvironment getEnvironment(String environmentName) throws Exception{
		switch (environmentName){
			case "evolve_0_": return new IEnvironment() {
				
				@Override
				public String getName(){
					return environmentName;
				}
				
				@Override
				public <Any, AnyInput> Optional<Any> exchange(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					synchronized (monitor){
						while (true){
							switch (state){
								case 0,1,2,4,5,6,7,8,10,12,13,14,19,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,50,57,63,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,141,146,155,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,265,272,291,296,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,374,379,388,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,474,481,492,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,820,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,862,949,1124,1125,1126,1127,1128,1129,1131,1132,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1307,1308,1312,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1400,1437,1438,1439,1440,1441,1442,1443,1444,1445,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1470,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1499,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1515,1520,1521,1522,1523,1524,1525,1526 :
									monitor.wait();
									break;
								case 3:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1468;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 9:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1497;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 11:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 15;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 15:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 19;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 16:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 20;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 17:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 21;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 18:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 22;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 20:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 24;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 21:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 25;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 22:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 26;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 47:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 50;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 48:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 57;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 49:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 296;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 51:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 392;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 52:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 393;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 53:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 394;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 54:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 395;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 55:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 396;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 56:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 63;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 58:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 160;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 59:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 161;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 60:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 162;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 61:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 163;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 62:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 164;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 64:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 69;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 65:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 70;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 66:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 71;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 67:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 72;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 68:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 73;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 119:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 93;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 120:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 106;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 121:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 113;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 122:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 118;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 123:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 78;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 124:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 100;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 125:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 104;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 126:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 84;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 127:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 86;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 128:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 129:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 84;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 130:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 103;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 131:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 86;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 132:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 109;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 133:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 112;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 134:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 111;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 135:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 115;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 136:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 103;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 137:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 111;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 138:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 141;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 139:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 95;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 140:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 96;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 142:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 78;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 143:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 97;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 144:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 98;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 145:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 146;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 147:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 148:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 97;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 149:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 150:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 98;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 151:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 107;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 152:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 108;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 153:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 117;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 154:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 155;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 156:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 115;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 157:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 158:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 117;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 225:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 69;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 226:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 185;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 227:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 206;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 228:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 217;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 229:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 224;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 230:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 93;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 231:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 169;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 232:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 197;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 233:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 203;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 234:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 78;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 235:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 175;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 236:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 177;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 237:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 84;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 238:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 174;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 239:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 240:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 86;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 241:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 100;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 242:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 175;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 243:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 201;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 244:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 103;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 245:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 104;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 246:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 177;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 247:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 106;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 248:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 210;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 249:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 215;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 250:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 109;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 251:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 213;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 252:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 111;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 253:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 112;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 254:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 113;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 255:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 220;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 256:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 115;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 257:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 201;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 258:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 213;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 259:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 118;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 260:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 70;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 261:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 265;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 262:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 187;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 263:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 188;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 264:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 141;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 266:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 169;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 267:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 190;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 268:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 191;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 269:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 97;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 270:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 272;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 271:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 146;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 273:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 174;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 274:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 98;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 275:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 95;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 276:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 190;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 277:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 221;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 278:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 279:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 96;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 280:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 191;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 281:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 71;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 282:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 207;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 283:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 208;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 284:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 107;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 285:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 222;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 286:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 117;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 287:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 108;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 288:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 72;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 289:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 291;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 290:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 155;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 292:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 220;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 293:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 221;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 294:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 222;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 295:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 73;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 297:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 302;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 298:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 303;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 299:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 304;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 300:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 305;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 301:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 306;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 352:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 326;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 353:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 339;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 354:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 346;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 355:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 351;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 356:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 311;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 357:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 333;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 358:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 337;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 359:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 317;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 360:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 319;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 361:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 362:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 317;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 363:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 336;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 364:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 319;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 365:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 342;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 366:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 345;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 367:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 344;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 368:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 348;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 369:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 336;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 370:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 344;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 371:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 374;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 372:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 328;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 373:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 329;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 375:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 311;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 376:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 330;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 377:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 331;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 378:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 379;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 380:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 381:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 330;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 382:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 349;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 383:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 331;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 384:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 340;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 385:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 341;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 386:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 350;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 387:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 388;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 389:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 348;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 390:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 349;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 391:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 350;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 450:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 424;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 451:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 437;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 452:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 444;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 453:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 449;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 454:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 403;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 455:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 431;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 456:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 435;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 457:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 413;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 458:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 415;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 459:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 410;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 460:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 413;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 461:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 434;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 462:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 415;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 463:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 440;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 464:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 443;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 465:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 442;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 466:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 446;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 467:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 434;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 468:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 442;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 469:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 474;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 470:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 426;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 471:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 427;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 472:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 265;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 473:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 374;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 475:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 403;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 476:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 428;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 477:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 429;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 478:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 481;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 479:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 272;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 480:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 379;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 482:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 410;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 483:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 428;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 484:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 447;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 485:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 429;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 486:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 438;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 487:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 439;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 488:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 448;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 489:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 492;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 490:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 291;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 491:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 388;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 493:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 446;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 494:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 447;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 495:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 448;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 814:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 627;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 815:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 628;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 816:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 629;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 817:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 820;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 818:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 662;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 819:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 663;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 821:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 823;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 822:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 824;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 852:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 825;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 853:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 826;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 854:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 827;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 855:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 828;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 856:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 829;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 857:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 830;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 858:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 831;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 859:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 832;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 860:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 833;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 861:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 862;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 863:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 834;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 864:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 835;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 865:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 836;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 866:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 837;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 867:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 838;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 868:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 839;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 869:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 840;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 870:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 841;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 871:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 842;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 872:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 843;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 873:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 844;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 874:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 845;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 875:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 846;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 876:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 847;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 877:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 848;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 878:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 849;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 879:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 850;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 880:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 851;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 881:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 724;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 882:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 725;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 883:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 726;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 884:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 727;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 885:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 728;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 886:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 729;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 887:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 730;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 888:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 731;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 889:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 732;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 890:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 765;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 891:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 862;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 892:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 736;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 893:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 737;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 894:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 738;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 895:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 739;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 896:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 740;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 897:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 741;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 898:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 742;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 899:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 743;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 900:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 744;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 901:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 745;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 902:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 746;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 903:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 747;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 904:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 748;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 905:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 749;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 906:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 750;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 907:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 751;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 908:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 752;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 909:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 753;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 910:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 754;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 911:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 755;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 912:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 756;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 913:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 757;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 914:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 758;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 915:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 759;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 916:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 760;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 917:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 761;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 918:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 762;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 919:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 795;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 920:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 765;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 921:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 766;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 922:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 767;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 923:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 768;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 924:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 769;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 925:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 770;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 926:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 771;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 927:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 772;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 928:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 773;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 929:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 774;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 930:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 775;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 931:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 776;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 932:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 777;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 933:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 778;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 934:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 779;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 935:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 780;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 936:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 781;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 937:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 782;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 938:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 783;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 939:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 784;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 940:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 785;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 941:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 786;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 942:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 787;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 943:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 788;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 944:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 789;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 945:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 790;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 946:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 791;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 947:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 792;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 948:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 949;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 950:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 795;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 951:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 796;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 952:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 797;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 953:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 798;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 954:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 799;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 955:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 800;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 956:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 801;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 957:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 802;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 958:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 803;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 959:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 804;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 960:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 805;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 961:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 806;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 962:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 807;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 963:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 808;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 964:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 809;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 965:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 810;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 966:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 811;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 967:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 812;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 968:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 813;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 969:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 814;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 970:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 815;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 971:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 816;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 972:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 975;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 973:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 818;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 974:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 819;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 975:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 820;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 976:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 978;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 977:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 979;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 978:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 823;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 979:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 824;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 980:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 825;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 981:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 826;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 982:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 827;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 983:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 828;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 984:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 829;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 985:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 830;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 986:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 831;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 987:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 832;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 988:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 833;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 989:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 834;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 990:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 835;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 991:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 836;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 992:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 837;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 993:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 838;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 994:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 839;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 995:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 840;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 996:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 841;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 997:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 842;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 998:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 843;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 999:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 844;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1000:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 845;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1001:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 846;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1002:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 847;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1003:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 848;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1004:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 849;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1005:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 850;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1006:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 851;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1007:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 980;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1008:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 981;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1009:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 982;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1010:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 983;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1011:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 984;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1012:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 985;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1013:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 986;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1014:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 987;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1015:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 988;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1016:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1017;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1017:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 862;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1018:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 989;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1019:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 990;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1020:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 991;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1021:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 992;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1022:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 993;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1023:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 994;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1024:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 995;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1025:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 996;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1026:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 997;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1027:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 998;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1028:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 999;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1029:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1000;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1030:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1001;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1031:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1002;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1032:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1003;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1033:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1004;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1034:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1005;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1035:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1006;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1036:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 881;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1037:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 882;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1038:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 883;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1039:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 884;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1040:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 885;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1041:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 886;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1042:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 887;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1043:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 888;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1044:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 889;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1045:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 920;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1046:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1017;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1047:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 892;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1048:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 893;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1049:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 894;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1050:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 895;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1051:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 896;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1052:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 897;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1053:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 898;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1054:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 899;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1055:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 900;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1056:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 901;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1057:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 902;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1058:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 903;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1059:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 904;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1060:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 905;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1061:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 906;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1062:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 907;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1063:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 908;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1064:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 909;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1065:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 910;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1066:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 911;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1067:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 912;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1068:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 913;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1069:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 914;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1070:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 915;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1071:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 916;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1072:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 917;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1073:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 918;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1074:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 950;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1075:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 920;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1076:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 921;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1077:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 922;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1078:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 923;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1079:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 924;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1080:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 925;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1081:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 926;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1082:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 927;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1083:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 928;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1084:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 929;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1085:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 930;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1086:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 931;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1087:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 932;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1088:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 933;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1089:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 934;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1090:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 935;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1091:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 936;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1092:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 937;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1093:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 938;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1094:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 939;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1095:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 940;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1096:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 941;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1097:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 942;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1098:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 943;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1099:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 944;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1100:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 945;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1101:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 946;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1102:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 947;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1103:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1104;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1104:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 949;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1105:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 950;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1106:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 951;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1107:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 952;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1108:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 953;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1109:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 954;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1110:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 955;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1111:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 956;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1112:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 957;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1113:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 958;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1114:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 959;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1115:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 960;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1116:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 961;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1117:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 962;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1118:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 963;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1119:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 964;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1120:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 965;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1121:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 966;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1122:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 967;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1123:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 968;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1130:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 975;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1133:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 978;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1134:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 979;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1135:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 980;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1136:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 981;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1137:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 982;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1138:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 983;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1139:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 984;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1140:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 985;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1141:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 986;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1142:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 987;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1143:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 988;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1144:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 989;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1145:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 990;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1146:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 991;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1147:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 992;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1148:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 993;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1149:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 994;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1150:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 995;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1151:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 996;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1152:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 997;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1153:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 998;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1154:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 999;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1155:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1000;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1156:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1001;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1157:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1002;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1158:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1003;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1159:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1004;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1160:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1005;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1161:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1006;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1172:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1017;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1259:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1104;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1306:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1309;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1309:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1312;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1310:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1313;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1311:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1314;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1313:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1316;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1314:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1317;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1391:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1368;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1392:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1369;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1393:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1370;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1394:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1371;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1395:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1372;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1396:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1373;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1397:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1374;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1398:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1375;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1399:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1400;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1401:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1378;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1402:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1379;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1403:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1380;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1404:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1381;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1405:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1382;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1406:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1383;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1407:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1384;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1408:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1385;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1409:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1386;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1410:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1387;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1411:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1388;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1412:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1389;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1413:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1390;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1414:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1391;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1415:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1392;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1416:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1393;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1417:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1394;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1418:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1395;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1419:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1396;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1420:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1397;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1421:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1398;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1422:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1423;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1423:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1400;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1424:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1401;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1425:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1402;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1426:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1403;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1427:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1404;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1428:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1405;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1429:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1406;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1430:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1407;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1431:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1408;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1432:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1409;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1433:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1410;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1434:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1411;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1435:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1412;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1436:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1413;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1446:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1423;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1468:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1470;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1469:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1471;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1471:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1473;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1489:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1485;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1490:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1486;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1491:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1487;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1492:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1488;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1493:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1489;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1494:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1490;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1495:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1491;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1496:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1492;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1497:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1499;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1498:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1500;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1500:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1502;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1512:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1507;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1513:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1509;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1514:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1515;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1516:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1512;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1517:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1513;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1518:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1519;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								case 1519:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1515;
											queueFromevolve_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1527:
									if (queueFrommasterToevolve_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1519;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_0_.take());
									}
									monitor.wait();
									break;
								default: throw new Exception("State number out of bounds");
							}
						}
					}
					
				}
			};
			case "evolve_1_": return new IEnvironment() {
				
				@Override
				public String getName(){
					return environmentName;
				}
				
				@Override
				public <Any, AnyInput> Optional<Any> exchange(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					synchronized (monitor){
						while (true){
							switch (state){
								case 0,1,2,3,5,6,7,8,9,11,12,14,15,16,18,19,20,22,23,24,26,27,29,30,32,33,35,37,40,42,43,44,45,46,51,58,64,69,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,100,103,104,106,109,111,112,113,115,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,142,147,156,160,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,185,197,201,203,206,210,213,215,217,220,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,266,273,292,297,302,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,333,336,337,339,342,344,345,346,348,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,375,380,389,392,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,431,434,435,437,440,442,443,444,446,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,475,482,493,496,497,498,499,500,501,505,510,511,512,518,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,548,549,559,560,561,562,563,564,565,570,572,573,574,575,576,577,578,579,580,581,582,583,584,588,593,594,595,599,601,602,603,604,605,606,607,608,609,610,611,612,613,617,622,623,624,626,627,629,631,634,636,637,638,639,640,641,642,643,644,645,646,647,651,656,657,658,660,661,663,665,668,670,671,672,673,674,675,676,677,678,679,680,681,685,690,691,692,695,698,700,701,702,703,704,705,706,707,708,709,710,711,715,720,721,722,726,728,729,730,731,732,733,734,735,736,737,738,739,740,741,745,750,751,752,756,758,759,760,761,762,763,764,765,766,767,768,769,770,771,775,780,781,782,786,788,789,790,791,792,793,794,795,796,797,798,799,800,801,805,810,811,812,814,816,817,819,820,822,824,827,829,830,831,832,833,834,835,836,837,838,839,843,848,849,850,854,856,857,858,859,860,861,862,863,864,865,866,867,868,872,877,878,879,883,885,886,887,888,889,890,891,892,893,894,895,896,897,901,906,907,908,912,914,915,916,917,918,919,920,921,922,923,924,925,926,930,935,936,937,941,943,944,945,946,947,948,949,950,951,952,953,954,955,956,960,965,966,967,969,971,972,974,975,977,979,982,984,985,986,987,988,989,990,991,992,993,994,998,1003,1004,1005,1009,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1027,1032,1033,1034,1038,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1056,1061,1062,1063,1067,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1085,1090,1091,1092,1096,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1115,1120,1121,1122,1124,1126,1127,1129,1130,1132,1134,1137,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1153,1158,1159,1160,1164,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1182,1187,1188,1189,1193,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1211,1216,1217,1218,1222,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1240,1245,1246,1247,1251,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1270,1275,1276,1277,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1308,1309,1311,1312,1314,1315,1317,1318,1320,1322,1325,1327,1328,1329,1330,1331,1332,1333,1334,1335,1338,1342,1343,1347,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1361,1365,1366,1370,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1384,1388,1389,1393,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1407,1411,1412,1416,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1430,1434,1435,1439,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1454,1458,1459,1461,1462,1463,1464,1465,1466,1467,1468,1470,1472,1474,1478,1479,1480,1482,1483,1484,1486,1487,1488,1490,1491,1492,1494,1495,1496,1497,1499,1501,1505,1509,1510,1511,1513,1514,1515,1517,1518,1519,1521,1522,1523,1525,1526,1527 :
									monitor.wait();
									break;
								case 4:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1520;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 10:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1524;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 13:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1249;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 17:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1094;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 21:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 939;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 25:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 784;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 28:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 597;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 31:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 568;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 34:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 515;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 36:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 38;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 38:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 40;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 39:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 41;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 41:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 43;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 47:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 51;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 48:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 58;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 49:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 297;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 50:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 392;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 52:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 450;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 53:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 451;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 54:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 452;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 55:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 453;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 56:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 64;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 57:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 160;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 59:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 226;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 60:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 227;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 61:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 228;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 62:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 229;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 63:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 69;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 65:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 119;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 66:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 120;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 67:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 121;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 68:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 122;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 70:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 93;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 71:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 106;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 72:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 113;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 73:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 118;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 94:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 78;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 95:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 100;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 96:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 104;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 97:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 84;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 98:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 86;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 99:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 101:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 84;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 102:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 103;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 105:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 86;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 107:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 109;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 108:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 112;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 110:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 111;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 114:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 115;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 116:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 103;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 117:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 111;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 138:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 142;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 139:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 124;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 140:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 125;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 141:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 78;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 143:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 126;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 144:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 127;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 145:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 147;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 146:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 148:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 126;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 149:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 136;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 150:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 127;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 151:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 132;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 152:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 133;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 153:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 137;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 154:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 156;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 155:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 115;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 157:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 136;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 158:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 137;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 159:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 69;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 161:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 185;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 162:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 206;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 163:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 217;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 164:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 224;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 184:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 93;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 186:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 169;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 187:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 197;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 188:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 203;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 189:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 78;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 190:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 175;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 191:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 177;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 192:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 84;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 193:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 174;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 194:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 195:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 86;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 196:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 100;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 198:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 175;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 199:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 201;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 200:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 103;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 202:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 104;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 204:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 177;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 205:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 106;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 207:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 210;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 208:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 215;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 209:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 109;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 211:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 213;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 212:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 111;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 214:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 112;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 216:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 113;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 218:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 220;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 219:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 115;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 221:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 201;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 222:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 213;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 223:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 118;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 260:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 119;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 261:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 266;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 262:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 232;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 263:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 233;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 264:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 142;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 265:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 169;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 267:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 235;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 268:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 236;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 269:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 126;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 270:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 273;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 271:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 147;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 272:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 174;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 274:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 127;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 275:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 124;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 276:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 235;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 277:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 257;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 278:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 136;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 279:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 125;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 280:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 236;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 281:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 120;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 282:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 248;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 283:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 249;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 284:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 132;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 285:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 258;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 286:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 137;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 287:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 133;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 288:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 121;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 289:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 292;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 290:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 156;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 291:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 220;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 293:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 257;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 294:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 258;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 295:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 122;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 296:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 302;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 298:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 352;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 299:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 353;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 300:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 354;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 301:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 355;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 303:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 326;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 304:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 339;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 305:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 346;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 306:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 351;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 327:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 311;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 328:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 333;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 329:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 337;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 330:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 317;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 331:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 319;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 332:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 334:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 317;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 335:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 336;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 338:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 319;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 340:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 342;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 341:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 345;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 343:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 344;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 347:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 348;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 349:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 336;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 350:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 344;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 371:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 375;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 372:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 357;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 373:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 358;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 374:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 311;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 376:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 359;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 377:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 360;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 378:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 380;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 379:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 381:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 359;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 382:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 369;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 383:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 360;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 384:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 365;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 385:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 366;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 386:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 370;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 387:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 389;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 388:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 348;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 390:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 369;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 391:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 370;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 393:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 424;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 394:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 437;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 395:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 444;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 396:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 449;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 425:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 403;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 426:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 431;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 427:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 435;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 428:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 413;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 429:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 415;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 430:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 410;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 432:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 413;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 433:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 434;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 436:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 415;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 438:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 440;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 439:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 443;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 441:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 442;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 445:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 446;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 447:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 434;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 448:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 442;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 469:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 475;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 470:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 455;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 471:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 456;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 472:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 266;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 473:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 375;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 474:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 403;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 476:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 457;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 477:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 458;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 478:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 482;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 479:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 273;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 480:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 380;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 481:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 410;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 483:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 457;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 484:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 467;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 485:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 458;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 486:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 463;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 487:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 464;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 488:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 468;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 489:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 493;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 490:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 292;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 491:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 389;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 492:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 446;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 494:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 467;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 495:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 468;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 502:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 497;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 503:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 499;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 504:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 505;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 506:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 502;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 507:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 503;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 508:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 509;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 509:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 505;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 513:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 509;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 514:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 38;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 515:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 518;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 516:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 519;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 517:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 40;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 519:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 522;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 541:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 43;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 542:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 530;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 543:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 497;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 544:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 534;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 545:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 499;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 546:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 548;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 547:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 505;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 550:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 41;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 551:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 542;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 552:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 502;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 553:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 544;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 554:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 503;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 555:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 557;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 556:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 509;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 557:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 548;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 558:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 505;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 566:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 557;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 567:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 509;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 568:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 570;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 569:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 571;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 571:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 573;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 585:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 580;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 586:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 582;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 587:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 588;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 589:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 585;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 590:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 586;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 591:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 592;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 592:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 588;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 596:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 592;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 597:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 599;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 598:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 600;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 600:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 602;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 614:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 609;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 615:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 611;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 616:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 617;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 618:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 614;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 619:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 615;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 620:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 621;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 621:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 617;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 625:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 621;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 628:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 754;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 630:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 632;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 632:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 634;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 633:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 635;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 635:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 637;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 648:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 643;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 649:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 645;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 650:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 651;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 652:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 648;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 653:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 649;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 654:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 655;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 655:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 651;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 659:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 655;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 662:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 724;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 664:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 666;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 666:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 668;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 667:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 669;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 669:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 671;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 682:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 677;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 683:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 679;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 684:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 685;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 686:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 682;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 687:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 683;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 688:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 689;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 689:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 685;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 693:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 689;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 694:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 696;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 696:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 698;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 697:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 699;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 699:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 701;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 712:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 707;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 713:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 709;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 714:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 715;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 716:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 712;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 717:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 713;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 718:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 719;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 719:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 715;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 723:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 719;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 724:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 726;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 725:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 727;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 727:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 729;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 742:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 737;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 743:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 739;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 744:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 745;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 746:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 742;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 747:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 743;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 748:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 749;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 749:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 745;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 753:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 749;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 754:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 756;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 755:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 757;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 757:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 759;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 772:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 767;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 773:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 769;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 774:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 775;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 776:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 772;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 777:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 773;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 778:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 779;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 779:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 775;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 783:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 779;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 784:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 786;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 785:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 787;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 787:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 789;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 802:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 797;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 803:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 799;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 804:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 805;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 806:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 802;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 807:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 803;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 808:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 809;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 809:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 805;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 813:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 809;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 815:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 910;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 818:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 881;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 821:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 852;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 823:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 825;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 825:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 827;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 826:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 828;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 828:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 830;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 840:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 835;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 841:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 837;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 842:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 843;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 844:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 840;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 845:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 841;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 846:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 847;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 847:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 843;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 851:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 847;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 852:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 854;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 853:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 855;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 855:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 857;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 869:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 864;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 870:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 866;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 871:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 872;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 873:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 869;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 874:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 870;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 875:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 876;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 876:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 872;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 880:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 876;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 881:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 883;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 882:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 884;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 884:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 886;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 898:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 893;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 899:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 895;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 900:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 901;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 902:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 898;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 903:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 899;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 904:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 905;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 905:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 901;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 909:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 905;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 910:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 912;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 911:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 913;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 913:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 915;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 927:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 922;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 928:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 924;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 929:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 930;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 931:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 927;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 932:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 928;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 933:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 934;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 934:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 930;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 938:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 934;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 939:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 941;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 940:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 942;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 942:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 944;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 957:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 952;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 958:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 954;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 959:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 960;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 961:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 957;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 962:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 958;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 963:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 964;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 964:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 960;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 968:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 964;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 970:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1065;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 973:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1036;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 976:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1007;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 978:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 980;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 980:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 982;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 981:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 983;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 983:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 985;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 995:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 990;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 996:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 992;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 997:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 998;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 999:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 995;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1000:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 996;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1001:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1002;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1002:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 998;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1006:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1002;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1007:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1009;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1008:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1010;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1010:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1012;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1024:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1019;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1025:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1021;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1026:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1027;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1028:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1024;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1029:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1025;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1030:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1031;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1031:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1027;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1035:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1031;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1036:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1038;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1037:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1039;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1039:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1041;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1053:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1048;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1054:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1050;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1055:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1056;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1057:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1053;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1058:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1054;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1059:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1060;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1060:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1056;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1064:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1060;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1065:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1067;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1066:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1068;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1068:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1070;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1082:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1077;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1083:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1079;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1084:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1085;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1086:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1082;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1087:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1083;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1088:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1089;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1089:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1085;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1093:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1089;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1094:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1096;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1095:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1097;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1097:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1099;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1112:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1107;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1113:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1109;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1114:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1115;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1116:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1112;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1117:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1113;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1118:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1119;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1119:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1115;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1123:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1119;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1125:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1220;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1128:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1191;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1131:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1162;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1133:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1135;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1135:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1137;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1136:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1138;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1138:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1140;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1150:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1145;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1151:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1147;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1152:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1153;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1154:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1150;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1155:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1151;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1156:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1157;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1157:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1153;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1161:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1157;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1162:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1164;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1163:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1165;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1165:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1167;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1179:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1174;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1180:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1176;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1181:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1182;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1183:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1179;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1184:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1180;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1185:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1186;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1186:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1182;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1190:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1186;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1191:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1193;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1192:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1194;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1194:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1196;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1208:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1203;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1209:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1205;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1210:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1211;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1212:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1208;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1213:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1209;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1214:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1215;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1215:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1211;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1219:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1215;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1220:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1222;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1221:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1223;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1223:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1225;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1237:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1232;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1238:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1234;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1239:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1240;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1241:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1237;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1242:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1238;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1243:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1244;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1244:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1240;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1248:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1244;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1249:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1251;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1250:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1252;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1252:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1254;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1267:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1262;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1268:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1264;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1269:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1270;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1271:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1267;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1272:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1268;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1273:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1274;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1274:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1270;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1278:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1274;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1307:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1437;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1310:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1414;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1313:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1391;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1316:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1368;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1319:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1345;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1321:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1323;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1323:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1325;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1324:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1326;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1326:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1328;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1336:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1333;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1337:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1338;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1339:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1336;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1340:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1341;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1341:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1338;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1344:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1341;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1345:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1347;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1346:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1348;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1348:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1350;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1359:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1356;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1360:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1361;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1362:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1359;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1363:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1364;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1364:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1361;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1367:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1364;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1368:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1370;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1369:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1371;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1371:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1373;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1382:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1379;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1383:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1384;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1385:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1382;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1386:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1387;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1387:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1384;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1390:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1387;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1391:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1393;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1392:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1394;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1394:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1396;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1405:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1402;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1406:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1407;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1408:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1405;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1409:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1410;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1410:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1407;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1413:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1410;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1414:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1416;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1415:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1417;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1417:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1419;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1428:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1425;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1429:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1430;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1431:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1428;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1432:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1433;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1433:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1430;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1436:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1433;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1437:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1439;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1438:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1440;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1440:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1442;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1452:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1449;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1453:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1454;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1455:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1452;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1456:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1457;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1457:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1454;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1460:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1457;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1469:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1493;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1471:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1489;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1473:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1485;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1475:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1481;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1476:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1477;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1477:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1478;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1481:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1482;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1485:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1486;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1489:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1490;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1493:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1494;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1498:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1516;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1500:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1512;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1502:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1507;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1503:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1504;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1504:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1505;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1506:
									if (queueFrommasterToevolve_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1504;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToevolve_1_.take());
									}
									monitor.wait();
									break;
								case 1507:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1509;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1508:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1505;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1512:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1513;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1516:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1517;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1520:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1521;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1524:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1525;
											queueFromevolve_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								default: throw new Exception("State number out of bounds");
							}
						}
					}
					
				}
			};
			case "fft_0_": return new IEnvironment() {
				
				@Override
				public String getName(){
					return environmentName;
				}
				
				@Override
				public <Any, AnyInput> Optional<Any> exchange(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					synchronized (monitor){
						while (true){
							switch (state){
								case 0,2,3,4,6,8,9,10,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,54,61,67,72,76,79,81,83,84,85,87,89,90,91,92,95,97,99,100,101,102,103,107,109,110,111,113,114,115,116,117,121,124,126,128,129,130,132,134,135,136,137,139,143,145,146,147,148,149,151,153,154,155,156,157,158,163,167,170,172,174,175,176,178,180,181,182,183,187,190,192,193,194,196,197,198,199,200,201,207,209,210,211,212,213,216,217,218,219,220,221,222,228,232,235,237,238,239,241,242,243,244,248,250,251,252,254,255,256,257,258,262,267,269,270,271,272,273,275,276,277,278,282,284,285,286,288,289,290,291,292,293,294,300,305,309,312,314,316,317,318,320,322,323,324,325,328,330,332,333,334,335,336,340,342,343,344,346,347,348,349,350,354,357,359,361,362,363,365,367,368,369,370,372,376,378,379,380,381,382,384,386,387,388,389,390,391,395,401,404,408,410,411,412,413,414,416,418,419,420,421,422,423,426,428,430,431,432,433,434,438,440,441,442,444,445,446,447,448,452,455,457,459,460,461,463,465,466,467,468,470,476,478,479,480,481,482,483,484,486,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,578,627,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,765,814,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,920,969,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1075,1124,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1230,1281,1283,1284,1285,1286,1287,1288,1290,1291,1292,1293,1294,1295,1296,1297,1301,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1319,1320,1345,1346,1347,1348,1349,1350,1351,1352,1353,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1465,1466,1467,1468,1469,1470,1471,1472,1473,1475,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527 :
									monitor.wait();
									break;
								case 1:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 12;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 5:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1279;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 7:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1289;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 11:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 16;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 12:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1124;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 13:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1125;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 14:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1126;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 15:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 20;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 16:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 969;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 17:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 970;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 18:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 971;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 19:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 24;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 20:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 814;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 21:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 815;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 22:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 816;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 23:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 27;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 24:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 627;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 25:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 628;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 26:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 629;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 27:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 30;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 28:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 31;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 29:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 32;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 31:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 34;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 32:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 35;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 47:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 54;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 48:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 61;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 49:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 300;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 50:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 395;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 51:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 452;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 52:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 470;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 53:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 486;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 55:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 489;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 56:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 67;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 57:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 163;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 58:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 228;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 59:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 262;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 60:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 282;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 62:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 289;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 63:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 72;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 64:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 121;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 65:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 139;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 66:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 151;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 68:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 154;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 69:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 76;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 70:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 95;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 71:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 107;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 73:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 114;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 74:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 79;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 75:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 87;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 77:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 90;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 78:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 81;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 80:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 85;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 82:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 86:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 88:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 89;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 93:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 79;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 94:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 97;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 96:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 102;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 98:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 99;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 104:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 85;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 105:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 99;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 106:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 87;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 108:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 110;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 112:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 89;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 118:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 90;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 119:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 124;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 120:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 132;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 122:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 135;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 123:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 126;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 125:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 130;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 127:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 131:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 133:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 134;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 138:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 143;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 140:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 149;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 141:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 97;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 142:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 126;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 144:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 145;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 150:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 145;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 152:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 153;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 159:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 72;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 160:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 167;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 161:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 187;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 162:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 207;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 164:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 218;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 165:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 170;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 166:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 178;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 168:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 181;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 169:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 172;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 171:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 176;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 173:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 174;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 177:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 174;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 179:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 180;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 184:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 95;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 185:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 170;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 186:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 190;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 188:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 199;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 189:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 97;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 191:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 193;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 195:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 99;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 202:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 102;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 203:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 176;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 204:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 193;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 205:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 107;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 206:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 178;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 208:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 211;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 214:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 110;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 215:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 180;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 223:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 114;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 224:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 181;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 225:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 121;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 226:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 232;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 227:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 248;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 229:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 255;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 230:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 124;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 231:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 235;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 233:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 243;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 234:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 126;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 236:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 238;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 240:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 245:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 130;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 246:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 238;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 247:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 132;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 249:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 251;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 253:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 134;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 259:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 135;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 260:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 139;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 261:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 267;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 263:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 277;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 264:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 143;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 265:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 190;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 266:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 235;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 268:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 270;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 274:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 145;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 279:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 149;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 280:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 270;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 281:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 151;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 283:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 285;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 287:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 153;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 295:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 154;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 296:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 305;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 297:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 354;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 298:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 372;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 299:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 384;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 301:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 387;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 302:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 309;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 303:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 328;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 304:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 340;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 306:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 347;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 307:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 312;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 308:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 320;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 310:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 323;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 311:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 314;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 313:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 318;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 315:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 319:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 321:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 322;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 326:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 312;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 327:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 330;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 329:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 335;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 331:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 332;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 337:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 318;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 338:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 332;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 339:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 320;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 341:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 343;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 345:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 322;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 351:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 323;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 352:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 357;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 353:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 365;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 355:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 368;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 356:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 359;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 358:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 363;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 360:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 361;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 364:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 361;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 366:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 367;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 371:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 376;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 373:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 382;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 374:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 330;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 375:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 359;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 377:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 378;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 383:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 378;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 385:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 386;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 392:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 401;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 393:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 426;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 394:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 438;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 396:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 445;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 397:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 167;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 398:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 309;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 399:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 404;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 400:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 416;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 402:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 419;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 403:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 408;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 405:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 414;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 406:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 172;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 407:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 314;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 409:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 410;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 415:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 410;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 417:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 418;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 424:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 404;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 425:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 428;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 427:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 433;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 429:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 430;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 435:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 414;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 436:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 430;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 437:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 416;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 439:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 441;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 443:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 418;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 449:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 419;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 450:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 455;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 451:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 463;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 453:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 466;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 454:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 457;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 456:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 461;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 458:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 459;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 462:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 459;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 464:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 465;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 469:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 476;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 471:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 484;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 472:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 267;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 473:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 376;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 474:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 428;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 475:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 457;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 477:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 478;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 485:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 478;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 487:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 488;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 568:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 515;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 569:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 516;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 570:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 518;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 571:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 519;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 572:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 521;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 573:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 522;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 574:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 524;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 575:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 525;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 576:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 526;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 577:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 578;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 579:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 529;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 580:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 530;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 581:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 533;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 582:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 534;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 583:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 537;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 584:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 538;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 585:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 542;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 586:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 544;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 587:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 546;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 588:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 548;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 589:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 551;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 590:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 553;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 591:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 555;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 592:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 557;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 593:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 560;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 594:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 562;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 595:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 564;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 596:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 566;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 597:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 568;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 598:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 569;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 599:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 570;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 600:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 571;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 601:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 572;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 602:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 573;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 603:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 574;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 604:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 575;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 605:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 576;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 606:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 607;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 607:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 578;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 608:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 579;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 609:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 580;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 610:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 581;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 611:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 582;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 612:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 583;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 613:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 584;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 614:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 585;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 615:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 586;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 616:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 587;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 617:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 588;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 618:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 589;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 619:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 590;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 620:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 591;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 621:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 592;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 622:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 593;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 623:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 594;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 624:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 595;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 625:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 596;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 626:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 30;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 628:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 662;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 629:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 663;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 630:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 34;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 631:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 35;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 632:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 515;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 633:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 516;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 634:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 518;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 635:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 519;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 636:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 521;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 637:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 522;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 638:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 524;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 639:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 525;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 640:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 526;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 641:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 578;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 642:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 529;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 643:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 530;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 644:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 533;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 645:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 534;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 646:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 537;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 647:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 538;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 648:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 542;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 649:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 544;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 650:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 546;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 651:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 548;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 652:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 551;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 653:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 553;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 654:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 555;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 655:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 557;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 656:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 560;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 657:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 562;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 658:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 564;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 659:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 566;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 754:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 724;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 755:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 725;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 756:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 726;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 757:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 727;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 758:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 728;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 759:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 729;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 760:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 730;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 761:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 731;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 762:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 732;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 763:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 765;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 764:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 578;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 766:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 736;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 767:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 737;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 768:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 738;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 769:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 739;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 770:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 740;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 771:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 741;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 772:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 742;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 773:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 743;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 774:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 744;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 775:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 745;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 776:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 746;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 777:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 747;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 778:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 748;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 779:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 749;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 780:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 750;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 781:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 751;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 782:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 752;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 783:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 753;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 784:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 754;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 785:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 755;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 786:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 756;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 787:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 757;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 788:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 758;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 789:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 759;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 790:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 760;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 791:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 761;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 792:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 762;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 793:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 795;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 794:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 607;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 795:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 765;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 796:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 766;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 797:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 767;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 798:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 768;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 799:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 769;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 800:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 770;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 801:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 771;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 802:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 772;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 803:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 773;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 804:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 774;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 805:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 775;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 806:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 776;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 807:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 777;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 808:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 778;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 809:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 779;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 810:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 780;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 811:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 781;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 812:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 782;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 813:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 783;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 815:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 818;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 816:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 819;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 910:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 881;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 911:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 882;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 912:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 883;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 913:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 884;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 914:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 885;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 915:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 886;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 916:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 887;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 917:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 888;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 918:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 889;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 919:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 920;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 921:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 892;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 922:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 893;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 923:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 894;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 924:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 895;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 925:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 896;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 926:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 897;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 927:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 898;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 928:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 899;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 929:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 900;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 930:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 901;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 931:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 902;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 932:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 903;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 933:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 904;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 934:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 905;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 935:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 906;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 936:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 907;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 937:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 908;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 938:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 909;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 939:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 910;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 940:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 911;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 941:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 912;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 942:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 913;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 943:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 914;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 944:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 915;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 945:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 916;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 946:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 917;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 947:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 918;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 948:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 950;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 949:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 795;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 950:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 920;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 951:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 921;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 952:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 922;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 953:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 923;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 954:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 924;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 955:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 925;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 956:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 926;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 957:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 927;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 958:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 928;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 959:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 929;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 960:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 930;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 961:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 931;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 962:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 932;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 963:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 933;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 964:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 934;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 965:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 935;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 966:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 936;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 967:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 937;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 968:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 938;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 970:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 973;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 971:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 974;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1065:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1036;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1066:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1037;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1067:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1038;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1068:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1039;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1069:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1040;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1070:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1041;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1071:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1042;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1072:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1043;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1073:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1044;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1074:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1075;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1076:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1047;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1077:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1048;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1078:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1049;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1079:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1050;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1080:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1051;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1081:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1052;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1082:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1053;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1083:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1054;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1084:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1055;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1085:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1056;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1086:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1057;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1087:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1058;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1088:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1059;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1089:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1060;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1090:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1061;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1091:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1062;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1092:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1063;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1093:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1064;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1094:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1065;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1095:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1066;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1096:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1067;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1097:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1068;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1098:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1069;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1099:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1070;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1100:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1071;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1101:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1072;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1102:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1073;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1103:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1105;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1104:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 950;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1105:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1075;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1106:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1076;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1107:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1077;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1108:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1078;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1109:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1079;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1110:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1080;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1111:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1081;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1112:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1082;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1113:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1083;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1114:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1084;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1115:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1085;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1116:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1086;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1117:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1087;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1118:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1088;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1119:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1089;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1120:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1090;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1121:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1091;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1122:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1092;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1123:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1093;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1125:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1128;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1126:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1129;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1220:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1191;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1221:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1192;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1222:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1193;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1223:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1194;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1224:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1195;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1225:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1196;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1226:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1197;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1227:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1198;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1228:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1199;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1229:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1230;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1231:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1202;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1232:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1203;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1233:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1204;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1234:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1205;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1235:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1206;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1236:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1207;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1237:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1208;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1238:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1209;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1239:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1210;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1240:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1211;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1241:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1212;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1242:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1213;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1243:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1214;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1244:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1215;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1245:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1216;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1246:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1217;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1247:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1218;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1248:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1219;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1249:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1220;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1250:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1221;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1251:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1222;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1252:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1223;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1253:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1224;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1254:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1225;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1255:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1226;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1256:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1227;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1257:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1228;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1258:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1260;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1259:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1105;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1260:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1230;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1261:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1231;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1262:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1232;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1263:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1233;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1264:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1234;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1265:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1235;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1266:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1236;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1267:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1237;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1268:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1238;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1269:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1239;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1270:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1240;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1271:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1241;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1272:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1242;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1273:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1243;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1274:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1244;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1275:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1245;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1276:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1246;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1277:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1247;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1278:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1248;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1279:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1281;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1280:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1282;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1282:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1284;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1289:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1290;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1298:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1293;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1299:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1295;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1300:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1301;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1302:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1298;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1303:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1299;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1304:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1305;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1305:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1301;
											queueFromfft_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1318:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 32;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1321:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 569;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1322:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 593;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1323:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 571;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1324:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 589;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1325:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 573;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1326:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 585;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1327:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 579;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1328:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 580;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1329:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 575;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1330:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 576;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1331:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 607;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1332:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 581;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1333:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 582;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1334:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 583;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1335:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 584;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1336:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 586;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1337:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 587;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1338:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 588;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1339:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 590;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1340:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 591;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1341:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 592;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1342:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 594;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1343:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 595;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1344:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 596;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1354:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 607;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1447:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1260;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1464:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1305;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1474:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 27;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1476:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 31;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1477:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 568;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1478:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 570;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1479:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 572;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								case 1480:
									if (queueFrommasterTofft_0_.peek() != null ) {
										monitor.notifyAll();
										state = 574;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_0_.take());
									}
									monitor.wait();
									break;
								default: throw new Exception("State number out of bounds");
							}
						}
					}
					
				}
			};
			case "fft_1_": return new IEnvironment() {
				
				@Override
				public String getName(){
					return environmentName;
				}
				
				@Override
				public <Any, AnyInput> Optional<Any> exchange(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					synchronized (monitor){
						while (true){
							switch (state){
								case 0,1,3,4,5,7,9,10,11,12,13,15,16,17,19,20,21,23,24,25,27,28,30,31,33,34,36,38,40,42,46,55,62,68,73,77,80,82,83,85,86,88,89,90,91,92,96,98,99,102,103,104,105,108,110,111,112,114,115,116,117,118,122,125,127,128,130,131,133,134,135,136,137,140,144,145,146,147,149,150,152,153,154,155,156,157,158,164,168,171,173,174,176,177,179,180,181,182,183,188,191,193,194,195,199,200,201,202,203,204,208,211,212,213,214,215,218,219,220,221,222,223,224,229,233,236,238,239,240,243,244,245,246,249,251,252,253,255,256,257,258,259,263,268,270,271,272,273,274,277,278,279,280,283,285,286,287,289,290,291,292,293,294,295,301,306,310,313,315,316,318,319,321,322,323,324,325,329,331,332,335,336,337,338,341,343,344,345,347,348,349,350,351,355,358,360,361,363,364,366,367,368,369,370,373,377,378,379,380,382,383,385,386,387,388,389,390,391,396,402,405,409,410,411,412,414,415,417,418,419,420,421,422,423,427,429,430,433,434,435,436,439,441,442,443,445,446,447,448,449,453,456,458,459,461,462,464,465,466,467,468,471,477,478,479,480,481,482,484,485,487,488,489,490,491,492,493,494,495,499,500,501,503,504,505,507,508,509,511,512,513,514,515,517,518,520,521,523,526,527,534,536,537,538,539,540,544,545,546,547,548,549,553,554,555,556,557,558,562,563,564,565,566,567,568,570,572,576,577,578,582,583,584,586,587,588,590,591,592,594,595,596,597,599,601,605,606,607,611,612,613,615,616,617,619,620,621,623,624,625,626,627,628,630,632,634,636,640,641,645,646,647,649,650,651,653,654,655,657,658,659,660,661,662,664,666,668,670,674,675,679,680,681,683,684,685,687,688,689,691,692,693,694,696,698,700,704,705,709,710,711,713,714,715,717,718,719,721,722,723,724,726,728,732,733,734,735,739,740,741,743,744,745,747,748,749,751,752,753,754,756,758,762,763,764,765,769,770,771,773,774,775,777,778,779,781,782,783,784,786,788,792,793,794,795,799,800,801,803,804,805,807,808,809,811,812,813,814,815,817,818,820,821,823,825,827,829,833,837,838,839,841,842,843,845,846,847,849,850,851,852,854,856,860,861,862,866,867,868,870,871,872,874,875,876,878,879,880,881,883,885,889,890,891,895,896,897,899,900,901,903,904,905,907,908,909,910,912,914,918,919,920,924,925,926,928,929,930,932,933,934,936,937,938,939,941,943,947,948,949,950,954,955,956,958,959,960,962,963,964,966,967,968,969,970,972,973,975,976,978,980,982,984,988,992,993,994,996,997,998,1000,1001,1002,1004,1005,1006,1007,1009,1011,1015,1016,1017,1021,1022,1023,1025,1026,1027,1029,1030,1031,1033,1034,1035,1036,1038,1040,1044,1045,1046,1050,1051,1052,1054,1055,1056,1058,1059,1060,1062,1063,1064,1065,1067,1069,1073,1074,1075,1079,1080,1081,1083,1084,1085,1087,1088,1089,1091,1092,1093,1094,1096,1098,1102,1103,1104,1105,1109,1110,1111,1113,1114,1115,1117,1118,1119,1121,1122,1123,1124,1125,1127,1128,1130,1131,1133,1135,1137,1139,1143,1147,1148,1149,1151,1152,1153,1155,1156,1157,1159,1160,1161,1162,1164,1166,1170,1171,1172,1176,1177,1178,1180,1181,1182,1184,1185,1186,1188,1189,1190,1191,1193,1195,1199,1200,1201,1205,1206,1207,1209,1210,1211,1213,1214,1215,1217,1218,1219,1220,1222,1224,1228,1229,1230,1234,1235,1236,1238,1239,1240,1242,1243,1244,1246,1247,1248,1249,1251,1253,1257,1258,1259,1260,1264,1265,1266,1268,1269,1270,1272,1273,1274,1276,1277,1278,1279,1281,1283,1287,1288,1289,1290,1291,1295,1296,1297,1299,1300,1301,1303,1304,1305,1330,1331,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1352,1353,1354,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1375,1376,1377,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1398,1399,1400,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1421,1422,1423,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1444,1445,1446,1447,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1462,1463,1464,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1481,1482,1483,1485,1486,1487,1489,1490,1491,1493,1494,1495,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1524,1525,1526,1527 :
									monitor.wait();
									break;
								case 2:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1308;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 6:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1461;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 8:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1465;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 14:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1275;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 18:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1120;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 22:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 965;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 26:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 810;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 29:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 622;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 32:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 593;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 35:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 560;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 37:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 510;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 39:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 506;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 41:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 502;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 43:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 497;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 44:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 45;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 45:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 46;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 47:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 55;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 48:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 62;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 49:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 301;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 50:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 396;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 51:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 453;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 52:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 471;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 53:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 487;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 54:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 489;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 56:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 68;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 57:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 164;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 58:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 229;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 59:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 263;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 60:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 283;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 61:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 289;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 63:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 73;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 64:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 122;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 65:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 140;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 66:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 152;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 67:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 154;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 69:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 77;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 70:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 96;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 71:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 108;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 72:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 114;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 74:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 80;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 75:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 88;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 76:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 90;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 78:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 82;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 79:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 85;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 81:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 84:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 87:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 89;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 93:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 80;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 94:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 98;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 95:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 102;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 97:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 99;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 100:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 85;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 101:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 99;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 106:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 88;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 107:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 110;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 109:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 89;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 113:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 90;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 119:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 125;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 120:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 133;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 121:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 135;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 123:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 127;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 124:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 130;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 126:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 129:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 132:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 134;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 138:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 144;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 139:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 149;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 141:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 98;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 142:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 127;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 143:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 145;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 148:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 145;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 151:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 153;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 159:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 73;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 160:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 168;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 161:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 188;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 162:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 208;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 163:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 218;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 165:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 171;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 166:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 179;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 167:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 181;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 169:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 173;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 170:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 176;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 172:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 174;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 175:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 174;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 178:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 180;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 184:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 96;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 185:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 171;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 186:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 191;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 187:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 199;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 189:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 98;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 190:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 193;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 192:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 99;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 196:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 102;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 197:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 176;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 198:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 193;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 205:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 108;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 206:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 179;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 207:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 211;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 209:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 110;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 210:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 180;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 216:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 114;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 217:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 181;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 225:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 122;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 226:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 233;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 227:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 249;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 228:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 255;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 230:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 125;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 231:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 236;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 232:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 243;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 234:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 127;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 235:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 238;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 237:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 241:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 130;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 242:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 238;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 247:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 133;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 248:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 251;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 250:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 134;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 254:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 135;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 260:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 140;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 261:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 268;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 262:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 277;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 264:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 144;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 265:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 191;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 266:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 236;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 267:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 270;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 269:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 145;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 275:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 149;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 276:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 270;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 281:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 152;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 282:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 285;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 284:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 153;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 288:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 154;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 296:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 306;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 297:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 355;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 298:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 373;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 299:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 385;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 300:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 387;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 302:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 310;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 303:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 329;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 304:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 341;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 305:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 347;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 307:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 313;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 308:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 321;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 309:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 323;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 311:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 315;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 312:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 318;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 314:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 317:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 320:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 322;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 326:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 313;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 327:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 331;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 328:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 335;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 330:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 332;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 333:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 318;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 334:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 332;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 339:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 321;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 340:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 343;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 342:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 322;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 346:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 323;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 352:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 358;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 353:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 366;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 354:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 368;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 356:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 360;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 357:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 363;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 359:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 361;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 362:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 361;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 365:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 367;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 371:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 377;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 372:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 382;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 374:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 331;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 375:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 360;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 376:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 378;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 381:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 378;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 384:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 386;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 392:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 402;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 393:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 427;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 394:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 439;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 395:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 445;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 397:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 168;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 398:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 310;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 399:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 405;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 400:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 417;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 401:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 419;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 403:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 409;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 404:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 414;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 406:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 173;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 407:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 315;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 408:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 410;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 413:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 410;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 416:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 418;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 424:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 405;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 425:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 429;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 426:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 433;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 428:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 430;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 431:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 414;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 432:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 430;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 437:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 417;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 438:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 441;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 440:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 418;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 444:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 419;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 450:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 456;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 451:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 464;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 452:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 466;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 454:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 458;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 455:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 461;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 457:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 459;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 460:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 459;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 463:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 465;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 469:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 477;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 470:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 484;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 472:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 268;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 473:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 377;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 474:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 429;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 475:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 458;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 476:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 478;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 483:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 478;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 486:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 488;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 496:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 45;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 497:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 499;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 498:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 46;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 502:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 503;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 506:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 507;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 510:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 511;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 516:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 551;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 519:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 542;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 522:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 530;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 524:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 525;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 525:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 526;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 528:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 497;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 529:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 525;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 530:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 534;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 531:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 45;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 532:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 499;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 533:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 526;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 535:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 46;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 541:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 502;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 542:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 544;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 543:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 503;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 550:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 506;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 551:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 553;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 552:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 507;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 559:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 510;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 560:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 562;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 561:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 511;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 569:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 589;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 571:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 585;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 573:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 580;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 574:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 575;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 575:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 576;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 579:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 575;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 580:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 582;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 581:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 576;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 585:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 586;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 589:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 590;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 593:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 594;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 598:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 618;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 600:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 614;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 602:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 609;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 603:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 604;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 604:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 605;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 608:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 604;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 609:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 611;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 610:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 605;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 614:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 615;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 618:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 619;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 622:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 623;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 629:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 780;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 631:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 656;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 633:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 652;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 635:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 648;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 637:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 643;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 638:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 639;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 639:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 640;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 642:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 639;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 643:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 645;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 644:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 640;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 648:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 649;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 652:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 653;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 656:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 657;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 663:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 750;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 665:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 690;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 667:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 686;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 669:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 682;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 671:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 677;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 672:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 673;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 673:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 674;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 676:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 673;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 677:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 679;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 678:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 674;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 682:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 683;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 686:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 687;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 690:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 691;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 695:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 720;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 697:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 716;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 699:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 712;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 701:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 707;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 702:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 703;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 703:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 704;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 706:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 703;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 707:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 709;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 708:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 704;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 712:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 713;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 716:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 717;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 720:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 721;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 725:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 746;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 727:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 742;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 729:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 737;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 730:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 731;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 731:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 732;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 736:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 731;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 737:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 739;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 738:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 732;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 742:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 743;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 746:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 747;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 750:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 751;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 755:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 776;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 757:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 772;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 759:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 767;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 760:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 761;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 761:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 762;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 766:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 761;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 767:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 769;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 768:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 762;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 772:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 773;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 776:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 777;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 780:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 781;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 785:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 806;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 787:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 802;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 789:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 797;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 790:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 791;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 791:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 792;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 796:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 791;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 797:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 799;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 798:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 792;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 802:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 803;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 806:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 807;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 810:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 811;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 816:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 935;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 819:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 906;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 822:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 877;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 824:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 848;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 826:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 844;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 828:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 840;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 830:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 835;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 831:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 832;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 832:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 833;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 834:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 832;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 835:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 837;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 836:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 833;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 840:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 841;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 844:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 845;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 848:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 849;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 853:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 873;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 855:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 869;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 857:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 864;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 858:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 859;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 859:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 860;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 863:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 859;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 864:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 866;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 865:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 860;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 869:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 870;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 873:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 874;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 877:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 878;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 882:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 902;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 884:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 898;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 886:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 893;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 887:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 888;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 888:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 889;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 892:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 888;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 893:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 895;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 894:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 889;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 898:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 899;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 902:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 903;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 906:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 907;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 911:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 931;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 913:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 927;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 915:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 922;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 916:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 917;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 917:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 918;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 921:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 917;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 922:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 924;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 923:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 918;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 927:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 928;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 931:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 932;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 935:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 936;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 940:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 961;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 942:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 957;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 944:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 952;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 945:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 946;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 946:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 947;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 951:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 946;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 952:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 954;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 953:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 947;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 957:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 958;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 961:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 962;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 965:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 966;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 971:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1090;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 974:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1061;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 977:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1032;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 979:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1003;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 981:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 999;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 983:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 995;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 985:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 990;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 986:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 987;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 987:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 988;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 989:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 987;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 990:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 992;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 991:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 988;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 995:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 996;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 999:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1000;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1003:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1004;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1008:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1028;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1010:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1024;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1012:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1019;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1013:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1014;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1014:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1015;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1018:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1014;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1019:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1021;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1020:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1015;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1024:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1025;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1028:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1029;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1032:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1033;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1037:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1057;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1039:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1053;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1041:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1048;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1042:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1043;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1043:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1044;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1047:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1043;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1048:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1050;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1049:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1044;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1053:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1054;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1057:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1058;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1061:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1062;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1066:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1086;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1068:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1082;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1070:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1077;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1071:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1072;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1072:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1073;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1076:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1072;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1077:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1079;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1078:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1073;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1082:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1083;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1086:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1087;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1090:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1091;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1095:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1116;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1097:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1112;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1099:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1107;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1100:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1101;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1101:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1102;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1106:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1101;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1107:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1109;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1108:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1102;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1112:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1113;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1116:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1117;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1120:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1121;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1126:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1245;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1129:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1216;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1132:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1187;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1134:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1158;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1136:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1154;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1138:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1150;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1140:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1145;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1141:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1142;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1142:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1143;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1144:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1142;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1145:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1147;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1146:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1143;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1150:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1151;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1154:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1155;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1158:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1159;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1163:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1183;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1165:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1179;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1167:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1174;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1168:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1169;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1169:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1170;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1173:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1169;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1174:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1176;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1175:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1170;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1179:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1180;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1183:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1184;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1187:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1188;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1192:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1212;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1194:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1208;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1196:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1203;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1197:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1198;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1198:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1199;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1202:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1198;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1203:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1205;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1204:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1199;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1208:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1209;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1212:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1213;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1216:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1217;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1221:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1241;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1223:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1237;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1225:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1232;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1226:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1227;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1227:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1228;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1231:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1227;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1232:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1234;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1233:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1228;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1237:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1238;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1241:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1242;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1245:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1246;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1250:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1271;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1252:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1267;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1254:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1262;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1255:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1256;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1256:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1257;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1261:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1256;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1262:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1264;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1263:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1257;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1267:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1268;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1271:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1272;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1275:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1276;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1280:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1302;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1282:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1298;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1284:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1293;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1285:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1286;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1286:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1287;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1292:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1286;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1293:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1295;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1294:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1287;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1298:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1299;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1302:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1303;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1306:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1311;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1307:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1438;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1308:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1458;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1309:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1314;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1310:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1415;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1311:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1434;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1312:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1317;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1313:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1392;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1314:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1411;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1315:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1320;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1316:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1369;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1317:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1388;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1318:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1322;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1319:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1346;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1320:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1365;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1321:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1324;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1322:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1342;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1323:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1326;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1324:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1339;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1325:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1328;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1326:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1336;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1327:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1329;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1328:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1333;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1329:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1330;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1332:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1330;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1345:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1348;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1346:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1362;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1347:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1350;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1348:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1359;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1349:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1351;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1350:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1356;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1351:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1352;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1355:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1352;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1368:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1371;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1369:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1385;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1370:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1373;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1371:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1382;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1372:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1374;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1373:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1379;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1374:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1375;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1378:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1375;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1391:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1394;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1392:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1408;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1393:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1396;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1394:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1405;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1395:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1397;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1396:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1402;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1397:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1398;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1401:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1398;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1414:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1417;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1415:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1431;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1416:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1419;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1417:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1428;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1418:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1420;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1419:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1425;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1420:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1421;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1424:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1421;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1437:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1440;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1438:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1455;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1439:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1442;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1440:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1452;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1441:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1443;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1442:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1449;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1443:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1444;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1448:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1444;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1461:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1462;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1465:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1466;
											queueFromfft_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1480:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1329;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1484:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1351;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1488:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1374;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1492:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1397;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1496:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1420;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								case 1523:
									if (queueFrommasterTofft_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1443;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterTofft_1_.take());
									}
									monitor.wait();
									break;
								default: throw new Exception("State number out of bounds");
							}
						}
					}
					
				}
			};
			case "master": return new IEnvironment() {
				
				@Override
				public String getName(){
					return environmentName;
				}
				
				@Override
				public <Any, AnyInput> Optional<Any> exchange(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					synchronized (monitor){
						while (true){
							switch (state){
								case 39,41,44,45,78,81,82,83,84,86,94,97,98,99,101,105,123,126,127,128,129,131,138,141,142,143,144,145,146,147,148,150,189,192,194,195,234,237,239,240,264,269,271,274,496,498,502,504,506,508,509,513,531,535,541,543,547,550,552,556,558,567,569,571,574,575,577,579,581,585,587,589,591,592,596,598,600,603,604,606,607,608,610,614,616,618,620,621,625,633,635,638,639,641,642,644,648,650,652,654,655,659,764,794,853,855,858,859,861,863,865,869,871,873,875,876,880,891,911,913,916,917,919,921,923,927,929,931,933,934,938,940,942,945,946,948,950,951,953,957,959,961,963,964,968,981,983,986,987,989,991,995,997,999,1001,1002,1006,1008,1010,1013,1014,1016,1017,1018,1020,1024,1026,1028,1030,1031,1035,1046,1066,1068,1071,1072,1074,1076,1078,1082,1084,1086,1088,1089,1093,1095,1097,1100,1101,1103,1104,1105,1106,1108,1112,1114,1116,1118,1119,1123,1136,1138,1141,1142,1144,1146,1150,1152,1154,1156,1157,1161,1172,1259,1280,1282,1285,1286,1292,1294,1298,1300,1302,1304,1305,1321,1323,1324,1326,1327,1329,1331,1332,1337,1340,1341,1344,1354,1464,1480,1498,1500,1503,1504,1506,1508,1512,1514,1516,1518,1519,1527 :
									monitor.wait();
									break;
								case 0:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTSetVariablesMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 5;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 6;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(4);
											var receiverOptionsArray = new String[]{ "fft_1_","fft_0_","evolve_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 2;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 3;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 4;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.EvolveMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 10;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 9;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 7;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 8;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 13;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 14;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 11;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "evolve_0_","evolve_1_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1306;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1307;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 14;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 3:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_1_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 11;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1469;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1306;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 4:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "fft_0_","fft_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 13;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1307;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1469;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 5:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTSetVariablesMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1280;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 6:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTSetVariablesMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1280;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 7:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1280;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 8:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1280;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 9:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.EvolveMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1498;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 10:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.EvolveMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1498;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 11:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 18;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 17;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 12:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1126;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1125;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 16;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 13:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 17;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1250;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 14:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 18;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1250;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 15:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 21;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 22;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 16:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 971;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 970;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 17:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1095;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 18:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1095;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 19:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 25;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 26;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 23;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 20:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 816;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 815;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 21:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 940;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 22:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 940;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 23:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 28;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 29;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 24:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 629;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 628;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 626;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 25:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 785;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 28;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 26:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 785;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 29;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 27:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 32;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 31;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 28:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 598;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 29:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 598;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 30:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 34;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 35;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 33;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 31:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 569;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 32:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 569;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 33:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 36;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 37;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 34:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 516;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 514;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 35:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 516;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 559;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 36:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 39;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 37:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 39;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 38:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 41;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 40:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 43;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 42;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 42:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 44;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 43:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 496;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 46:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 47;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 47:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 52;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 49;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 48;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 53;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 48:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 60;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 56;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 59;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 49:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 299;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 298;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 56;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 50:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 394;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 296;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 57;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 393;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 51:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 451;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 297;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 450;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 58;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 52:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 298;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 469;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 59;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 53:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 60;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 469;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 299;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 54:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 300;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 486;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 61;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 470;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 55:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 301;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 487;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 471;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 62;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 56:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 66;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 65;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 57:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 159;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 161;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 162;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 58:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 227;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 226;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 225;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 59:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 260;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 261;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 60:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 261;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 281;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 61:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 262;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 288;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 282;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 62:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 295;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 283;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 263;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 63:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 71;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 70;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 64:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 119;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 120;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 65:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 138;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 66:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 138;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 67:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 139;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 151;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 68:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 152;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 140;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 69:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 74;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 75;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 70:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 94;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 71:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 94;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 72:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 95;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 107;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 73:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 108;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 96;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 74:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 78;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 75:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 78;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 76:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 79;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 87;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 77:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 80;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 88;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 79:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 84;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 80:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 86;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 85:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 87:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 84;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 88:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 86;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 89:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 90:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 91;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 92;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 91:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 92:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 93:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 78;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 95:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 101;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 96:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 105;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 100:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 84;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 102:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 99;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 103:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 104:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 86;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 106:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 78;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 107:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 101;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 108:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 105;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 109:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 84;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 110:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 99;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 111:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 112:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 86;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 113:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 87;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 79;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 114:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 117;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 115:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 91;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 92;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 116:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 99;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 117:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 99;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 118:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 80;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 88;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 119:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 123;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 120:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 123;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 121:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 132;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 124;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 122:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 133;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 125;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 124:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 129;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 125:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 131;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 130:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 132:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 129;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 133:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 131;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 134:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 135:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 137;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 136;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 136:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 137:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 139:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 148;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 140:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 150;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 149:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 145;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 151:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 148;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 152:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 150;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 153:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 145;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 154:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 157;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 158;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 155:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 117;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 156:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 137;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 136;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 157:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 145;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 158:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 145;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 159:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 70;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 71;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 160:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 166;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 69;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 165;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 161:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 186;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 184;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 162:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 186;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 205;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 163:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 187;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 207;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 216;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 164:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 208;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 223;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 188;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 165:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 93;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 169;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 166:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 106;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 169;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 167:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 170;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 113;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 178;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 168:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 179;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 171;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 118;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 169:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 78;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 170:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 175;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 100;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 171:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 177;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 104;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 172:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 84;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 173:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 86;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 174:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 175:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 84;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 176:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 103;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 174;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 177:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 86;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 178:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 109;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 175;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 179:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 112;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 177;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 180:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 174;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 111;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 181:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 182;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 115;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 183;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 182:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 103;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 174;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 183:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 111;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 174;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 184:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 94;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 185:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 169;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 93;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 186:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 189;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 187:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 198;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 196;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 188:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 202;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 204;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 190:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 192;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 191:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 195;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 193:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 194;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 196:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 101;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 197:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 175;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 100;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 198:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 192;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 199:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 193;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 200;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 200:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 99;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 201:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 103;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 174;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 202:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 105;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 203:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 177;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 104;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 204:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 195;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 205:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 94;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 206:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 106;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 169;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 207:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 209;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 198;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 208:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 204;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 214;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 209:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 101;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 210:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 109;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 175;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 211:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 212;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 193;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 212:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 99;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 213:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 111;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 174;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 214:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 105;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 215:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 177;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 112;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 216:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 95;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 107;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 217:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 113;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 178;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 170;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 218:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 221;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 219;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 222;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 219:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 117;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 220:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 183;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 182;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 115;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 221:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 200;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 193;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 222:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 193;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 212;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 223:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 108;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 96;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 224:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 118;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 171;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 179;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 225:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 120;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 119;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 226:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 231;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 230;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 227:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 247;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 231;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 228:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 232;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 254;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 248;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 229:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 233;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 249;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 259;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 230:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 123;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 231:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 234;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 232:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 242;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 241;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 233:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 246;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 245;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 235:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 237;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 236:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 240;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 238:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 239;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 241:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 129;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 242:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 237;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 243:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 244;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 238;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 244:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 245:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 131;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 246:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 240;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 247:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 123;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 248:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 242;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 250;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 249:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 246;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 253;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 250:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 129;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 251:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 238;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 252;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 252:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 253:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 131;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 254:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 124;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 132;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 255:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 257;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 258;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 256;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 256:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 136;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 137;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 257:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 244;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 238;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 258:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 238;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 252;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 259:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 133;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 125;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 260:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 138;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 261:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 264;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 262:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 275;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 276;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 263:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 280;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 279;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 265:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 189;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 266:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 234;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 267:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 269;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 268:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 274;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 270:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 271;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 272:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 194;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 273:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 239;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 275:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 148;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 276:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 269;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 277:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 278;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 270;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 278:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 145;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 279:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 150;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 280:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 274;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 281:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 138;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 282:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 284;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 276;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 283:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 280;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 287;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 284:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 148;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 285:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 270;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 286;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 286:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 145;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 287:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 150;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 288:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 151;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 139;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 289:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 293;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 294;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 290;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 290:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 158;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 157;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 291:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 219;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 221;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 222;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 292:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 258;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 256;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 257;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 293:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 278;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 270;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 294:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 270;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 286;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 295:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 152;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 140;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 296:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 303;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 304;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 159;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 297:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 225;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 352;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 353;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 298:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 260;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 371;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 299:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 281;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 371;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 300:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 384;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 288;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 372;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 301:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 373;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 385;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 295;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 302:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 307;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 69;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 308;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 303:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 184;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 327;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 304:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 327;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 205;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 305:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 216;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 340;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 328;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 306:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 223;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 341;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 329;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 307:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 93;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 311;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 308:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 106;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 311;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 309:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 113;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 312;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 320;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 310:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 118;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 321;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 313;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 311:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 78;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 312:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 100;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 317;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 313:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 104;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 319;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 314:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 84;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 315:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 86;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 316:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 317:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 84;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 318:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 103;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 319:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 86;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 320:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 317;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 109;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 321:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 319;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 112;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 322:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 111;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 323:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 115;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 324;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 325;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 324:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 103;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 325:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 111;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 326:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 93;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 311;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 327:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 189;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 328:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 196;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 334;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 329:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 202;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 338;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 330:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 192;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 331:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 195;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 332:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 194;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 333:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 317;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 100;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 334:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 192;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 335:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 332;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 200;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 336:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 103;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 337:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 104;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 319;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 338:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 195;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 339:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 106;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 311;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 340:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 209;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 334;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 341:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 338;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 214;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 342:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 317;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 109;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 343:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 212;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 332;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 344:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 111;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 345:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 319;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 112;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 346:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 320;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 113;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 312;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 347:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 350;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 349;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 219;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 348:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 324;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 325;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 115;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 349:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 332;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 200;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 350:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 212;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 332;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 351:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 321;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 313;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 118;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 352:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 230;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 356;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 353:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 247;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 356;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 354:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 357;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 254;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 365;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 355:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 358;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 366;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 259;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 356:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 234;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 357:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 362;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 241;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 358:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 245;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 364;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 359:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 237;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 360:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 240;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 361:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 239;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 362:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 237;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 363:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 244;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 361;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 364:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 240;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 365:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 250;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 362;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 366:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 253;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 364;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 367:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 361;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 252;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 368:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 369;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 256;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 370;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 369:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 244;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 361;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 370:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 252;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 361;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 371:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 264;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 372:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 275;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 381;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 373:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 279;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 383;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 374:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 189;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 375:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 234;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 376:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 269;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 377:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 274;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 378:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 271;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 379:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 194;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 380:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 239;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 381:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 269;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 382:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 278;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 378;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 383:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 274;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 384:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 381;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 284;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 385:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 287;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 383;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 386:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 378;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 286;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 387:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 390;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 290;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 391;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 388:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 350;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 219;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 349;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 389:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 369;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 256;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 370;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 390:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 278;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 378;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 391:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 286;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 378;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 392:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 398;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 400;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 397;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 399;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 393:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 303;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 161;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 425;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 394:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 425;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 304;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 162;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 395:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 438;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 163;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 426;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 305;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 396:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 306;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 427;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 439;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 164;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 397:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 165;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 69;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 166;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 398:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 308;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 69;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 307;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 399:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 165;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 307;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 403;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 400:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 166;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 403;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 308;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 401:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 416;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 309;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 167;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 404;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 402:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 405;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 417;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 168;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 310;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 403:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 406;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 407;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 404:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 312;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 413;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 170;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 405:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 171;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 415;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 313;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 406:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 78;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 407:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 78;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 408:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 172;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 314;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 409:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 173;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 315;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 410:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 412;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 411;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 411:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 412:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 413:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 172;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 314;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 414:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 182;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 410;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 324;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 415:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 173;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 315;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 416:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 413;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 320;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 178;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 417:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 321;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 179;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 415;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 418:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 183;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 325;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 410;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 419:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 423;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 420;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 421;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 422;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 420:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 115;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 182;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 183;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 421:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 325;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 324;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 115;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 422:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 182;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 324;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 410;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 423:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 410;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 183;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 325;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 424:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 307;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 403;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 165;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 425:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 265;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 374;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 426:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 328;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 432;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 187;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 427:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 436;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 188;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 329;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 428:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 330;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 190;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 429:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 191;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 331;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 430:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 272;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 379;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 431:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 170;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 413;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 312;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 432:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 330;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 190;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 433:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 430;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 221;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 349;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 434:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 410;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 182;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 324;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 435:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 313;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 171;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 415;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 436:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 191;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 331;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 437:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 403;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 166;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 308;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 438:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 340;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 432;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 207;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 439:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 436;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 208;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 341;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 440:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 413;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 178;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 320;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 441:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 430;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 350;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 222;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 442:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 410;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 183;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 325;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 443:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 321;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 179;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 415;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 444:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 404;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 416;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 167;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 309;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 445:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 291;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 388;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 447;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 448;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 446:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 420;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 421;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 423;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 422;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 447:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 221;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 349;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 430;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 448:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 430;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 222;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 350;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 449:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 168;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 405;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 310;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 417;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 450:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 352;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 226;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 454;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 451:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 454;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 227;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 353;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 452:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 228;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 354;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 455;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 463;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 453:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 229;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 464;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 355;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 456;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 454:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 375;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 266;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 455:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 232;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 460;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 357;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 456:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 462;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 233;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 358;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 457:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 235;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 359;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 458:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 360;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 236;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 459:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 273;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 380;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 460:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 235;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 359;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 461:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 257;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 459;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 369;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 462:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 236;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 360;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 463:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 248;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 460;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 365;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 464:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 249;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 366;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 462;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 465:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 258;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 459;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 370;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 466:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 292;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 468;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 389;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 467;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 467:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 257;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 369;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 459;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 468:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 370;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 258;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 459;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 469:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 472;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 473;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 470:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 483;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 262;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 372;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 471:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 373;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 263;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 485;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 472:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 264;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 473:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 264;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 474:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 265;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 374;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 475:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 375;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 266;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 476:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 376;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 267;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 477:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 377;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 268;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 478:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 479;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 480;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 479:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 271;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 480:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 271;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 481:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 272;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 379;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 482:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 273;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 380;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 483:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 376;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 267;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 484:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 390;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 293;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 478;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 485:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 268;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 377;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 486:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 282;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 483;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 384;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 487:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 283;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 485;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 385;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 488:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 294;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 478;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 391;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 489:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 494;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 495;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 491;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 490;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 490:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 290;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 293;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 294;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 491:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 390;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 391;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 290;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 492:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 447;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 388;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 448;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 291;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 493:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 389;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 468;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 292;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 467;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 494:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 390;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 293;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 478;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 495:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 478;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 391;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 294;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 497:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 498;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 499:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 501;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 500;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 500:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 47;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 501:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 47;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 503:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 504;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 505:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 47;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 507:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 508;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 510:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 506;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 511:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 507;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 512;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 512:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 513;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 514:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 39;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 515:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 519;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 517;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 516:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 550;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 517:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 41;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 518:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 522;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 520;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 521;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 519:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 541;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 520:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 43;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 42;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 521:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 524;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 523;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 522:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 529;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 528;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 523:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 44;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 524:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 496;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 525:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 498;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 526:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 527;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 500;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 527:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 47;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 528:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 496;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 529:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 531;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 530:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 532;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 533;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 532:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 498;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 533:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 535;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 534:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 538;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 537;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 536;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 536:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 501;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 500;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 537:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 527;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 539;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 538:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 540;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 527;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 539:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 47;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 540:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 47;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 542:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 543;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 544:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 545;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 546;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 545:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 504;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 546:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 547;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 548:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 549;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 527;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 549:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 47;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 551:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 552;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 553:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 554;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 555;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 554:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 508;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 555:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 556;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 557:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 558;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 559:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 39;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 560:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 551;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 561;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 561:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 506;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 562:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 553;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 563;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 564;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 563:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 507;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 512;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 564:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 566;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 565;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 565:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 513;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 566:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 567;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 568:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 571;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 570:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 573;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 572;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 572:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 574;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 573:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 579;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 576:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 577;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 578:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 47;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 580:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 581;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 582:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 583;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 584;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 583:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 577;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 584:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 577;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 586:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 587;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 588:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 577;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 590:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 591;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 593:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 589;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 594:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 590;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 595;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 595:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 596;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 597:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 600;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 599:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 602;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 601;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 601:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 603;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 602:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 608;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 605:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 606;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 609:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 610;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 611:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 612;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 613;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 612:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 606;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 613:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 606;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 615:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 616;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 617:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 606;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 619:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 620;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 622:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 618;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 623:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 619;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 624;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 624:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 625;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 626:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 630;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 631;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 627:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 662;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 663;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 661;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 660;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 628:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 755;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 630;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 629:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 755;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 631;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 630:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 633;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 631:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 633;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 632:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 635;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 634:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 637;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 636;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 636:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 638;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 637:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 642;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 640:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 641;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 643:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 644;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 645:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 646;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 647;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 646:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 641;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 647:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 641;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 649:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 650;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 651:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 641;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 653:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 654;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 656:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 652;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 657:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 653;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 658;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 658:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 659;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 660:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 664;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 665;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 33;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 661:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 694;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 695;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 33;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 662:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 725;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 694;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 664;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 663:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 725;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 665;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 695;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 664:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 667;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 514;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 665:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 667;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 559;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 666:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 669;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 517;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 667:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 550;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 668:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 671;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 520;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 670;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 669:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 541;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 670:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 672;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 523;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 671:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 528;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 676;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 672:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 496;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 673:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 498;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 674:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 675;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 500;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 675:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 47;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 676:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 531;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 677:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 678;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 532;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 678:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 535;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 679:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 681;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 680;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 536;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 680:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 675;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 539;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 681:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 675;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 540;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 682:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 543;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 683:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 684;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 545;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 684:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 547;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 685:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 675;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 549;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 686:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 552;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 687:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 554;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 688;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 688:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 556;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 689:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 558;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 690:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 686;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 561;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 691:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 687;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 563;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 692;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 692:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 693;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 565;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 693:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 567;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 694:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 697;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 514;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 695:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 697;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 559;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 696:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 699;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 517;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 697:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 550;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 698:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 701;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 520;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 700;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 699:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 541;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 700:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 702;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 523;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 701:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 706;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 528;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 702:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 496;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 703:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 498;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 704:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 705;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 500;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 705:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 47;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 706:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 531;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 707:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 708;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 532;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 708:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 535;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 709:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 536;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 711;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 710;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 710:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 705;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 539;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 711:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 540;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 705;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 712:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 543;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 713:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 714;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 545;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 714:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 547;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 715:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 705;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 549;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 716:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 552;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 717:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 718;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 554;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 718:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 556;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 719:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 558;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 720:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 716;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 561;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 721:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 717;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 722;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 563;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 722:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 723;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 565;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 723:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 567;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 724:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 727;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 666;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 696;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 725:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 667;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 697;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 726:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 729;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 698;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 668;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 728;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 727:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 669;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 699;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 728:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 730;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 670;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 700;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 729:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 671;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 736;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 701;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 730:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 702;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 672;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 731:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 703;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 673;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 732:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 704;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 733;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 674;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 733:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 734;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 735;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 734:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 47;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 735:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 47;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 736:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 706;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 676;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 737:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 738;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 707;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 677;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 738:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 678;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 708;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 739:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 741;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 679;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 709;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 740;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 740:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 710;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 680;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 733;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 741:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 711;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 733;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 681;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 742:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 712;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 682;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 743:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 744;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 713;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 683;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 744:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 714;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 684;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 745:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 685;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 733;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 715;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 746:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 686;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 716;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 747:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 748;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 687;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 717;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 748:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 688;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 718;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 749:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 689;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 719;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 750:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 746;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 690;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 720;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 751:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 747;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 691;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 721;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 752;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 752:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 753;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 692;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 722;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 753:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 693;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 723;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 754:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 757;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 632;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 755:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 633;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 756:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 759;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 634;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 758;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 757:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 635;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 758:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 760;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 636;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 759:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 637;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 766;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 760:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 638;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 761:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 639;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 762:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 640;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 763;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 763:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 764;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 765:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 734;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 735;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 766:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 642;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 767:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 643;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 768;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 768:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 644;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 769:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 771;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 645;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 770;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 770:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 646;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 763;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 771:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 763;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 647;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 772:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 648;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 773:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 774;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 649;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 774:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 650;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 775:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 763;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 651;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 776:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 652;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 777:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 653;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 778;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 778:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 654;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 779:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 655;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 780:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 776;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 656;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 781:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 777;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 657;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 782;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 782:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 783;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 658;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 783:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 659;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 784:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 787;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 597;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 785:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 598;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 786:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 789;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 788;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 599;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 787:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 600;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 788:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 790;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 601;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 789:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 602;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 796;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 790:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 603;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 791:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 604;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 792:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 793;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 605;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 793:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 794;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 795:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 764;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 796:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 608;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 797:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 609;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 798;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 798:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 610;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 799:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 611;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 800;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 801;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 800:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 612;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 793;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 801:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 613;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 793;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 802:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 614;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 803:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 615;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 804;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 804:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 616;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 805:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 793;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 617;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 806:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 618;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 807:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 808;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 619;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 808:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 620;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 809:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 621;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 810:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 806;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 622;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 811:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 807;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 623;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 812;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 812:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 813;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 624;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 813:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 625;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 814:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 818;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 819;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 817;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 815:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 911;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 816:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 911;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 817:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 821;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 822;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 818:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 882;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 821;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 819:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 882;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 822;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 820:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 824;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 823;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 33;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 821:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 853;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 822:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 853;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 823:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 826;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 514;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 824:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 826;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 559;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 825:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 828;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 517;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 826:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 550;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 827:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 830;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 520;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 829;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 828:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 541;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 829:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 831;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 523;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 830:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 834;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 528;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 831:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 496;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 832:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 498;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 833:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 735;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 500;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 834:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 531;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 835:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 532;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 836;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 836:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 535;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 837:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 838;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 536;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 839;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 838:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 539;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 735;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 839:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 540;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 735;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 840:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 543;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 841:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 545;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 842;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 842:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 547;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 843:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 735;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 549;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 844:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 552;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 845:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 554;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 846;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 846:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 556;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 847:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 558;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 848:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 844;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 561;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 849:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 845;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 850;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 563;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 850:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 851;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 565;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 851:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 567;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 852:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 855;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 854:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 857;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 856;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 856:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 858;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 857:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 863;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 860:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 861;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 862:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 47;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 864:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 865;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 866:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 868;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 867;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 867:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 861;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 868:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 861;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 870:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 871;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 872:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 861;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 874:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 875;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 877:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 873;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 878:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 874;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 879;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 879:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 880;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 881:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 884;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 852;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 882:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 853;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 883:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 886;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 885;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 854;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 884:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 855;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 885:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 887;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 856;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 886:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 857;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 892;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 887:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 858;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 888:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 859;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 889:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 890;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 860;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 890:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 891;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 892:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 863;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 893:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 864;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 894;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 894:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 865;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 895:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 896;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 897;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 866;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 896:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 890;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 867;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 897:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 868;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 890;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 898:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 869;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 899:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 900;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 870;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 900:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 871;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 901:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 890;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 872;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 902:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 873;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 903:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 874;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 904;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 904:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 875;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 905:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 876;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 906:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 902;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 877;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 907:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 903;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 908;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 878;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 908:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 909;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 879;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 909:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 880;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 910:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 913;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 912:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 915;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 914;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 914:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 916;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 915:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 921;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 918:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 919;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 920:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 891;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 922:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 923;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 924:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 925;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 926;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 925:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 919;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 926:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 919;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 928:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 929;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 930:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 919;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 932:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 933;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 935:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 931;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 936:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 932;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 937;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 937:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 938;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 939:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 942;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 941:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 944;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 943;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 943:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 945;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 944:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 951;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 947:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 948;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 949:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 794;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 952:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 953;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 954:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 955;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 956;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 955:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 948;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 956:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 948;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 958:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 959;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 960:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 948;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 962:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 963;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 965:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 961;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 966:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 962;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 967;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 967:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 968;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 969:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 973;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 974;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 972;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 970:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1066;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 971:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1066;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 972:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 976;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 977;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 973:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1037;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 976;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 974:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1037;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 977;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 975:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 979;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 978;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 976:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1008;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 977:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1008;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 978:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 981;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 979:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 981;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 980:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 983;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 982:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 985;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 984;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 984:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 986;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 985:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 989;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 988:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 891;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 990:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 991;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 992:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 993;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 994;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 993:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 891;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 994:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 891;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 996:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 997;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 998:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 891;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1000:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1001;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1003:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 999;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1004:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1000;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1005;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1005:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1006;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1007:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1010;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1009:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1012;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1011;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1011:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1013;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1012:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1018;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1015:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1016;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1019:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1020;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1021:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1022;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1023;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1022:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1016;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1023:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1016;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1025:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1026;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1027:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1016;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1029:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1030;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1032:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1028;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1033:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1029;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1034;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1034:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1035;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1036:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1039;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1007;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1037:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1008;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1038:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1041;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1040;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1009;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1039:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1010;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1040:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1042;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1011;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1041:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1047;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1012;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1042:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1013;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1043:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1014;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1044:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1045;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1015;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1045:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1046;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1047:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1018;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1048:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1049;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1019;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1049:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1020;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1050:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1052;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1051;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1021;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1051:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1045;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1022;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1052:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1023;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1045;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1053:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1024;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1054:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1025;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1055;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1055:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1026;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1056:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1045;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1027;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1057:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1028;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1058:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1029;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1059;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1059:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1030;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1060:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1031;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1061:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1057;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1032;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1062:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1058;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1033;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1063;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1063:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1064;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1034;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1064:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1035;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1065:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1068;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1067:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1070;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1069;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1069:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1071;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1070:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1076;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1073:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1074;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1075:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1046;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1077:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1078;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1079:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1081;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1080;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1080:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1074;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1081:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1074;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1083:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1084;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1085:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1074;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1087:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1088;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1090:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1086;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1091:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1087;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1092;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1092:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1093;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1094:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1097;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1096:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1099;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1098;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1098:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1100;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1099:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1106;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1102:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1103;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1107:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1108;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1109:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1110;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1111;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1110:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1103;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1111:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1103;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1113:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1114;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1115:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1103;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1117:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1118;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1120:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1116;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1121:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1117;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1122;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1122:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1123;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1124:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "evolve_0_","evolve_1_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 969;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1128;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1129;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1127;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1125:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1221;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 970;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1126:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1221;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 971;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1127:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_1_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1130;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1132;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1131;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1128:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 973;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1192;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1131;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1129:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 974;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1192;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1132;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1130:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1134;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1133;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1131:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1163;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1133;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1132:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1163;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1134;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1133:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1136;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1134:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1136;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1135:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1138;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1137:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1140;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1139;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1139:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1141;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1140:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1144;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1143:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1046;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1145:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1146;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1147:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1149;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1148;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1148:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1046;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1149:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1046;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1151:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1152;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1153:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1046;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1155:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1156;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1158:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1154;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1159:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1155;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1160;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1160:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1161;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1162:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1165;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1135;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1163:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1136;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1164:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1167;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1137;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1166;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1165:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1138;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1166:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1139;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1168;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1167:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1140;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1173;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1168:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1141;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1169:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1142;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1170:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1143;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1171;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1171:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1172;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1173:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1144;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1174:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1145;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1175;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1175:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1146;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1176:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1147;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1178;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1177;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1177:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1148;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1171;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1178:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1149;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1171;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1179:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1150;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1180:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1151;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1181;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1181:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1152;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1182:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1153;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1171;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1183:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1154;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1184:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1155;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1185;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1185:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1156;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1186:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1157;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1187:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1158;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1183;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1188:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1184;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1159;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1189;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1189:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1160;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1190;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1190:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1161;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1191:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1036;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1194;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1162;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1192:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1037;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1163;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1193:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1196;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1038;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1195;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1164;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1194:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1039;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1165;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1195:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1040;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1197;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1166;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1196:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1041;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1202;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1167;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1197:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1042;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1168;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1198:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1043;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1169;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1199:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1044;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1170;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1200;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1200:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1075;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1201;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1201:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1172;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1202:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1047;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1173;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1203:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1048;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1204;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1174;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1204:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1049;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1175;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1205:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1050;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1176;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1207;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1206;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1206:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1051;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1200;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1177;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1207:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1052;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1178;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1200;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1208:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1053;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1179;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1209:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1054;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1180;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1210;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1210:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1055;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1181;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1211:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1056;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1200;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1182;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1212:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1057;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1183;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1213:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1058;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1214;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1184;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1214:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1059;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1185;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1215:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1060;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1186;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1216:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1212;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1061;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1187;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1217:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1062;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1213;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1188;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1218;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1218:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1063;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1219;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1189;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1219:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1064;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1190;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1220:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1223;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1065;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1221:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1066;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1222:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1225;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1067;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1224;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1223:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1068;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1224:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1069;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1226;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1225:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1070;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1231;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1226:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1071;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1227:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1072;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1228:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1073;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1229;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1229:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1105;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1230:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1075;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1201;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1231:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1076;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1232:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1077;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1233;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1233:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1078;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1234:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1079;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1235;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1236;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1235:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1080;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1229;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1236:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1081;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1229;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1237:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1082;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1238:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1083;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1239;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1239:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1084;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1240:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1085;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1229;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1241:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1086;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1242:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1087;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1243;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1243:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1088;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1244:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1089;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1245:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1241;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1090;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1246:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1242;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1091;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1247;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1247:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1248;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1092;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1248:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1093;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1249:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1252;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1094;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1250:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1095;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1251:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1096;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1254;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1253;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1252:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1097;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1253:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1255;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1098;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1254:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1099;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1261;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1255:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1100;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1256:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1101;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1257:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1102;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1258;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1258:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1259;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1260:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1105;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1261:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1106;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1262:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1107;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1263;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1263:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1108;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1264:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1109;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1265;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1266;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1265:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1110;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1258;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1266:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1111;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1258;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1267:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1112;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1268:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1113;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1269;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1269:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1114;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1270:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1115;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1258;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1271:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1116;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1272:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1117;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1273;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1273:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1118;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1274:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1119;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1275:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1271;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1120;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1276:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1272;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1121;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1277;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1277:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1278;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1122;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1278:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1123;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1279:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTSetVariablesMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1282;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1281:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTSetVariablesMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1284;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1283;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1283:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTSetVariablesMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1285;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1284:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1292;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1287:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1288;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1288:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTSetVariablesMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 5;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 6;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(4);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_0_","fft_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 4;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 2;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 3;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.EvolveMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 9;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 10;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 8;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 7;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1289:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1282;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1290:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1284;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1291;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1291:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1285;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1293:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1294;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1295:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1297;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1296;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1296:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1288;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1297:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1288;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1299:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1300;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1301:
									if (queueFromfft_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1288;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1303:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1304;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1306:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 18;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1310;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1307:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1310;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1250;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1308:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1275;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1311;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1438;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1309:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1313;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 22;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1310:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1095;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1311:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1415;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1120;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1312:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 26;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1316;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1315;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1313:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 940;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1314:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 965;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1392;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1315:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1318;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1319;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1316:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 785;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1319;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1317:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 810;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1369;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1320;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1318:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1321;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1319:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1321;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1320:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1322;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1346;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1322:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1324;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1325:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1327;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1328:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1332;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1330:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1331;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1333:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1334;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1335;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1334:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1331;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1335:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1331;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1336:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1337;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1338:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1331;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1339:
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1340;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1342:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1339;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1343;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1343:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1344;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1345:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1323;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1346:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1324;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1347:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1325;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1349;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1348:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1326;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1349:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1327;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1350:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1328;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1355;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1351:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1329;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1352:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1330;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1353;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1353:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1354;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1355:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1332;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1356:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1333;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1357;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1358;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1357:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1334;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1353;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1358:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1335;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1353;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1359:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1336;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1360;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1360:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1337;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1361:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1338;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1353;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1362:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1339;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1363;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1363:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1340;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1364:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1341;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1365:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1362;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1342;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1366;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1366:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1367;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1343;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1367:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1344;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1368:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 787;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1345;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1369:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 806;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1346;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1370:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 789;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1347;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1372;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1371:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 802;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1348;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1372:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 796;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1349;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1373:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 797;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1378;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1350;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1374:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 791;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1351;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1375:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 792;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1352;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1376;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1376:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 949;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1377;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1377:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1354;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1378:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 798;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1355;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1379:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 799;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1381;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1356;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1380;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1380:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 800;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1357;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1376;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1381:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 801;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1358;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1376;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1382:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 803;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1383;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1359;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1383:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 804;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1360;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1384:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 805;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1361;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1376;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1385:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 807;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1386;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1362;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1386:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 808;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1363;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1387:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 809;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1364;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1388:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 811;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1385;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1389;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1365;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1389:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1390;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 812;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1366;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1390:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 813;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1367;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1391:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 942;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1392:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 961;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1393:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 944;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1395;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1394:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 957;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1395:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 951;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1396:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 952;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1401;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1397:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 946;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1398:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 947;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1399;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1399:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1104;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1400:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 949;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1377;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1401:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 953;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1402:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 954;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1403;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1404;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1403:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 955;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1399;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1404:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 956;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1399;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1405:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 958;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1406;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1406:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 959;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1407:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 960;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1399;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1408:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 962;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1409;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1409:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 963;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1410:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 964;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1411:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 966;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1408;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1412;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1412:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 967;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1413;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1413:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 968;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1414:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1097;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1415:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1116;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1416:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1099;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1418;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1417:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1112;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1418:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1106;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1419:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1107;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1424;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1420:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1101;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1421:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1102;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1422;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1422:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1259;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1423:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1104;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1424:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1108;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1425:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1109;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1427;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1426;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1426:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1110;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1422;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1427:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1111;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1422;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1428:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1113;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1429;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1429:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1114;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1430:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1115;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1422;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1431:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1117;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1432;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1432:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1118;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1433:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1119;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1434:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1121;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1431;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1435;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1435:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1436;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1122;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1436:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1123;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1437:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1252;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1414;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1438:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1415;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1271;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1439:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1416;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1254;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1441;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1440:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1417;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1267;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1441:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1418;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1261;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1442:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1262;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1419;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1448;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1443:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1420;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1256;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1444:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1421;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1257;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1445;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1445:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1447;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1446;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1446:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1259;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1447:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1259;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1448:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1424;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1263;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1449:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1425;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1264;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1450;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1451;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1450:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1426;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1265;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1445;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1451:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1427;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1266;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1445;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1452:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1268;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1428;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1453;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1453:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1269;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1429;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1454:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1430;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1270;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1445;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1455:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1431;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1272;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1456;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1456:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1432;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1273;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1457:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1274;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1433;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1458:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1276;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1434;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1455;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1459;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1459:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "fft_0_","evolve_1_","evolve_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1277;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1460;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1435;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1460:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1436;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1278;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1461:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTSetVariablesMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1302;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1462:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTSetVariablesMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1303;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1463;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1463:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTSetVariablesMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1464;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1465:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1302;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1466:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1303;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromfft_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1467;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromfft_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1467:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.FFTMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1464;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1468:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_1_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1471;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1309;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 15;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1469:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1310;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 17;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1470:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "evolve_1_","fft_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1473;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 19;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1312;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1472;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1471:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1313;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 21;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1472:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "fft_1_","fft_0_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1315;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1474;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1475;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1473:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1316;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 25;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1475;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1474:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1318;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1476;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1475:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1476;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1319;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1476:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1321;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1477:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1323;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1478:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1325;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1479;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1479:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_1_";
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1480;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1481:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1477;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1345;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1482:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1478;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1347;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1483;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1483:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1484;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1479;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1484:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1480;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1485:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_1_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1368;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 784;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1481;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1486:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 786;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1370;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1482;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1487;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1487:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 788;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1488;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1483;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1488:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 790;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1484;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1489:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 939;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1391;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1490:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 941;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1393;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1491;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1491:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 943;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1492;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1492:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 945;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1493:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1094;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1414;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1494:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1096;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1416;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1495;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1495:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "fft_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1098;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1496;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1496:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "fft_0_";
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1100;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1497:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.EvolveMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1500;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1499:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.EvolveMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1502;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1501;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1501:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.EvolveMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_1_";
										}
										if (receiver.equals("evolve_1_")) {
											monitor.notifyAll();
											state = 1503;
											queueFrommasterToevolve_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1502:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1506;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1505:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1288;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1507:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1508;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1509:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1511;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1510;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1510:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1288;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1511:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1288;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1513:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1514;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1515:
									if (queueFromevolve_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1288;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1517:
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1518;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1520:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_1_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1493;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1437;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1249;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1521:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "fft_1_","evolve_0_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1439;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1494;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1251;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1522;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1522:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_0_","fft_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1495;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1253;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_1_")) {
											monitor.notifyAll();
											state = 1523;
											queueFrommasterTofft_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1523:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "evolve_0_","fft_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1496;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("fft_0_")) {
											monitor.notifyAll();
											state = 1255;
											queueFrommasterTofft_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1524:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.EvolveMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1516;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1525:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.EvolveMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1517;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromevolve_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1526;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromevolve_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1526:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.FTThreads.EvolveMessage.class ) {
										if (receiver == null) {
											receiver = "evolve_0_";
										}
										if (receiver.equals("evolve_0_")) {
											monitor.notifyAll();
											state = 1527;
											queueFrommasterToevolve_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								default: throw new Exception("State number out of bounds");
							}
						}
					}
					
				}
			};
			default: throw new Exception("Unknown environment");
		}
	}
	
	@Override
	public String[] threadNames(){
		return new String[] { "evolve_0_","fft_1_","fft_0_","evolve_1_","master" };
	}
	
	@Override
	public Object[] dummies(){
		return new Object[]{"TestStringDummy"};
	}
	
	@Override
	public int getState(){
		return this.state;
	}
}
