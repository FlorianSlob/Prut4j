/* !!! IMPORTANT !!!
 * !!! This code is generated from a protocol definition. !!!
 * !!! Any Changes made to this code could be overridden. !!!
 * !!! If you want to change the protocol, change its definition and regenerate this code. !!!
 **/
package nl.florianslob.modelchecking.generated;

// Import types from the API
import nl.florianslob.modelchecking.base.api.v2.*;

import java.util.Optional;
import java.util.Random;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class MGProtocol_n_1 implements IProtocol {
	private volatile int state = 0;
	private final Object monitor = this;
	
	private final BlockingQueue<Object> queueFrompsinv_0_Tomaster = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFrommasterTorprj_0_ = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFromresid_0_Tomaster = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFrommasterTopsinv_0_ = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFrommasterToresid_0_ = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFrominterp_0_Tomaster = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFrommasterTointerp_0_ = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFromrprj_0_Tomaster = new LinkedBlockingQueue<>(); 
	
	@Override
	public IEnvironment getEnvironment(String environmentName) throws Exception{
		switch (environmentName){
			case "interp_0_": return new IEnvironment() {
				
				@Override
				public String getName(){
					return environmentName;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_0_199(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 0 :
						case 2 :
						case 3 :
						case 4 :
						case 6 :
						case 7 :
						case 8 :
						case 10 :
						case 11 :
						case 16 :
						case 20 :
						case 21 :
						case 22 :
						case 23 :
						case 24 :
						case 25 :
						case 26 :
						case 27 :
						case 28 :
						case 29 :
						case 30 :
						case 31 :
						case 32 :
						case 33 :
						case 34 :
						case 35 :
						case 36 :
						case 37 :
						case 38 :
						case 39 :
						case 40 :
						case 41 :
						case 42 :
						case 43 :
						case 44 :
						case 45 :
						case 46 :
						case 49 :
						case 56 :
						case 63 :
						case 64 :
						case 65 :
						case 66 :
						case 67 :
						case 68 :
						case 69 :
						case 70 :
						case 71 :
						case 72 :
						case 73 :
						case 74 :
						case 75 :
						case 76 :
						case 77 :
						case 78 :
						case 79 :
						case 80 :
						case 81 :
						case 82 :
						case 83 :
						case 84 :
						case 85 :
						case 86 :
						case 87 :
						case 88 :
						case 89 :
						case 90 :
						case 91 :
						case 92 :
						case 93 :
						case 94 :
						case 95 :
						case 96 :
						case 97 :
						case 98 :
						case 99 :
						case 100 :
						case 101 :
						case 102 :
						case 103 :
						case 104 :
						case 105 :
						case 106 :
						case 107 :
						case 108 :
						case 109 :
						case 110 :
						case 111 :
						case 112 :
						case 113 :
						case 114 :
						case 115 :
						case 116 :
						case 117 :
						case 118 :
						case 119 :
						case 120 :
						case 121 :
						case 122 :
						case 123 :
						case 124 :
						case 125 :
						case 126 :
						case 127 :
						case 128 :
						case 129 :
						case 130 :
						case 131 :
						case 132 :
						case 133 :
						case 134 :
						case 135 :
						case 136 :
						case 137 :
						case 138 :
						case 139 :
						case 140 :
						case 141 :
						case 142 :
						case 143 :
						case 144 :
						case 145 :
						case 146 :
						case 147 :
						case 148 :
						case 149 :
						case 150 :
						case 151 :
						case 152 :
						case 153 :
						case 154 :
						case 155 :
						case 156 :
						case 157 :
						case 158 :
						case 159 :
						case 160 :
						case 161 :
						case 162 :
						case 163 :
						case 164 :
						case 165 :
						case 166 :
						case 167 :
						case 168 :
						case 169 :
						case 170 :
						case 171 :
						case 172 :
						case 173 :
						case 174 :
							monitor.wait();
							break;
						case 1:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 9;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 5:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 12;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 9:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 10;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 12:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 16;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 13:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 17;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 14:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 18;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 15:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 19;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 17:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 21;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 18:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 22;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 19:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 23;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 47:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 49;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 48:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 56;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 50:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 312;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 51:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 505;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 52:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 557;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 53:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 589;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 54:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 608;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 55:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 619;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 57:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 63;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 58:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 223;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 59:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 259;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 60:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 283;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 61:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 298;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 62:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 307;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 175:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 69;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 176:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 137;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 177:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 153;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 178:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 164;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 179:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 171;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 180:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 74;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 181:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 102;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 182:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 109;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 183:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 114;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 184:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 78;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 185:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 89;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 186:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 92;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 187:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 81;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 188:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 85;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 189:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 83;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 190:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 91;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 191:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 85;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 192:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 105;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 193:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 108;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 194:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 107;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 195:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 89;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 196:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 112;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 197:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 91;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 198:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 92;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 199:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 108;
								return Optional.empty();
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_200_399(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 223 :
						case 228 :
						case 232 :
						case 235 :
						case 237 :
						case 238 :
						case 239 :
						case 241 :
						case 242 :
						case 244 :
						case 247 :
						case 249 :
						case 250 :
						case 251 :
						case 254 :
						case 256 :
						case 259 :
						case 264 :
						case 268 :
						case 271 :
						case 273 :
						case 275 :
						case 278 :
						case 280 :
						case 283 :
						case 288 :
						case 292 :
						case 295 :
						case 298 :
						case 303 :
						case 307 :
						case 312 :
						case 313 :
						case 314 :
						case 315 :
						case 316 :
						case 317 :
						case 318 :
						case 319 :
						case 320 :
						case 321 :
						case 322 :
						case 323 :
						case 324 :
						case 325 :
						case 326 :
						case 327 :
						case 328 :
						case 329 :
						case 330 :
						case 331 :
						case 332 :
						case 333 :
						case 334 :
						case 335 :
						case 336 :
						case 337 :
						case 338 :
						case 339 :
						case 340 :
						case 341 :
						case 342 :
						case 343 :
						case 344 :
						case 345 :
						case 346 :
						case 347 :
						case 348 :
						case 349 :
						case 350 :
						case 351 :
						case 352 :
						case 353 :
						case 354 :
						case 355 :
						case 356 :
						case 357 :
						case 358 :
						case 359 :
						case 360 :
						case 361 :
						case 362 :
						case 363 :
						case 364 :
						case 365 :
						case 366 :
						case 367 :
						case 368 :
						case 369 :
						case 370 :
						case 371 :
						case 372 :
						case 373 :
						case 374 :
						case 375 :
						case 376 :
						case 377 :
						case 378 :
						case 379 :
						case 380 :
						case 381 :
						case 382 :
						case 383 :
						case 384 :
						case 385 :
						case 386 :
						case 387 :
						case 388 :
						case 389 :
						case 390 :
						case 391 :
						case 392 :
						case 393 :
						case 394 :
						case 395 :
						case 396 :
						case 397 :
						case 398 :
						case 399 :
							monitor.wait();
							break;
						case 200:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 141;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 201:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 148;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 202:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 151;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 203:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 144;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 204:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 147;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 205:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 146;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 206:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 150;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 207:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 147;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 208:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 102;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 209:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 157;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 210:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 162;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 211:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 105;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 212:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 160;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 213:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 107;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 214:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 108;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 215:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 109;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 216:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 148;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 217:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 168;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 218:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 112;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 219:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 150;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 220:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 114;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 221:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 151;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 222:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 162;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 224:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 228;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 225:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 244;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 226:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 251;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 227:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 256;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 229:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 232;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 230:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 239;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 231:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 242;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 233:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 235;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 234:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 238;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 236:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 237;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 240:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 241;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 243:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 238;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 245:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 247;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 246:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 250;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 248:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 249;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 252:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 239;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 253:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 254;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 255:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 241;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 257:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 242;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 258:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 250;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 260:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 137;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 261:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 264;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 262:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 275;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 263:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 280;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 265:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 141;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 266:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 268;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 267:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 273;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 269:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 144;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 270:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 271;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 272:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 146;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 274:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 147;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 276:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 148;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 277:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 278;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 279:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 150;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 281:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 151;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 282:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 273;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 284:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 153;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 285:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 244;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 286:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 288;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 287:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 295;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 289:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 157;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 290:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 247;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 291:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 292;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 293:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 160;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 294:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 249;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 296:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 162;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 297:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 250;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 299:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 164;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 300:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 251;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 301:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 275;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 302:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 303;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 304:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 168;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 305:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 254;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 306:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 278;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 308:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 171;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 309:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 256;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 310:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 280;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 311:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 295;
								return Optional.empty();
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_400_599(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 400 :
						case 401 :
						case 402 :
						case 403 :
						case 404 :
						case 405 :
						case 406 :
						case 407 :
						case 408 :
						case 409 :
						case 410 :
						case 411 :
						case 412 :
						case 413 :
						case 414 :
						case 415 :
						case 416 :
						case 417 :
						case 418 :
						case 419 :
						case 420 :
						case 421 :
						case 422 :
						case 423 :
						case 505 :
						case 511 :
						case 516 :
						case 520 :
						case 523 :
						case 525 :
						case 527 :
						case 530 :
						case 532 :
						case 535 :
						case 539 :
						case 542 :
						case 544 :
						case 546 :
						case 550 :
						case 553 :
						case 557 :
						case 563 :
						case 568 :
						case 572 :
						case 575 :
						case 578 :
						case 582 :
						case 585 :
						case 589 :
						case 595 :
							monitor.wait();
							break;
						case 424:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 63;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 425:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 318;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 426:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 386;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 427:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 402;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 428:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 413;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 429:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 420;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 430:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 69;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 431:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 323;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 432:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 351;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 433:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 358;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 434:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 363;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 435:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 74;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 436:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 327;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 437:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 338;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 438:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 341;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 439:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 78;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 440:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 330;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 441:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 334;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 442:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 81;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 443:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 332;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 444:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 83;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 445:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 85;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 446:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 89;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 447:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 340;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 448:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 91;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 449:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 92;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 450:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 334;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 451:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 102;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 452:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 354;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 453:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 357;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 454:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 105;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 455:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 356;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 456:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 107;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 457:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 108;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 458:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 109;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 459:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 338;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 460:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 361;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 461:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 112;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 462:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 340;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 463:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 114;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 464:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 341;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 465:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 357;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 466:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 137;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 467:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 390;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 468:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 397;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 469:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 400;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 470:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 141;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 471:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 393;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 472:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 396;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 473:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 144;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 474:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 395;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 475:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 146;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 476:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 147;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 477:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 148;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 478:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 399;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 479:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 150;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 480:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 151;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 481:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 396;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 482:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 153;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 483:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 351;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 484:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 406;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 485:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 411;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 486:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 157;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 487:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 354;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 488:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 409;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 489:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 160;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 490:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 356;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 491:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 162;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 492:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 357;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 493:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 164;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 494:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 358;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 495:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 397;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 496:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 417;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 497:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 168;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 498:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 361;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 499:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 399;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 500:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 171;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 501:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 363;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 502:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 400;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 503:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 411;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 504:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 223;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 506:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 511;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 507:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 535;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 508:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 546;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 509:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 553;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 510:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 228;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 512:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 516;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 513:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 527;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 514:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 532;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 515:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 232;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 517:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 520;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 518:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 525;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 519:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 235;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 521:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 523;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 522:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 237;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 524:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 238;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 526:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 239;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 528:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 530;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 529:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 241;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 531:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 242;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 533:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 525;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 534:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 244;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 536:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 539;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 537:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 544;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 538:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 247;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 540:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 542;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 541:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 249;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 543:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 250;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 545:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 251;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 547:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 527;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 548:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 550;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 549:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 254;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 551:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 530;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 552:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 256;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 554:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 532;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 555:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 544;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 556:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 259;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 558:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 386;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 559:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 563;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 560:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 578;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 561:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 585;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 562:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 264;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 564:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 390;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 565:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 568;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 566:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 575;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 567:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 268;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 569:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 393;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 570:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 572;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 571:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 271;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 573:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 395;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 574:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 273;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 576:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 396;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 577:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 275;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 579:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 397;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 580:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 582;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 581:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 278;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 583:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 399;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 584:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 280;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 586:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 400;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 587:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 575;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 588:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 283;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 590:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 402;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 591:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 535;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 592:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 595;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 593:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 604;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 594:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 288;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 596:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 406;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 597:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 539;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 598:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 600;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 599:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 292;
								return Optional.empty();
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_600_799(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 600 :
						case 604 :
						case 608 :
						case 614 :
						case 619 :
						case 624 :
						case 625 :
						case 626 :
						case 627 :
						case 628 :
						case 629 :
						case 630 :
						case 631 :
						case 632 :
						case 633 :
						case 634 :
						case 635 :
						case 636 :
						case 637 :
						case 638 :
						case 639 :
						case 640 :
						case 641 :
						case 642 :
						case 643 :
						case 644 :
						case 645 :
						case 646 :
						case 647 :
						case 648 :
						case 649 :
						case 650 :
						case 651 :
						case 652 :
						case 653 :
						case 654 :
						case 655 :
						case 656 :
						case 657 :
						case 658 :
						case 659 :
						case 660 :
						case 661 :
						case 662 :
						case 663 :
						case 664 :
						case 665 :
						case 666 :
						case 667 :
						case 668 :
						case 669 :
						case 670 :
						case 671 :
						case 672 :
						case 673 :
						case 674 :
						case 675 :
						case 676 :
						case 677 :
						case 678 :
						case 679 :
						case 680 :
						case 681 :
						case 682 :
						case 683 :
						case 684 :
						case 685 :
						case 686 :
						case 687 :
						case 688 :
						case 689 :
						case 690 :
						case 691 :
						case 692 :
						case 693 :
						case 694 :
						case 695 :
						case 696 :
						case 697 :
						case 698 :
						case 699 :
						case 700 :
						case 701 :
						case 702 :
						case 703 :
						case 704 :
						case 705 :
						case 706 :
						case 707 :
						case 708 :
						case 709 :
						case 710 :
						case 711 :
						case 712 :
						case 713 :
						case 714 :
						case 715 :
						case 716 :
						case 717 :
						case 718 :
						case 719 :
						case 720 :
						case 721 :
						case 722 :
						case 723 :
						case 724 :
						case 725 :
						case 726 :
						case 727 :
						case 728 :
						case 729 :
						case 730 :
						case 731 :
						case 732 :
						case 733 :
						case 734 :
						case 735 :
						case 736 :
						case 737 :
						case 738 :
						case 739 :
						case 740 :
						case 741 :
						case 742 :
						case 743 :
						case 744 :
						case 745 :
						case 746 :
						case 747 :
						case 748 :
						case 749 :
						case 750 :
						case 751 :
						case 752 :
						case 753 :
						case 754 :
						case 755 :
						case 756 :
						case 757 :
						case 758 :
						case 759 :
						case 760 :
						case 761 :
						case 762 :
						case 763 :
						case 764 :
						case 765 :
						case 766 :
						case 767 :
						case 768 :
						case 769 :
						case 770 :
						case 771 :
						case 772 :
						case 773 :
						case 774 :
						case 775 :
						case 776 :
						case 777 :
						case 778 :
						case 779 :
						case 780 :
						case 781 :
						case 782 :
						case 783 :
						case 784 :
						case 785 :
						case 786 :
						case 787 :
						case 788 :
						case 789 :
						case 790 :
						case 791 :
						case 792 :
						case 793 :
						case 794 :
						case 795 :
						case 796 :
						case 797 :
						case 798 :
						case 799 :
							monitor.wait();
							break;
						case 601:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 409;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 602:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 542;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 603:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 295;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 605:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 411;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 606:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 544;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 607:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 298;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 609:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 413;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 610:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 546;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 611:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 578;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 612:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 614;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 613:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 303;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 615:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 417;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 616:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 550;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 617:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 582;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 618:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 307;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 620:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 420;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 621:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 553;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 622:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 585;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 623:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 604;
								return Optional.empty();
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_800_999(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 800 :
						case 801 :
						case 802 :
						case 803 :
						case 804 :
						case 805 :
						case 806 :
						case 807 :
						case 808 :
						case 809 :
						case 810 :
						case 811 :
						case 812 :
						case 813 :
						case 814 :
						case 815 :
						case 816 :
						case 817 :
						case 818 :
						case 819 :
						case 820 :
						case 821 :
						case 822 :
						case 823 :
						case 824 :
						case 825 :
						case 826 :
						case 827 :
						case 828 :
						case 829 :
						case 830 :
						case 831 :
						case 832 :
						case 833 :
						case 834 :
						case 835 :
						case 836 :
						case 837 :
						case 838 :
						case 839 :
						case 840 :
						case 841 :
						case 842 :
						case 843 :
						case 844 :
						case 845 :
						case 846 :
						case 847 :
						case 848 :
						case 849 :
						case 850 :
						case 851 :
						case 852 :
						case 853 :
						case 854 :
						case 855 :
						case 856 :
						case 857 :
						case 858 :
						case 859 :
						case 860 :
						case 861 :
						case 862 :
						case 863 :
						case 864 :
						case 865 :
						case 866 :
						case 867 :
						case 868 :
						case 869 :
						case 870 :
						case 871 :
						case 872 :
						case 873 :
						case 874 :
						case 875 :
						case 876 :
						case 877 :
						case 878 :
						case 879 :
						case 880 :
						case 881 :
						case 882 :
						case 883 :
						case 884 :
						case 885 :
						case 886 :
						case 887 :
						case 888 :
						case 889 :
						case 890 :
						case 891 :
						case 892 :
						case 893 :
						case 894 :
						case 895 :
						case 896 :
						case 897 :
						case 898 :
						case 899 :
						case 900 :
						case 901 :
						case 902 :
						case 903 :
						case 904 :
						case 905 :
						case 906 :
						case 907 :
						case 908 :
						case 909 :
						case 910 :
						case 911 :
						case 912 :
						case 913 :
						case 914 :
						case 915 :
						case 916 :
						case 917 :
						case 918 :
						case 919 :
						case 920 :
						case 921 :
						case 922 :
						case 923 :
						case 924 :
						case 925 :
						case 926 :
						case 927 :
						case 928 :
						case 929 :
						case 930 :
						case 931 :
						case 932 :
						case 933 :
						case 934 :
						case 935 :
						case 936 :
						case 937 :
						case 938 :
						case 939 :
						case 940 :
						case 941 :
						case 942 :
						case 943 :
						case 944 :
						case 945 :
						case 946 :
						case 947 :
						case 948 :
						case 949 :
						case 950 :
						case 951 :
						case 952 :
						case 953 :
						case 954 :
						case 955 :
						case 956 :
						case 957 :
						case 958 :
						case 959 :
						case 960 :
						case 961 :
						case 962 :
						case 963 :
						case 964 :
						case 965 :
						case 966 :
						case 967 :
						case 968 :
						case 969 :
						case 970 :
						case 971 :
						case 972 :
						case 973 :
						case 974 :
						case 975 :
						case 976 :
						case 977 :
						case 978 :
						case 979 :
						case 980 :
						case 981 :
						case 982 :
						case 983 :
						case 984 :
						case 985 :
						case 986 :
						case 987 :
						case 988 :
						case 989 :
						case 990 :
						case 991 :
						case 992 :
						case 993 :
						case 994 :
						case 995 :
						case 996 :
						case 997 :
						case 998 :
						case 999 :
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1000_1199(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1000 :
						case 1001 :
						case 1002 :
						case 1003 :
						case 1004 :
						case 1005 :
						case 1006 :
						case 1007 :
						case 1008 :
						case 1009 :
						case 1010 :
						case 1011 :
						case 1012 :
						case 1013 :
						case 1014 :
						case 1015 :
						case 1016 :
						case 1017 :
						case 1018 :
						case 1019 :
						case 1020 :
						case 1021 :
						case 1022 :
						case 1023 :
						case 1024 :
						case 1025 :
						case 1026 :
						case 1027 :
						case 1028 :
						case 1029 :
						case 1030 :
						case 1031 :
						case 1032 :
						case 1033 :
						case 1034 :
						case 1035 :
						case 1036 :
						case 1037 :
						case 1038 :
						case 1039 :
						case 1040 :
						case 1041 :
						case 1042 :
						case 1043 :
						case 1044 :
						case 1045 :
						case 1046 :
						case 1047 :
						case 1048 :
						case 1049 :
						case 1050 :
						case 1051 :
						case 1052 :
						case 1053 :
						case 1054 :
						case 1055 :
						case 1056 :
						case 1057 :
						case 1058 :
						case 1059 :
						case 1069 :
						case 1078 :
						case 1083 :
						case 1101 :
							monitor.wait();
							break;
						case 1060:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 783;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1061:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 784;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1062:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 785;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1063:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 787;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1064:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 788;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1065:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 789;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1066:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1069;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1067:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 792;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1068:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 793;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1070:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 794;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1071:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 795;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1072:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 796;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1073:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 797;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1074:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 798;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1075:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 799;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1076:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1078;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1077:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 801;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1079:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 802;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1080:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 803;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1081:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 804;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1082:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1083;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1084:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 802;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1085:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 807;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1086:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 803;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1087:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 809;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1088:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 804;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1089:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 815;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1090:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 812;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1091:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 813;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1092:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 819;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1093:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 815;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1094:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 816;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1095:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 817;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1096:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 823;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1097:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 819;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1098:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 820;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1099:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 821;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1100:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1101;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1102:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 823;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1103:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 794;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1104:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 826;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1105:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 827;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1106:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 796;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1107:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 830;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1108:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 831;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1109:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 798;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1110:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 905;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1111:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 835;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1112:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 837;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1113:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 839;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1114:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 841;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1115:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 914;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1116:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 801;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1117:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 837;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1118:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 848;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1119:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 807;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1120:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 839;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1121:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 852;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1122:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 809;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1123:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 841;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1124:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 870;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1125:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 815;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1126:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 799;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1127:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 861;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1128:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 812;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1129:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 864;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1130:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 813;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1131:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 882;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1132:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 819;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1133:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 870;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1134:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 797;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1135:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 873;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1136:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 816;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1137:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 876;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1138:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 817;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1139:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 894;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1140:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 823;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1141:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 882;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1142:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 795;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1143:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 885;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1144:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 820;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1145:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 888;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1146:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 821;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1147:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 948;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1148:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1101;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1149:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 894;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1150:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 896;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1151:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 897;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1152:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 899;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1153:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 900;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1154:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 960;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1155:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 903;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1156:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 905;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1157:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 906;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1158:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 908;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1159:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 910;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1160:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 969;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1161:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 914;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1162:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 906;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1163:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 917;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1164:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 908;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1165:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 920;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1166:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 910;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1167:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 932;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1168:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 926;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1169:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 928;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1170:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 940;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1171:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 932;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1172:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 934;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1173:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 936;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1174:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 949;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1175:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 940;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1176:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 942;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1177:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 944;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1178:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1003;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1179:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 948;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1180:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 949;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1181:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 951;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1182:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 952;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1183:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 954;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1184:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 955;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1185:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1015;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1186:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 958;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1187:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 960;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1188:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 961;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1189:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 963;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1190:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 965;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1191:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1024;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1192:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 969;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1193:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 961;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1194:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 972;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1195:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 963;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1196:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 975;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1197:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 965;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1198:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 987;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1199:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 981;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1200_1399(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1218 :
						case 1224 :
						case 1243 :
							monitor.wait();
							break;
						case 1200:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 983;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1201:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 995;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1202:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 987;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1203:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 989;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1204:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 991;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1205:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1004;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1206:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 995;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1207:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 997;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1208:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 999;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1209:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1058;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1210:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1003;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1211:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1004;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1212:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1006;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1213:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1007;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1214:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1009;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1215:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1010;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1216:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1218;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1217:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1013;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1219:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1015;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1220:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1016;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1221:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1018;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1222:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1020;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1223:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1224;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1225:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1024;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1226:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1016;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1227:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1027;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1228:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1018;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1229:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1030;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1230:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1020;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1231:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1042;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1232:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1036;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1233:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1038;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1234:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1050;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1235:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1042;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1236:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1044;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1237:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1046;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1238:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1059;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1239:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1050;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1240:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1052;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1241:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1054;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1242:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1243;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1244:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1058;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1245:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1059;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1246:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1060;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1247:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1061;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1248:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1062;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1249:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1063;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1250:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1064;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1251:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1065;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1252:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1255;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1253:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1067;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1254:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1068;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1255:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1069;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1256:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1070;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1257:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1071;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1258:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1072;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1259:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1073;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1260:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1074;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1261:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1075;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1262:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1264;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1263:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1077;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1264:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1078;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1265:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1079;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1266:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1080;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1267:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1081;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1268:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1269;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1269:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1083;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1270:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1079;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1271:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1085;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1272:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1080;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1273:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1087;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1274:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1081;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1275:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1093;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1276:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1090;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1277:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1091;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1278:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1097;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1279:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1093;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1280:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1094;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1281:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1095;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1282:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1102;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1283:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1097;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1284:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1098;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1285:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1099;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1286:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1287;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1287:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1101;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1288:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1102;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1289:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1070;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1290:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1104;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1291:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1105;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1292:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1072;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1293:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1107;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1294:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1108;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1295:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1074;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1296:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1156;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1297:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1111;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1298:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1112;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1299:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1113;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1300:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1114;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1301:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1161;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1302:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1077;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1303:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1112;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1304:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1118;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1305:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1085;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1306:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1113;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1307:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1121;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1308:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1087;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1309:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1114;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1310:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1133;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1311:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1093;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1312:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1075;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1313:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1127;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1314:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1090;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1315:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1129;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1316:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1091;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1317:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1141;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1318:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1097;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1319:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1133;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1320:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1073;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1321:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1135;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1322:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1094;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1323:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1137;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1324:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1095;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1325:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1149;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1326:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1102;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1327:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1141;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1328:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1071;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1329:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1143;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1330:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1098;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1331:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1145;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1332:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1099;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1333:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1179;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1334:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1287;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1335:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1149;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1336:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1150;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1337:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1151;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1338:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1152;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1339:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1153;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1340:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1187;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1341:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1155;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1342:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1156;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1343:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1157;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1344:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1158;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1345:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1159;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1346:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1192;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1347:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1161;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1348:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1157;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1349:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1163;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1350:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1158;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1351:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1165;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1352:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1159;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1353:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1171;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1354:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1168;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1355:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1169;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1356:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1175;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1357:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1171;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1358:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1172;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1359:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1173;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1360:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1180;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1361:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1175;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1362:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1176;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1363:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1177;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1364:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1210;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1365:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1179;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1366:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1180;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1367:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1181;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1368:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1182;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1369:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1183;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1370:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1184;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1371:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1219;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1372:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1186;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1373:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1187;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1374:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1188;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1375:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1189;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1376:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1190;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1377:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1225;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1378:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1192;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1379:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1188;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1380:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1194;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1381:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1189;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1382:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1196;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1383:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1190;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1384:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1202;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1385:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1199;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1386:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1200;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1387:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1206;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1388:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1202;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1389:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1203;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1390:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1204;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1391:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1211;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1392:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1206;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1393:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1207;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1394:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1208;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1395:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1244;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1396:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1210;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1397:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1211;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1398:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1212;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1399:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1213;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1400_1599(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1432 :
						case 1433 :
						case 1434 :
						case 1435 :
						case 1436 :
						case 1437 :
						case 1438 :
						case 1439 :
						case 1440 :
						case 1441 :
						case 1442 :
						case 1444 :
						case 1445 :
						case 1446 :
						case 1447 :
						case 1448 :
						case 1449 :
						case 1450 :
						case 1451 :
						case 1453 :
						case 1454 :
						case 1455 :
						case 1456 :
						case 1458 :
						case 1459 :
						case 1460 :
						case 1461 :
						case 1462 :
						case 1463 :
						case 1464 :
						case 1465 :
						case 1466 :
						case 1467 :
						case 1468 :
						case 1469 :
						case 1470 :
						case 1471 :
						case 1472 :
						case 1473 :
						case 1474 :
						case 1476 :
						case 1477 :
						case 1478 :
						case 1479 :
						case 1480 :
						case 1481 :
						case 1482 :
						case 1483 :
						case 1484 :
						case 1485 :
						case 1486 :
						case 1487 :
						case 1488 :
						case 1489 :
						case 1490 :
						case 1491 :
						case 1492 :
						case 1493 :
						case 1494 :
						case 1495 :
						case 1496 :
						case 1497 :
						case 1498 :
						case 1499 :
						case 1500 :
						case 1501 :
						case 1502 :
						case 1503 :
						case 1504 :
						case 1505 :
						case 1506 :
						case 1507 :
						case 1508 :
						case 1509 :
						case 1510 :
						case 1511 :
						case 1512 :
						case 1513 :
						case 1514 :
						case 1515 :
						case 1516 :
						case 1517 :
						case 1518 :
						case 1519 :
						case 1520 :
						case 1521 :
						case 1522 :
						case 1523 :
						case 1524 :
						case 1525 :
						case 1526 :
						case 1527 :
						case 1528 :
						case 1529 :
						case 1530 :
						case 1531 :
						case 1532 :
						case 1533 :
						case 1534 :
						case 1535 :
						case 1536 :
						case 1537 :
						case 1538 :
						case 1539 :
						case 1540 :
						case 1541 :
						case 1542 :
						case 1543 :
						case 1544 :
						case 1545 :
						case 1546 :
						case 1547 :
						case 1548 :
						case 1549 :
						case 1550 :
						case 1551 :
						case 1552 :
						case 1553 :
						case 1554 :
						case 1555 :
						case 1556 :
						case 1557 :
						case 1558 :
						case 1559 :
						case 1560 :
						case 1561 :
						case 1562 :
						case 1563 :
						case 1564 :
						case 1565 :
						case 1566 :
						case 1567 :
						case 1568 :
						case 1569 :
						case 1570 :
						case 1571 :
						case 1572 :
						case 1573 :
						case 1574 :
						case 1575 :
						case 1576 :
						case 1577 :
						case 1578 :
						case 1579 :
						case 1580 :
						case 1581 :
						case 1582 :
						case 1583 :
						case 1584 :
						case 1585 :
						case 1586 :
						case 1587 :
						case 1588 :
						case 1589 :
						case 1590 :
						case 1591 :
						case 1592 :
						case 1593 :
						case 1595 :
						case 1596 :
						case 1597 :
						case 1598 :
						case 1599 :
							monitor.wait();
							break;
						case 1400:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1214;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1401:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1215;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1402:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1404;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1403:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1217;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1404:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1218;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1405:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1219;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1406:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1220;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1407:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1221;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1408:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1222;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1409:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1410;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1410:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1224;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1411:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1225;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1412:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1220;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1413:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1227;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1414:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1221;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1415:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1229;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1416:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1222;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1417:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1235;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1418:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1232;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1419:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1233;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1420:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1239;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1421:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1235;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1422:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1236;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1423:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1237;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1424:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1245;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1425:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1239;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1426:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1240;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1427:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1241;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1428:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1429;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1429:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1243;
									queueFrominterp_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1430:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1244;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1431:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1245;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1443:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1255;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1452:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1264;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1457:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1269;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1475:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1287;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1594:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1404;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1600_1624(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1601 :
						case 1602 :
						case 1603 :
						case 1604 :
						case 1605 :
						case 1606 :
						case 1607 :
						case 1608 :
						case 1609 :
						case 1610 :
						case 1611 :
						case 1612 :
						case 1613 :
						case 1614 :
						case 1615 :
						case 1616 :
						case 1617 :
						case 1618 :
						case 1619 :
						case 1620 :
						case 1622 :
						case 1623 :
							monitor.wait();
							break;
						case 1600:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1410;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
						case 1621:
							if (queueFrommasterTointerp_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1429;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTointerp_0_.take());
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				@Override
				public <Any, AnyInput> Optional<Any> exchange(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					synchronized (monitor){
						while (true){
							if (state >=0 && state <= 199){
								var result = exchange_0_199(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=200 && state <= 399){
								var result = exchange_200_399(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=400 && state <= 599){
								var result = exchange_400_599(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=600 && state <= 799){
								var result = exchange_600_799(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=800 && state <= 999){
								var result = exchange_800_999(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1000 && state <= 1199){
								var result = exchange_1000_1199(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1200 && state <= 1399){
								var result = exchange_1200_1399(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1400 && state <= 1599){
								var result = exchange_1400_1599(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1600 && state <= 1624){
								var result = exchange_1600_1624(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
						}
					}
					
				}
			};
			case "master": return new IEnvironment() {
				
				@Override
				public String getName(){
					return environmentName;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_0_199(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1 :
						case 2 :
						case 3 :
						case 4 :
						case 9 :
						case 39 :
						case 41 :
						case 44 :
						case 45 :
						case 79 :
						case 81 :
						case 83 :
						case 84 :
						case 89 :
						case 91 :
						case 95 :
						case 97 :
						case 99 :
						case 100 :
						case 110 :
						case 113 :
						case 144 :
						case 146 :
						case 148 :
						case 150 :
						case 185 :
						case 187 :
						case 189 :
						case 190 :
						case 195 :
						case 197 :
							monitor.wait();
							break;
						case 0:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(4);
									var receiverOptionsArray = new String[]{ "rprj_0_","interp_0_","psinv_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 7;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 5;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 6;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 8;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.MGThreads.InterpMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.MGThreads.ResidMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 4;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.MGThreads.PsinvMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 2;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.MGThreads.RprjMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 3;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 5:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(3);
									var receiverOptionsArray = new String[]{ "psinv_0_","resid_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 13;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 15;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 14;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 6:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(3);
									var receiverOptionsArray = new String[]{ "interp_0_","rprj_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 13;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1435;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1436;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 7:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(3);
									var receiverOptionsArray = new String[]{ "resid_0_","interp_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1589;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 14;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1435;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 8:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(3);
									var receiverOptionsArray = new String[]{ "rprj_0_","interp_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1589;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 15;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1436;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 10:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 11;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 11:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.MGThreads.RprjMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 3;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(4);
									var receiverOptionsArray = new String[]{ "interp_0_","resid_0_","psinv_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 5;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 8;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 6;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 7;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.MGThreads.PsinvMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 2;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.MGThreads.InterpMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.MGThreads.ResidMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 4;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 12:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(3);
									var receiverOptionsArray = new String[]{ "psinv_0_","rprj_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 17;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 18;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 19;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 13:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1248;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1247;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 14:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1247;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1399;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 15:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1399;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1248;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 16:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(3);
									var receiverOptionsArray = new String[]{ "psinv_0_","rprj_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 21;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 22;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 23;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 20;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 17:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1061;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1062;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 18:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1061;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1213;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 19:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1213;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1062;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 20:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(3);
									var receiverOptionsArray = new String[]{ "psinv_0_","rprj_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 24;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 25;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 26;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 21:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 784;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 785;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 782;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 22:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 784;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1007;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1005;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 23:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 785;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1007;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1051;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 24:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 29;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 28;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 25:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 28;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 752;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 26:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 752;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 29;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 27:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 31;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 32;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 28:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 721;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 29:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 721;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 30:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 34;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 35;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 33;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 31:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 690;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 32:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 690;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 33:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 37;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 36;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 34:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 644;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 642;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 35:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 644;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 681;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 36:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 39;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 37:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 39;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 38:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 41;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 40:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 43;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 42;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 42:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 44;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 43:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 624;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 46:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 47;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 47:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 50;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 52;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 54;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 48;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 48:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 61;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 57;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 59;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 49:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 316;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 314;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 56;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 312;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 50:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 424;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 428;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 426;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 51:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 508;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 425;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 506;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 504;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 52:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 558;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 556;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 560;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 53:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 559;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 590;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 588;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 592;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 54:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 611;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 607;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 609;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 55:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 620;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 618;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 622;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 612;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 56:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 67;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 63;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 65;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 57:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 176;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 178;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 58:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 175;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 226;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 224;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 59:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 260;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 262;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 60:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 286;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 284;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 261;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 61:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 301;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 299;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 62:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 302;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 308;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 310;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 63:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 70;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 72;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 64:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 117;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 69;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 119;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 65:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 137;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 139;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 66:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 138;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 155;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 153;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 67:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 166;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 164;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 68:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 167;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 173;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 171;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 69:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 74;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 76;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 70:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 95;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 71:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 103;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 94;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 72:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 110;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 73:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 115;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 111;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 74:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 79;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 75:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 86;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 78;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 76:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 89;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 77:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 90;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 92;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 78:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 81;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 80:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 84;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 82:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 83;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 85:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 83;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 86:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 81;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 87:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 88;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 85;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 88:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 83;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 90:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 91;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 92:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 84;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 93:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 85;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 88;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 94:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 97;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 96:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 100;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 98:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 99;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 101:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 99;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 102:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 86;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 78;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 103:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 97;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 104:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 106;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 101;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 105:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 81;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 106:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 99;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 107:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 83;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 108:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 88;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 85;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 109:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 89;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 111:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 113;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 112:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 91;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 114:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 90;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 92;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 115:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 100;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 116:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 101;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 106;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 117:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 74;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 122;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 118:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 102;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 121;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 129;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 119:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 132;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 109;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 120:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 133;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 135;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 114;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 121:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 78;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 124;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 122:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 89;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 123:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 127;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 92;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 124:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 81;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 125:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 126;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 85;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 126:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 83;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 127:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 91;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 128:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 126;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 85;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 129:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 124;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 105;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 130:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 108;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 131;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 128;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 131:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 107;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 126;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 132:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 89;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 133:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 112;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 134;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 134:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 91;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 135:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 127;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 92;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 136:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 108;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 131;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 128;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 137:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 95;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 138:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 142;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 141;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 139:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 148;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 140:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 149;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 151;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 141:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 97;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 142:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 144;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 143:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 147;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 145;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 145:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 146;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 147:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 99;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 149:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 150;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 151:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 100;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 152:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 145;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 147;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 153:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 94;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 103;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 154:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 121;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 102;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 129;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 155:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 157;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 142;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 156:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 152;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 159;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 162;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 157:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 97;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 158:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 124;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 105;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 159:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 145;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 160;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 160:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 99;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 161:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 126;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 107;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 162:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 106;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 101;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 163:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 131;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 108;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 128;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 164:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 110;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 165:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 109;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 132;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 166:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 148;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 167:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 170;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 168;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 168:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 113;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 169:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 134;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 112;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 170:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 150;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 171:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 111;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 115;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 172:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 133;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 135;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 114;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 173:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 151;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 149;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 174:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 162;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 159;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 152;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 175:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 180;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 182;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 176:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 201;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 177:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 200;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 209;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 178:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 216;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 179:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 221;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 217;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 180:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 185;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 181:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 184;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 192;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 182:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 195;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 183:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 198;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 196;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 184:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 187;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 186:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 190;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 188:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 189;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 191:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 189;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 192:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 187;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 193:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 194;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 191;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 194:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 189;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 196:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 197;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 198:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 190;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 199:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 194;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 191;
								return Optional.empty();
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_200_399(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 201 :
						case 203 :
						case 205 :
						case 206 :
						case 216 :
						case 219 :
						case 269 :
						case 272 :
						case 276 :
						case 279 :
							monitor.wait();
							break;
						case 200:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 203;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 202:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 206;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 204:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 205;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 207:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 205;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 208:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 184;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 192;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 209:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 203;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 210:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 207;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 212;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 211:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 187;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 212:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 205;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 213:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 189;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 214:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 194;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 191;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 215:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 195;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 217:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 219;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 218:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 197;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 220:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 196;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 198;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 221:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 206;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 222:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 212;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 207;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 223:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 119;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 117;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 69;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 224:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 230;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 180;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 225:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 208;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 229;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 245;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 226:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 215;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 252;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 227:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 220;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 253;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 257;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 228:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 122;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 74;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 229:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 233;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 184;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 230:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 195;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 231:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 198;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 240;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 232:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 78;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 124;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 233:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 187;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 234:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 191;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 236;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 235:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 81;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 236:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 189;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 237:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 83;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 238:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 85;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 126;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 239:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 89;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 240:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 197;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 241:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 91;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 242:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 127;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 92;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 243:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 191;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 236;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 244:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 102;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 121;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 129;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 245:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 211;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 233;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 246:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 243;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 214;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 248;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 247:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 124;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 105;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 248:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 236;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 213;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 249:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 107;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 126;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 250:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 131;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 108;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 128;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 251:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 109;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 132;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 252:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 195;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 253:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 255;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 218;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 254:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 112;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 134;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 255:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 197;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 256:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 135;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 133;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 114;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 257:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 198;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 240;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 258:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 214;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 243;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 248;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 259:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 137;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 139;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 260:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 201;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 261:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 266;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 265;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 262:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 276;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 263:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 277;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 281;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 264:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 141;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 142;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 265:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 203;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 266:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 269;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 267:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 274;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 270;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 268:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 144;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 270:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 272;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 271:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 146;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 273:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 145;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 147;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 274:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 205;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 275:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 148;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 277:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 279;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 278:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 150;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 280:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 149;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 151;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 281:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 206;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 282:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 274;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 270;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 283:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 138;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 153;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 155;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 284:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 200;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 209;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 285:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 245;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 208;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 229;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 286:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 266;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 289;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 287:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 282;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 291;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 296;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 288:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 142;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 157;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 289:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 203;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 290:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 211;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 233;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 291:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 293;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 270;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 292:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 160;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 145;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 293:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 205;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 294:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 236;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 213;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 295:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 162;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 159;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 152;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 296:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 212;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 207;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 297:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 214;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 248;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 243;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 298:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 164;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 166;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 299:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 216;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 300:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 215;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 252;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 301:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 276;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 302:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 304;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 306;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 303:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 168;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 170;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 304:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 219;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 305:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 218;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 255;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 306:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 279;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 307:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 171;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 173;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 167;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 308:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 217;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 221;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 309:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 220;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 253;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 257;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 310:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 277;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 281;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 311:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 296;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 282;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 291;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 312:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 319;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 321;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 63;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 313:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 223;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 318;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 368;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 366;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 314:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 388;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 386;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 259;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 315:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 283;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 404;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 402;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 387;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 316:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 415;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 298;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 413;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 317:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 307;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 422;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 420;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 416;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 318:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 69;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 323;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 325;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 319:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 344;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 137;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 320:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 343;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 352;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 153;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 321:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 359;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 164;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 322:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 171;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 364;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 360;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 323:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 74;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 328;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 324:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 102;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 327;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 335;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 325:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 109;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 338;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 326:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 339;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 114;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 341;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 327:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 330;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 78;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 328:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 89;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 329:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 333;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 92;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 330:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 81;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 331:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 85;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 332;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 332:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 83;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 333:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 91;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 334:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 332;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 85;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 335:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 330;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 105;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 336:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 334;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 337;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 108;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 337:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 332;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 107;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 338:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 89;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 339:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 340;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 112;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 340:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 91;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 341:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 333;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 92;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 342:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 337;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 334;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 108;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 343:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 141;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 346;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 344:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 148;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 345:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 349;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 151;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 346:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 144;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 347:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 348;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 147;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 348:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 146;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 349:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 150;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 350:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 147;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 348;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 351:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 102;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 335;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 327;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 352:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 346;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 157;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 353:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 162;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 355;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 350;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 354:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 105;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 330;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 355:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 348;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 160;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 356:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 107;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 332;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 357:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 334;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 108;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 337;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 358:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 109;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 338;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 359:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 148;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 360:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 168;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 362;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 361:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 112;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 340;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 362:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 150;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 363:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 114;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 341;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 339;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 364:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 349;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 151;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 365:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 162;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 355;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 350;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 366:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 371;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 323;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 228;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 367:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 351;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 244;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 370;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 378;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 368:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 251;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 381;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 358;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 369:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 363;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 384;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 382;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 256;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 370:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 232;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 373;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 327;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 371:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 239;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 338;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 372:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 242;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 376;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 341;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 373:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 235;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 330;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 374:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 375;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 238;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 334;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 375:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 332;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 237;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 376:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 340;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 241;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 377:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 334;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 238;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 375;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 378:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 373;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 247;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 354;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 379:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 250;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 357;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 377;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 380;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 380:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 249;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 375;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 356;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 381:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 239;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 338;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 382:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 254;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 361;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 383;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 383:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 340;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 241;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 384:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 242;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 376;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 341;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 385:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 250;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 377;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 357;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 380;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 386:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 137;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 344;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 387:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 390;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 391;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 264;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 388:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 275;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 397;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 389:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 398;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 400;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 280;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 390:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 141;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 346;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 391:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 268;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 393;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 392:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 394;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 273;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 396;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 393:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 144;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 394:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 395;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 271;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 395:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 146;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 396:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 348;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 147;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 397:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 148;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 398:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 278;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 399;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 399:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 150;
								return Optional.empty();
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_400_599(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 442 :
						case 444 :
						case 446 :
						case 448 :
						case 473 :
						case 475 :
						case 477 :
						case 479 :
							monitor.wait();
							break;
						case 400:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 151;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 349;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 401:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 396;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 394;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 273;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 402:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 352;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 343;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 153;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 403:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 378;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 370;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 244;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 351;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 404:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 391;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 406;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 288;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 405:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 408;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 411;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 401;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 295;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 406:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 346;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 157;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 407:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 373;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 247;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 354;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 408:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 394;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 409;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 292;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 409:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 348;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 160;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 410:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 375;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 249;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 356;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 411:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 355;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 350;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 162;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 412:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 377;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 250;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 357;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 380;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 413:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 359;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 164;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 414:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 358;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 381;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 251;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 415:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 275;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 397;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 416:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 303;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 417;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 419;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 417:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 168;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 362;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 418:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 361;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 383;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 254;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 419:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 278;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 399;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 420:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 364;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 171;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 360;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 421:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 256;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 363;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 382;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 384;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 422:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 398;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 280;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 400;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 423:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 295;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 408;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 411;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 401;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 424:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 178;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 176;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 425:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 431;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 430;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 433;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 426:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 466;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 468;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 427:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 482;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 484;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 467;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 428:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 495;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 493;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 429:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 502;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 496;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 500;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 430:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 180;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 182;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 431:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 437;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 435;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 432:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 436;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 452;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 451;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 433:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 459;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 458;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 434:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 463;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 460;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 464;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 435:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 185;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 436:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 439;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 440;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 437:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 446;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 438:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 447;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 449;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 439:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 187;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 440:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 442;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 441:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 445;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 443;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 443:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 444;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 445:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 189;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 447:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 448;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 449:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 190;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 450:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 443;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 445;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 451:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 184;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 192;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 452:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 440;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 454;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 453:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 450;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 457;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 455;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 454:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 187;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 455:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 443;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 456;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 456:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 189;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 457:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 191;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 194;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 458:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 195;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 459:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 446;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 460:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 461;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 462;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 461:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 197;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 462:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 448;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 463:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 198;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 196;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 464:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 449;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 447;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 465:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 455;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 450;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 457;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 466:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 201;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 467:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 470;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 471;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 468:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 477;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 469:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 480;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 478;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 470:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 203;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 471:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 473;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 472:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 474;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 476;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 474:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 475;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 476:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 205;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 478:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 479;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 480:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 206;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 481:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 476;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 474;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 482:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 200;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 209;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 483:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 436;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 451;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 452;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 484:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 486;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 471;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 485:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 481;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 488;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 491;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 486:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 203;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 487:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 454;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 440;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 488:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 474;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 489;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 489:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 205;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 490:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 443;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 456;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 491:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 212;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 207;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 492:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 450;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 455;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 457;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 493:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 216;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 494:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 458;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 459;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 495:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 477;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 496:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 499;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 497;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 497:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 219;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 498:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 461;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 462;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 499:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 479;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 500:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 217;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 221;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 501:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 460;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 463;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 464;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 502:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 480;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 478;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 503:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 491;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 481;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 488;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 504:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 226;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 224;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 175;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 505:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 366;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 318;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 368;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 223;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 506:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 510;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 513;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 431;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 507:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 534;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 483;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 512;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 536;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 508:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 545;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 494;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 547;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 509:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 552;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 501;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 548;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 554;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 510:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 180;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 230;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 511:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 323;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 228;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 371;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 512:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 436;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 517;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 515;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 513:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 526;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 459;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 514:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 531;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 464;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 528;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 515:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 233;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 184;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 516:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 327;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 232;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 373;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 517:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 440;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 519;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 518:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 521;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 450;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 524;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 519:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 187;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 520:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 235;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 330;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 521:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 522;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 443;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 522:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 189;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 523:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 332;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 237;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 524:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 236;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 191;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 525:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 334;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 238;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 375;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 526:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 195;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 527:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 239;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 338;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 528:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 529;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 462;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 529:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 197;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 530:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 340;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 241;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 531:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 240;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 198;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 532:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 376;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 341;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 242;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 533:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 524;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 521;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 450;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 534:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 245;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 208;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 229;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 535:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 351;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 244;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 370;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 378;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 536:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 487;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 538;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 517;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 537:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 492;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 543;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 540;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 533;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 538:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 211;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 233;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 539:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 354;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 247;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 373;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 540:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 541;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 490;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 521;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 541:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 213;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 236;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 542:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 356;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 249;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 375;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 543:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 243;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 214;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 248;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 544:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 377;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 357;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 250;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 380;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 545:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 252;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 215;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 546:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 381;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 251;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 358;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 547:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 459;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 526;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 548:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 549;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 498;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 551;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 549:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 255;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 218;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 550:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 361;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 254;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 383;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 551:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 462;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 529;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 552:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 220;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 257;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 253;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 553:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 384;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 363;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 382;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 256;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 554:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 464;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 528;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 531;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 555:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 492;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 543;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 533;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 540;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 556:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 260;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 262;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 557:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 386;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 259;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 388;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 558:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 466;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 468;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 559:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 564;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 565;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 562;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 560:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 579;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 577;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 561:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 580;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 584;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 586;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 562:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 265;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 266;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 563:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 390;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 264;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 391;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 564:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 471;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 470;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 565:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 569;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 567;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 566:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 576;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 570;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 574;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 567:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 269;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 568:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 393;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 268;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 569:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 473;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 570:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 573;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 571;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 571:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 272;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 572:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 271;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 395;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 573:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 475;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 574:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 270;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 274;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 575:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 396;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 394;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 273;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 576:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 474;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 476;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 577:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 276;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 578:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 275;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 397;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 579:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 477;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 580:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 583;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 581;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 581:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 279;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 582:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 278;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 399;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 583:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 479;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 584:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 277;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 281;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 585:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 400;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 280;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 398;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 586:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 478;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 480;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 587:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 570;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 574;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 576;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 588:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 286;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 284;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 261;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 589:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 402;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 283;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 404;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 387;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 590:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 467;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 482;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 484;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 591:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 483;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 534;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 512;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 536;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 592:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 596;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 565;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 594;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 593:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 603;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 598;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 587;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 605;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 594:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 266;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 289;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 595:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 406;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 391;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 288;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 596:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 486;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 471;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 597:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 487;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 517;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 538;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 598:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 599;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 601;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 570;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 599:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 293;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 270;
								return Optional.empty();
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_600_799(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 624 :
						case 626 :
						case 630 :
						case 632 :
						case 634 :
						case 636 :
						case 637 :
						case 641 :
						case 665 :
						case 667 :
						case 671 :
						case 673 :
						case 675 :
						case 679 :
						case 690 :
						case 692 :
						case 696 :
						case 697 :
						case 699 :
						case 701 :
						case 703 :
						case 707 :
						case 709 :
						case 711 :
						case 713 :
						case 714 :
						case 719 :
						case 721 :
						case 723 :
						case 727 :
						case 728 :
						case 730 :
						case 731 :
						case 732 :
						case 734 :
						case 738 :
						case 740 :
						case 742 :
						case 744 :
						case 745 :
						case 750 :
						case 762 :
							monitor.wait();
							break;
						case 600:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 409;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 292;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 394;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 601:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 489;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 474;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 602:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 541;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 521;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 490;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 603:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 291;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 296;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 282;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 604:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 401;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 295;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 411;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 408;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 605:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 481;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 491;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 488;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 606:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 533;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 540;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 543;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 492;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 607:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 301;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 299;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 608:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 415;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 413;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 298;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 609:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 493;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 495;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 610:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 545;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 494;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 547;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 611:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 579;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 577;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 612:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 617;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 613;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 615;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 613:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 306;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 304;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 614:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 419;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 417;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 303;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 615:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 497;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 499;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 616:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 498;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 549;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 551;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 617:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 583;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 581;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 618:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 310;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 308;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 302;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 619:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 420;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 422;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 416;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 307;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 620:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 500;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 502;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 496;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 621:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 552;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 548;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 554;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 501;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 622:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 584;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 586;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 580;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 623:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 587;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 598;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 603;
								return Optional.empty();
							}
							if (isCloseAction) {
								monitor.notifyAll();
								state = 605;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 625:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 626;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 627:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 628;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 629;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 628:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 47;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 629:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 47;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 631:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 632;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 633:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 47;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 635:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 636;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 638:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 634;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 639:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 635;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 640;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 640:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 641;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 642:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 39;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 643:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 647;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 645;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 644:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 673;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 645:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 41;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 646:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 650;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 649;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 648;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 647:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 665;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 648:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 43;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 42;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 649:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 651;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 42;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 650:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 655;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 656;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 651:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 624;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 652:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 626;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 653:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 628;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 654;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 654:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 47;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 655:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 624;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 656:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 624;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 657:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 658;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 659;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 658:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 626;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 659:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 626;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 660:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 662;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 661;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 663;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 661:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 629;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 628;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 662:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 654;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 628;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 663:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 654;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 664;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 664:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 47;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 666:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 667;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 668:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 669;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 670;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 669:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 632;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 670:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 671;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 672:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 654;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 664;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 674:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 675;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 676:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 678;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 677;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 677:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 636;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 678:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 679;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 680:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 671;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 681:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 39;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 682:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 674;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 683;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 683:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 634;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 684:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 676;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 685;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 686;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 685:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 635;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 640;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 686:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 688;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 687;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 687:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 641;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 688:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 679;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 689:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 692;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 691:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 694;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 693;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 693:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 696;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 694:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 701;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 695:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 651;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 42;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 698:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 699;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 700:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 47;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 702:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 703;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 704:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 706;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 705;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 705:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 699;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 706:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 699;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 708:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 709;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 710:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 699;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 712:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 713;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 715:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 711;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 716:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 712;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 717;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 717:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 719;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 718:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 688;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 687;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 720:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 723;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 722:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 725;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 724;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 724:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 727;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 725:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 732;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 726:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 696;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 729:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 730;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 733:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 734;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 735:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 736;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 737;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 736:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 730;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 737:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 730;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 739:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 740;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 741:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 730;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 743:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 744;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 746:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 742;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 747:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 743;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 748;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 748:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 750;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 749:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 719;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 751:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 720;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 754;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 752:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 721;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 753:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 722;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 756;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 755;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 754:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 723;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 755:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 757;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 758;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 756:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 725;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 763;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 757:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 727;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 758:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 727;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 759:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 728;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 760:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 729;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 761;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 761:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 762;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 763:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 727;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 764:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 733;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 765;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 765:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 728;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 766:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 735;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 768;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 767;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 767:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 729;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 761;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 768:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 741;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 761;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 769:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 738;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 770:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 739;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 771;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 771:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 745;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 772:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 741;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 761;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 773:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 742;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 774:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 743;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 775;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 775:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 750;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 776:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 745;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 777:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 746;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 773;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 778:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 774;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 747;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 779;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 779:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 781;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 780;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 780:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 750;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 781:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 750;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 782:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 28;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 29;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 783:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 788;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 789;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 786;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 784:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 952;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 950;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 785:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 952;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 996;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 786:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 32;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 31;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 787:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 793;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 792;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 791;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 790;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 788:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 897;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 895;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 789:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 897;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 941;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 790:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 34;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 35;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 33;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 791:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 795;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 794;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 33;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 792:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 827;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 824;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 825;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 793:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 827;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 883;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 884;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 794:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 797;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 642;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 795:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 797;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 681;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 796:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 799;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 645;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 797:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 673;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 798:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 801;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 800;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 648;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 799:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 665;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_800_999(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 907 :
						case 909 :
						case 913 :
						case 925 :
						case 927 :
						case 931 :
						case 933 :
						case 935 :
						case 939 :
						case 962 :
						case 964 :
						case 968 :
						case 980 :
						case 982 :
						case 986 :
						case 988 :
						case 990 :
						case 994 :
							monitor.wait();
							break;
						case 800:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 802;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 42;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 801:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 806;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 655;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 802:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 624;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 803:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 626;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 804:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 628;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 805;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 805:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 47;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 806:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 624;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 807:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 808;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 658;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 808:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 626;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 809:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 661;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 810;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 811;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 810:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 805;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 628;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 811:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 664;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 805;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 812:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 667;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 813:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 814;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 669;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 814:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 671;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 815:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 664;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 805;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 816:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 675;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 817:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 677;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 818;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 818:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 679;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 819:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 671;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 820:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 816;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 683;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 821:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 817;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 822;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 685;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 822:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 823;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 687;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 823:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 679;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 824:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 644;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 642;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 825:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 797;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 642;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 826:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 831;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 829;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 828;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 827:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 871;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 872;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 828:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 647;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 645;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 829:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 799;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 645;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 830:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 835;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 834;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 832;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 833;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 831:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 859;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 860;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 832:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 650;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 648;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 649;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 833:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 801;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 800;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 648;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 834:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 837;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 836;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 800;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 835:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 847;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 845;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 846;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 836:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 651;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 42;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 837:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 838;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 806;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 838:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 624;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 839:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 808;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 840;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 840:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 626;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 841:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 843;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 842;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 810;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 842:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 628;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 654;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 843:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 805;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 844;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 844:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 47;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 845:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 656;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 655;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 846:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 655;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 806;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 847:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 838;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 806;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 848:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 849;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 850;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 851;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 849:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 658;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 659;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 850:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 808;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 658;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 851:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 840;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 808;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 852:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 854;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 853;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 856;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 855;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 853:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 662;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 663;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 661;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 854:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 661;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 810;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 811;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 855:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 810;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 843;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 842;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 856:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 858;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 843;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 857;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 857:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 664;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 654;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 858:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 805;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 664;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 859:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 665;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 860:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 665;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 861:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 862;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 863;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 862:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 667;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 863:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 667;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 864:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 866;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 865;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 867;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 865:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 669;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 670;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 866:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 814;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 669;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 867:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 869;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 868;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 868:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 671;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 869:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 671;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 870:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 857;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 858;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 843;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 871:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 673;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 872:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 673;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 873:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 874;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 875;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 874:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 675;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 875:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 675;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 876:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 878;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 879;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 877;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 877:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 677;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 678;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 878:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 677;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 818;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 879:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 880;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 881;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 880:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 679;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 881:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 679;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 882:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 869;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 868;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 883:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 644;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 681;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 884:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 797;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 681;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 885:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 873;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 887;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 886;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 886:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 674;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 683;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 887:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 816;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 683;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 888:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 876;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 890;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 889;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 891;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 889:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 676;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 686;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 685;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 890:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 817;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 822;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 685;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 891:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 894;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 893;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 892;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 892:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 688;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 687;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 893:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 823;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 687;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 894:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 881;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 880;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 895:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 690;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 896:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 900;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 898;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 897:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 933;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 898:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 692;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 899:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 903;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 902;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 901;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 900:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 925;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 901:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 694;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 693;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 902:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 906;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 904;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 903:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 916;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 915;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 904:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 696;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 905:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 837;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 800;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 836;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 906:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 907;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 908:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 909;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 910:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 912;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 911;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 911:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 699;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 912:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 913;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 914:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 805;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 844;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 915:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 701;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 916:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 907;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 917:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 918;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 919;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 918:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 703;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 919:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 909;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 920:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 923;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 922;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 921;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 921:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 706;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 705;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 922:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 912;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 911;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 923:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 924;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 912;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 924:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 699;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 926:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 927;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 928:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 930;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 929;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 929:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 709;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 930:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 931;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 932:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 912;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 924;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 934:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 935;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 936:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 938;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 937;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 937:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 713;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 938:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 939;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 940:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 931;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 941:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 690;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 942:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 934;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 943;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 943:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 711;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 944:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 936;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 945;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 946;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 945:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 712;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 717;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 946:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 949;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 947;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 947:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 719;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 948:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 894;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 893;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 892;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 949:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 939;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 950:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 721;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 951:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 955;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 953;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 952:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 988;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 953:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 723;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 954:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 958;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 956;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 957;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 955:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 980;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 956:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 725;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 724;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 957:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 961;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 959;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 958:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 971;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 970;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 959:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 727;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 960:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 906;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 904;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 961:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 962;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 963:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 964;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 965:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 966;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 967;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 966:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 730;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 967:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 968;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 969:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 913;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 970:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 732;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 971:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 962;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 972:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 973;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 974;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 973:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 734;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 974:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 964;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 975:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 976;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 977;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 978;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 976:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 736;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 737;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 977:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 966;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 967;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 978:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 967;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 979;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 979:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 730;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 981:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 982;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 983:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 985;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 984;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 984:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 740;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 985:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 986;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 987:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 967;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 979;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 989:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 990;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 991:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 992;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 993;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 992:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 744;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 993:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 994;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 995:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 986;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 996:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 721;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 997:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 989;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 998;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 998:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 742;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 999:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 991;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1000;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1001;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1000_1199(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1073 :
						case 1075 :
						case 1079 :
						case 1080 :
						case 1082 :
						case 1084 :
						case 1086 :
						case 1090 :
						case 1092 :
						case 1094 :
						case 1096 :
						case 1097 :
						case 1102 :
						case 1126 :
						case 1128 :
						case 1132 :
						case 1134 :
						case 1136 :
						case 1140 :
						case 1151 :
						case 1153 :
						case 1157 :
						case 1158 :
						case 1160 :
						case 1162 :
						case 1164 :
						case 1168 :
						case 1170 :
						case 1172 :
						case 1174 :
						case 1175 :
						case 1180 :
						case 1182 :
						case 1184 :
						case 1188 :
						case 1189 :
						case 1191 :
						case 1192 :
						case 1193 :
						case 1195 :
						case 1199 :
							monitor.wait();
							break;
						case 1000:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 743;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 748;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1001:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1004;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1002;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1002:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 750;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1003:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 949;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 947;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1004:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 994;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1005:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 28;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 752;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1006:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 951;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1010;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1008;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1007:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 952;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1043;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1008:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 754;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 720;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1009:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1013;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 954;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1012;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1011;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1010:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 955;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1035;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1011:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 722;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 756;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 755;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1012:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1016;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1015;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1014;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1013:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 958;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1026;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1025;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1014:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 758;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 757;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1015:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 961;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 959;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1016:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 961;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1017;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1017:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 727;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1018:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 963;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1019;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1019:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 728;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1020:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 965;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1022;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1021;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1021:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 729;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 761;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1022:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1024;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1023;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1023:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 762;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1024:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 968;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1025:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 725;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 763;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1026:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 961;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1017;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1027:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 972;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1028;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1029;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1028:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 733;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 765;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1029:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 963;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1019;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1030:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 975;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1031;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1032;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1033;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1031:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 735;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 768;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 767;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1032:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 965;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1022;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1021;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1033:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 987;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1022;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1034;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1034:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 741;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 761;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1035:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 723;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1036:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 981;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1037;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1037:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 738;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1038:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 983;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1040;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1039;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1039:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 739;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 771;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1040:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 995;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1041;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1041:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 745;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1042:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 987;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1034;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1022;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1043:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 721;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1044:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 989;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1045;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1045:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 742;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1046:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 991;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1048;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1047;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1047:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 743;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 775;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1048:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1004;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1049;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1049:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 750;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1050:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 995;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1041;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1051:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 752;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 29;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1052:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1044;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 997;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1053;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1053:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 773;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 746;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1054:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 999;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1046;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1056;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1055;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1055:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 774;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 747;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 779;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1056:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1058;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1059;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1057;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1057:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 780;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 781;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1058:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1004;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1002;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1059:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1004;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1049;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1060:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1065;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1064;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1061:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1182;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1062:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1182;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1063:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1068;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1067;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1066;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1064:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1151;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1065:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1151;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1066:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1070;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1071;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1067:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1105;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1103;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1068:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1105;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1142;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1069:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 795;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 794;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 33;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1070:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1073;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1071:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1073;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1072:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1075;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1074:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1077;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1076;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1076:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1079;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1077:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1084;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1078:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 802;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 42;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1081:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1082;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1083:
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 47;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1085:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1086;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1087:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1089;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1088;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1088:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1082;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1089:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1082;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1091:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1092;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1093:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1082;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1095:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1096;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1098:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1094;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1099:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1095;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1100;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1100:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1102;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1101:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 823;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 687;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1103:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1073;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1104:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1108;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1106;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1105:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1134;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1106:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1075;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1107:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1111;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1109;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1110;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1108:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1126;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1109:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1077;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1076;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1110:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1112;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1076;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1111:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1117;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1116;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1112:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1084;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1113:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1086;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1114:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1115;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1088;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1115:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1082;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1116:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1084;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1117:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1084;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1118:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1120;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1119;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1119:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1086;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1120:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1086;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1121:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1122;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1123;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1124;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1122:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1089;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1088;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1123:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1088;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1115;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1124:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1125;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1115;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1125:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1082;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1127:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1128;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1129:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1130;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1131;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1130:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1092;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1131:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1132;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1133:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1125;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1115;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1135:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1136;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1137:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1139;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1138;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1138:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1096;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1139:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1140;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1141:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1132;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1142:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1073;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1143:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1135;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1144;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1144:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1094;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1145:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1137;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1147;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1146;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1146:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1095;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1100;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1147:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1149;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1148;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1148:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1102;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1149:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1140;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1150:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1153;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1152:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1155;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1154;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1154:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1157;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1155:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1162;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1156:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1112;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1076;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1159:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1160;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1161:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1082;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1163:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1164;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1165:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1166;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1167;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1166:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1160;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1167:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1160;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1169:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1170;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1171:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1160;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1173:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1174;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1176:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1172;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1177:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1173;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1178;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1178:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1180;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1179:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1149;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1148;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1181:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1184;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1183:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1186;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1185;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1185:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1188;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1186:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1193;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1187:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1157;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1190:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1191;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1194:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1195;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1196:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1197;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1198;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1197:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1191;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1198:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1191;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1200_1399(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1201 :
						case 1203 :
						case 1205 :
						case 1206 :
						case 1211 :
						case 1225 :
						case 1259 :
						case 1261 :
						case 1265 :
						case 1266 :
						case 1268 :
						case 1269 :
						case 1270 :
						case 1272 :
						case 1276 :
						case 1278 :
						case 1280 :
						case 1282 :
						case 1283 :
						case 1288 :
						case 1312 :
						case 1314 :
						case 1318 :
						case 1320 :
						case 1322 :
						case 1326 :
						case 1337 :
						case 1339 :
						case 1343 :
						case 1344 :
						case 1346 :
						case 1348 :
						case 1350 :
						case 1354 :
						case 1356 :
						case 1358 :
						case 1360 :
						case 1361 :
						case 1366 :
						case 1368 :
						case 1370 :
						case 1374 :
						case 1375 :
						case 1377 :
						case 1378 :
						case 1379 :
						case 1381 :
						case 1385 :
						case 1387 :
						case 1389 :
						case 1391 :
						case 1392 :
						case 1397 :
							monitor.wait();
							break;
						case 1200:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1201;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1202:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1191;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1204:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1205;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1207:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1203;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1208:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1204;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1209;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1209:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1211;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1210:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1180;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1212:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1215;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1181;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1213:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1182;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1214:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1217;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1183;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1216;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1215:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1184;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1216:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1220;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1219;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1217:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1186;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1226;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1218:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1015;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1016;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1014;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1219:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1188;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1220:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1188;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1221:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1189;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1222:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1190;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1223;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1223:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1225;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1224:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1024;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1023;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1226:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1188;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1227:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1194;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1228;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1228:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1189;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1229:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1196;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1230;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1231;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1230:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1190;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1223;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1231:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1202;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1223;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1232:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1199;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1233:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1200;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1234;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1234:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1206;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1235:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1202;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1223;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1236:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1203;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1237:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1204;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1238;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1238:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1211;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1239:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1206;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1240:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1207;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1236;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1241:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1208;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1237;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1242;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1242:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1245;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1244;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1243:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1059;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1058;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrominterp_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1057;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrominterp_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1244:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1211;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1245:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1211;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1246:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1251;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1250;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1247:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1368;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1248:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1368;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1249:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1253;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1254;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1252;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1250:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1337;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1251:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1337;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1252:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1257;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1256;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1253:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1291;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1289;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1254:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1291;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1328;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1255:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1070;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1071;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1256:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1259;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1257:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1259;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1258:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1261;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1260:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1263;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1262;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1262:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1265;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1263:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1270;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1264:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1079;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1267:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1268;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1271:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1272;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1273:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1275;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1274;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1274:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1268;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1275:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1268;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1277:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1278;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1279:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1268;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1281:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1282;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1284:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1280;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1285:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1281;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1286;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1286:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1288;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1287:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1102;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1289:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1259;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1290:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1294;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1292;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1291:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1320;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1292:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1261;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1293:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1297;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1295;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1296;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1294:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1312;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1295:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1263;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1262;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1296:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1298;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1262;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1297:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1302;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1303;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1298:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1270;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1299:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1272;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1300:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1274;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1301;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1301:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1268;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1302:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1270;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1303:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1270;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1304:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1305;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1306;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1305:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1272;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1306:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1272;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1307:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1310;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1309;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1308;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1308:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1275;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1274;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1309:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1274;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1301;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1310:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1311;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1301;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1311:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1268;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1313:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1314;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1315:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1317;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1316;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1316:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1278;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1317:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1318;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1319:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1301;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1311;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1321:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1322;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1323:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1325;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1324;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1324:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1282;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1325:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1326;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1327:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1318;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1328:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1259;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1329:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1321;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1330;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1330:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1280;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1331:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1323;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1332;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1333;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1332:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1281;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1286;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1333:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1335;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1334;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1334:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1288;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1335:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1326;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1336:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1339;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1338:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1341;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1340;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1340:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1343;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1341:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1348;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1342:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1298;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1262;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1345:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1346;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1347:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1268;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1349:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1350;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1351:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1352;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1353;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1352:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1346;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1353:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1346;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1355:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1356;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1357:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1346;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1359:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1360;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1362:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1358;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1363:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1359;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1364;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1364:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1366;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1365:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1335;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1334;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1367:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1370;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1369:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1372;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1371;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1371:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1374;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1372:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1379;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1373:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1343;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1376:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1377;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1380:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1381;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1382:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1383;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1384;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1383:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1377;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1384:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1377;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1386:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1387;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1388:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1377;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1390:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1391;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1393:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1389;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1394:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1390;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1395;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1395:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1397;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1396:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1366;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1398:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1401;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1367;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1399:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1368;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1400_1599(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1411 :
						case 1432 :
						case 1457 :
						case 1586 :
							monitor.wait();
							break;
						case 1400:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1403;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1369;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1402;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1401:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1370;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1402:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1406;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1405;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1403:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1372;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1412;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1404:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1220;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1219;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1405:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1374;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1406:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1374;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1407:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1375;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1408:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1376;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1409;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1409:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1411;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1410:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1225;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1412:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1374;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1413:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1380;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1414;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1414:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1375;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1415:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1382;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1416;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1417;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1416:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1376;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1409;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1417:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1388;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1409;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1418:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1385;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1419:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1386;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1420;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1420:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1392;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1421:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1388;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1409;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1422:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1389;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1423:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1390;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1424;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1424:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1397;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1425:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1392;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1426:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1422;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1393;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1427:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1423;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1394;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1428;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1428:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1430;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1431;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1429:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1244;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1245;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1430:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1397;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1431:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1397;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1433:
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 11;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1434:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(3);
									var receiverOptionsArray = new String[]{ "rprj_0_","resid_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1438;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1439;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1246;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1435:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1556;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1247;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1436:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1556;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1248;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1437:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(3);
									var receiverOptionsArray = new String[]{ "interp_0_","rprj_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1249;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1441;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1442;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1440;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1438:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1525;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1250;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1439:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1251;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1525;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1440:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(3);
									var receiverOptionsArray = new String[]{ "interp_0_","rprj_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1443;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1444;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1445;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1441:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1479;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1253;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1477;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1442:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1254;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1479;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1516;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1443:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1256;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1257;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1444:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1256;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1447;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1445:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1447;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1257;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1446:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1258;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1449;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1447:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1259;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1448:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1451;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1260;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1450;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1449:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1261;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1450:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1453;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1452;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1451:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1263;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1458;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1452:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "resid_0_";
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1265;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1453:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1265;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1454:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1266;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1455:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1267;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1456;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1456:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1457;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1458:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1265;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1459:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1271;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1460;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1460:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1266;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1461:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1273;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1463;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1462;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1462:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1267;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1456;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1463:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1279;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1456;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1464:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1276;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1465:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1277;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1466;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1466:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1283;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1467:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1279;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1456;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1468:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1280;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1469:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1281;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1470;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1470:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1288;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1471:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1283;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1472:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1284;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1468;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1473:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1285;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1469;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1474;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1474:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1475;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1476;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1475:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "rprj_0_";
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1288;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1476:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1288;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1477:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1256;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1447;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1478:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1482;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1290;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1480;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1479:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1291;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1508;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1480:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1258;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1449;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1481:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1485;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1293;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1484;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1483;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1482:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1294;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1500;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1483:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1451;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1260;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1450;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1484:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1342;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1486;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1450;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1485:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1297;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1490;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1491;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1486:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1298;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1458;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1487:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1299;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1460;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1488:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1300;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1489;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1462;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1489:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1347;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1456;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1490:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1263;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1458;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1491:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1298;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1458;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1492:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1304;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1494;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1493;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1493:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1271;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1460;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1494:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1299;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1460;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1495:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1307;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1496;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1498;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1497;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1496:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1273;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1462;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1463;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1497:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1300;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1489;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1462;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1498:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1319;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1499;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1489;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1499:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1279;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1456;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1500:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1261;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1501:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1313;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1502;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1502:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1276;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1503:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1315;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1504;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1505;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1504:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1277;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1466;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1505:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1327;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1506;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1506:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1283;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1507:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1319;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1489;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1499;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1508:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1259;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1509:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1321;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1510;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1510:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1280;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1511:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1323;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1513;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1512;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1512:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1281;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1470;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1513:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1335;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1514;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1514:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1288;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1515:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1327;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1506;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1516:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1257;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1447;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1517:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1329;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1509;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1518;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1518:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1284;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1468;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1519:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1511;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1331;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1521;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1520;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1520:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1469;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1285;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1474;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1521:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1365;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1523;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1522;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1522:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1475;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1476;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1523:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1335;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1514;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1524:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1336;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1527;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1525:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1337;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1526:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1529;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1338;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1528;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1527:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1339;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1528:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1373;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1531;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1529:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1341;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1536;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1530:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1342;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1486;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1450;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1531:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1343;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1532:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1344;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1533:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1345;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1534;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1534:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1378;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1535:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1347;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1456;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1536:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1343;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1537:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1349;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1538;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1538:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1344;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1539:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1351;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1541;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1540;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1540:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1345;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1534;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1541:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1357;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1534;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1542:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1354;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1543:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1355;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1544;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1544:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1361;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1545:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1357;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1534;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1546:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1358;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1547:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1359;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1548;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1548:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1366;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1549:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1361;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1550:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1546;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1362;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1551:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1547;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1363;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1552;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1552:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1554;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1396;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1553:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1365;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1523;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFrompsinv_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1522;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrompsinv_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1554:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1366;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1555:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1558;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1367;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1556:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1368;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1557:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1369;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1560;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1559;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1558:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1370;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1559:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1405;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1562;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1560:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1372;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1567;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1561:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1531;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1373;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1562:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1374;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1563:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1375;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1564:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1376;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1565;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1565:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1411;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1566:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1378;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1567:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1374;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1568:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1380;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1569;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1569:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1375;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1570:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1382;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1572;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1571;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1571:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1376;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1565;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1572:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1388;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1565;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1573:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1385;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1574:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1386;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1575;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1575:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1392;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1576:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1388;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1565;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1577:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1389;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1578:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1390;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1579;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1579:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1397;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1580:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1392;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1581:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1393;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1577;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1582:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1578;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1394;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1583;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1583:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1585;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1430;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1584:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1554;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1396;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1585:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1397;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1587:
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 11;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1588:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(3);
									var receiverOptionsArray = new String[]{ "psinv_0_","resid_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1555;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1591;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1398;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1589:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1399;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1556;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1590:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(3);
									var receiverOptionsArray = new String[]{ "resid_0_","interp_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1593;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1400;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1557;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1592;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1591:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1558;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1401;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1592:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(3);
									var receiverOptionsArray = new String[]{ "interp_0_","psinv_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1594;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1595;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1596;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1593:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1560;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1403;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1602;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1594:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","resid_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1405;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1406;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1595:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "resid_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("resid_0_")) {
									monitor.notifyAll();
									state = 1562;
									queueFrommasterToresid_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1405;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1596:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1406;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1562;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1597:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1563;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1407;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1598:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1564;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1408;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1599;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1599:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1600;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1601;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1600_1624(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1616 :
							monitor.wait();
							break;
						case 1600:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "psinv_0_";
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1411;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1601:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									receiver = "interp_0_";
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1411;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1602:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1562;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1406;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1603:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1413;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1568;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1604;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1604:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1563;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1407;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1605:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1415;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1570;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1607;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1606;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1606:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1408;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1564;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1599;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1607:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1576;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1421;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1599;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1608:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1418;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1573;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1609:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1419;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1574;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1610;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1610:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1580;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1425;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1611:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1576;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1421;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromrprj_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1599;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromrprj_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1612:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1422;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1577;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1613:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1423;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1578;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1614;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1614:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1585;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1431;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1615:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1580;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1425;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1617:
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 11;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1618:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(3);
									var receiverOptionsArray = new String[]{ "interp_0_","psinv_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1426;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1581;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1612;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1619:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(3);
									var receiverOptionsArray = new String[]{ "interp_0_","psinv_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1427;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1582;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1613;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							if (queueFromresid_0_Tomaster.peek() != null ) {
								monitor.notifyAll();
								state = 1620;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFromresid_0_Tomaster.take());
							}
							monitor.wait();
							break;
						case 1620:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(3);
									var receiverOptionsArray = new String[]{ "interp_0_","rprj_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1621;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1623;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1622;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1621:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "psinv_0_","rprj_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1430;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1431;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1622:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "rprj_0_","interp_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("rprj_0_")) {
									monitor.notifyAll();
									state = 1585;
									queueFrommasterTorprj_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1430;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1623:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
								if (receiver == null) {
									int rnd = new Random().nextInt(2);
									var receiverOptionsArray = new String[]{ "interp_0_","psinv_0_" };
									receiver = receiverOptionsArray[rnd];
								}
								if (receiver.equals("interp_0_")) {
									monitor.notifyAll();
									state = 1431;
									queueFrommasterTointerp_0_.put(box.get());
									return Optional.empty();
								}
								if (receiver.equals("psinv_0_")) {
									monitor.notifyAll();
									state = 1585;
									queueFrommasterTopsinv_0_.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				@Override
				public <Any, AnyInput> Optional<Any> exchange(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					synchronized (monitor){
						while (true){
							if (state >=0 && state <= 199){
								var result = exchange_0_199(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=200 && state <= 399){
								var result = exchange_200_399(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=400 && state <= 599){
								var result = exchange_400_599(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=600 && state <= 799){
								var result = exchange_600_799(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=800 && state <= 999){
								var result = exchange_800_999(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1000 && state <= 1199){
								var result = exchange_1000_1199(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1200 && state <= 1399){
								var result = exchange_1200_1399(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1400 && state <= 1599){
								var result = exchange_1400_1599(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1600 && state <= 1624){
								var result = exchange_1600_1624(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
						}
					}
					
				}
			};
			case "psinv_0_": return new IEnvironment() {
				
				@Override
				public String getName(){
					return environmentName;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_0_199(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 0 :
						case 1 :
						case 3 :
						case 4 :
						case 5 :
						case 7 :
						case 8 :
						case 9 :
						case 10 :
						case 11 :
						case 12 :
						case 14 :
						case 15 :
						case 16 :
						case 18 :
						case 19 :
						case 20 :
						case 22 :
						case 23 :
						case 25 :
						case 26 :
						case 30 :
						case 33 :
						case 34 :
						case 35 :
						case 36 :
						case 37 :
						case 38 :
						case 39 :
						case 40 :
						case 41 :
						case 42 :
						case 43 :
						case 44 :
						case 45 :
						case 46 :
						case 51 :
						case 58 :
						case 64 :
						case 69 :
						case 74 :
						case 75 :
						case 76 :
						case 77 :
						case 78 :
						case 79 :
						case 80 :
						case 81 :
						case 82 :
						case 83 :
						case 84 :
						case 85 :
						case 86 :
						case 87 :
						case 88 :
						case 89 :
						case 90 :
						case 91 :
						case 92 :
						case 93 :
						case 102 :
						case 105 :
						case 107 :
						case 108 :
						case 109 :
						case 112 :
						case 114 :
						case 117 :
						case 118 :
						case 119 :
						case 120 :
						case 121 :
						case 122 :
						case 123 :
						case 124 :
						case 125 :
						case 126 :
						case 127 :
						case 128 :
						case 129 :
						case 130 :
						case 131 :
						case 132 :
						case 133 :
						case 134 :
						case 135 :
						case 136 :
						case 154 :
						case 158 :
						case 161 :
						case 163 :
						case 165 :
						case 169 :
						case 172 :
						case 175 :
						case 180 :
						case 181 :
						case 182 :
						case 183 :
						case 184 :
						case 185 :
						case 186 :
						case 187 :
						case 188 :
						case 189 :
						case 190 :
						case 191 :
						case 192 :
						case 193 :
						case 194 :
						case 195 :
						case 196 :
						case 197 :
						case 198 :
						case 199 :
							monitor.wait();
							break;
						case 2:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1432;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 6:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1434;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 13:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1246;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 17:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1060;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 21:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 783;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 24:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 27;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 27:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 30;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 28:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 31;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 29:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 32;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 31:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 34;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 32:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 35;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 47:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 51;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 48:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 58;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 49:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 313;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 50:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 425;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 52:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 506;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 53:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 591;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 54:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 610;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 55:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 621;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 56:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 64;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 57:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 175;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 59:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 224;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 60:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 285;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 61:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 300;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 62:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 309;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 63:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 69;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 65:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 117;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 66:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 154;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 67:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 165;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 68:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 172;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 70:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 74;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 71:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 102;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 72:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 109;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 73:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 114;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 94:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 78;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 95:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 89;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 96:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 92;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 97:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 81;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 98:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 85;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 99:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 83;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 100:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 91;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 101:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 85;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 103:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 105;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 104:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 108;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 106:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 107;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 110:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 89;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 111:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 112;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 113:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 91;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 115:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 92;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 116:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 108;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 137:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 74;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 138:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 121;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 139:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 132;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 140:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 135;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 141:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 78;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 142:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 124;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 143:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 128;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 144:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 81;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 145:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 126;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 146:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 83;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 147:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 85;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 148:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 89;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 149:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 134;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 150:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 91;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 151:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 92;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 152:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 128;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 153:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 102;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 155:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 158;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 156:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 163;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 157:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 105;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 159:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 161;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 160:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 107;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 162:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 108;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 164:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 109;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 166:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 132;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 167:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 169;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 168:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 112;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 170:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 134;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 171:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 114;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 173:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 135;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 174:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 163;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 176:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 180;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 177:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 208;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 178:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 215;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 179:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 220;
								return Optional.empty();
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_200_399(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 208 :
						case 211 :
						case 213 :
						case 214 :
						case 215 :
						case 218 :
						case 220 :
						case 223 :
						case 224 :
						case 225 :
						case 226 :
						case 227 :
						case 228 :
						case 229 :
						case 230 :
						case 231 :
						case 232 :
						case 233 :
						case 234 :
						case 235 :
						case 236 :
						case 237 :
						case 238 :
						case 239 :
						case 240 :
						case 241 :
						case 242 :
						case 243 :
						case 244 :
						case 245 :
						case 246 :
						case 247 :
						case 248 :
						case 249 :
						case 250 :
						case 251 :
						case 252 :
						case 253 :
						case 254 :
						case 255 :
						case 256 :
						case 257 :
						case 258 :
						case 285 :
						case 290 :
						case 294 :
						case 297 :
						case 300 :
						case 305 :
						case 309 :
						case 313 :
						case 318 :
						case 323 :
						case 324 :
						case 325 :
						case 326 :
						case 327 :
						case 328 :
						case 329 :
						case 330 :
						case 331 :
						case 332 :
						case 333 :
						case 334 :
						case 335 :
						case 336 :
						case 337 :
						case 338 :
						case 339 :
						case 340 :
						case 341 :
						case 342 :
						case 351 :
						case 354 :
						case 356 :
						case 357 :
						case 358 :
						case 361 :
						case 363 :
						case 366 :
						case 367 :
						case 368 :
						case 369 :
						case 370 :
						case 371 :
						case 372 :
						case 373 :
						case 374 :
						case 375 :
						case 376 :
						case 377 :
						case 378 :
						case 379 :
						case 380 :
						case 381 :
						case 382 :
						case 383 :
						case 384 :
						case 385 :
							monitor.wait();
							break;
						case 200:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 184;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 201:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 195;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 202:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 198;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 203:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 187;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 204:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 191;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 205:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 189;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 206:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 197;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 207:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 191;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 209:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 211;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 210:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 214;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 212:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 213;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 216:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 195;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 217:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 218;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 219:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 197;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 221:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 198;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 222:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 214;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 259:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 117;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 260:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 180;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 261:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 229;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 262:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 252;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 263:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 257;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 264:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 121;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 265:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 184;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 266:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 233;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 267:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 243;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 268:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 124;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 269:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 187;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 270:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 236;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 271:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 126;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 272:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 189;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 273:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 128;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 274:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 191;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 275:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 132;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 276:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 195;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 277:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 255;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 278:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 134;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 279:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 197;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 280:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 135;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 281:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 198;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 282:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 243;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 283:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 154;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 284:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 208;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 286:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 290;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 287:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 297;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 288:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 158;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 289:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 211;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 291:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 294;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 292:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 161;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 293:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 213;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 295:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 163;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 296:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 214;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 298:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 165;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 299:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 215;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 301:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 252;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 302:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 305;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 303:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 169;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 304:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 218;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 306:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 255;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 307:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 172;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 308:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 220;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 310:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 257;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 311:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 297;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 312:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 318;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 314:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 366;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 315:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 403;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 316:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 414;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 317:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 421;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 319:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 323;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 320:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 351;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 321:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 358;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 322:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 363;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 343:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 327;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 344:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 338;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 345:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 341;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 346:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 330;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 347:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 334;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 348:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 332;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 349:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 340;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 350:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 334;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 352:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 354;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 353:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 357;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 355:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 356;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 359:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 338;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 360:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 361;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 362:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 340;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 364:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 341;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 365:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 357;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 386:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 323;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 387:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 370;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 388:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 381;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 389:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 384;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 390:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 327;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 391:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 373;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 392:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 377;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 393:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 330;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 394:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 375;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 395:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 332;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 396:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 334;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 397:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 338;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 398:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 383;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 399:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 340;
								return Optional.empty();
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_400_599(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 403 :
						case 407 :
						case 410 :
						case 412 :
						case 414 :
						case 418 :
						case 421 :
						case 425 :
						case 430 :
						case 431 :
						case 432 :
						case 433 :
						case 434 :
						case 435 :
						case 436 :
						case 437 :
						case 438 :
						case 439 :
						case 440 :
						case 441 :
						case 442 :
						case 443 :
						case 444 :
						case 445 :
						case 446 :
						case 447 :
						case 448 :
						case 449 :
						case 450 :
						case 451 :
						case 452 :
						case 453 :
						case 454 :
						case 455 :
						case 456 :
						case 457 :
						case 458 :
						case 459 :
						case 460 :
						case 461 :
						case 462 :
						case 463 :
						case 464 :
						case 465 :
						case 483 :
						case 487 :
						case 490 :
						case 492 :
						case 494 :
						case 498 :
						case 501 :
						case 504 :
						case 505 :
						case 506 :
						case 507 :
						case 508 :
						case 509 :
						case 510 :
						case 511 :
						case 512 :
						case 513 :
						case 514 :
						case 515 :
						case 516 :
						case 517 :
						case 518 :
						case 519 :
						case 520 :
						case 521 :
						case 522 :
						case 523 :
						case 524 :
						case 525 :
						case 526 :
						case 527 :
						case 528 :
						case 529 :
						case 530 :
						case 531 :
						case 532 :
						case 533 :
						case 534 :
						case 535 :
						case 536 :
						case 537 :
						case 538 :
						case 539 :
						case 540 :
						case 541 :
						case 542 :
						case 543 :
						case 544 :
						case 545 :
						case 546 :
						case 547 :
						case 548 :
						case 549 :
						case 550 :
						case 551 :
						case 552 :
						case 553 :
						case 554 :
						case 555 :
						case 591 :
						case 597 :
							monitor.wait();
							break;
						case 400:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 341;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 401:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 377;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 402:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 351;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 404:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 407;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 405:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 412;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 406:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 354;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 408:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 410;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 409:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 356;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 411:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 357;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 413:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 358;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 415:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 381;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 416:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 418;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 417:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 361;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 419:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 383;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 420:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 363;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 422:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 384;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 423:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 412;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 424:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 175;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 426:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 431;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 427:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 483;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 428:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 494;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 429:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 501;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 466:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 180;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 467:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 436;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 468:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 459;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 469:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 464;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 470:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 184;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 471:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 440;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 472:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 450;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 473:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 187;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 474:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 443;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 475:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 189;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 476:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 191;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 477:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 195;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 478:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 462;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 479:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 197;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 480:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 198;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 481:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 450;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 482:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 208;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 484:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 487;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 485:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 492;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 486:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 211;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 488:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 490;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 489:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 213;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 491:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 214;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 493:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 215;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 495:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 459;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 496:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 498;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 497:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 218;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 499:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 462;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 500:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 220;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 502:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 464;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 503:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 492;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 556:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 224;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 557:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 366;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 558:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 431;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 559:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 512;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 560:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 547;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 561:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 554;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 562:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 229;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 563:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 370;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 564:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 436;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 565:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 517;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 566:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 533;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 567:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 233;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 568:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 373;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 569:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 440;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 570:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 521;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 571:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 236;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 572:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 375;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 573:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 443;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 574:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 243;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 575:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 377;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 576:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 450;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 577:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 252;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 578:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 381;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 579:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 459;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 580:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 551;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 581:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 255;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 582:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 383;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 583:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 462;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 584:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 257;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 585:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 384;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 586:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 464;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 587:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 533;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 588:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 285;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 589:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 403;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 590:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 483;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 592:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 597;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 593:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 606;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 594:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 290;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 595:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 407;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 596:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 487;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 598:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 602;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 599:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 294;
								return Optional.empty();
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_600_799(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 602 :
						case 606 :
						case 610 :
						case 616 :
						case 621 :
						case 624 :
						case 625 :
						case 626 :
						case 627 :
						case 628 :
						case 629 :
						case 630 :
						case 631 :
						case 632 :
						case 633 :
						case 634 :
						case 635 :
						case 636 :
						case 637 :
						case 638 :
						case 639 :
						case 640 :
						case 641 :
						case 642 :
						case 643 :
						case 644 :
						case 645 :
						case 646 :
						case 647 :
						case 648 :
						case 649 :
						case 650 :
						case 651 :
						case 652 :
						case 653 :
						case 654 :
						case 655 :
						case 656 :
						case 657 :
						case 658 :
						case 659 :
						case 660 :
						case 661 :
						case 662 :
						case 663 :
						case 664 :
						case 665 :
						case 666 :
						case 667 :
						case 668 :
						case 669 :
						case 670 :
						case 671 :
						case 672 :
						case 673 :
						case 674 :
						case 675 :
						case 676 :
						case 677 :
						case 678 :
						case 679 :
						case 680 :
						case 681 :
						case 682 :
						case 683 :
						case 684 :
						case 685 :
						case 686 :
						case 687 :
						case 688 :
						case 695 :
						case 700 :
						case 718 :
						case 751 :
						case 752 :
						case 753 :
						case 754 :
						case 755 :
						case 756 :
						case 758 :
						case 759 :
						case 760 :
						case 761 :
						case 763 :
						case 764 :
						case 765 :
						case 766 :
						case 767 :
						case 768 :
						case 769 :
						case 770 :
						case 771 :
						case 772 :
						case 773 :
						case 774 :
						case 775 :
						case 776 :
						case 777 :
						case 778 :
						case 779 :
						case 781 :
						case 787 :
						case 790 :
						case 791 :
						case 792 :
						case 793 :
						case 794 :
						case 795 :
						case 796 :
						case 797 :
						case 798 :
						case 799 :
							monitor.wait();
							break;
						case 600:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 410;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 601:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 490;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 603:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 297;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 604:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 412;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 605:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 492;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 607:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 300;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 608:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 414;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 609:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 494;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 611:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 547;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 612:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 616;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 613:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 305;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 614:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 418;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 615:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 498;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 617:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 551;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 618:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 309;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 619:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 421;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 620:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 501;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 622:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 554;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 623:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 606;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 689:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 643;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 690:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 644;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 691:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 646;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 692:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 647;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 693:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 695;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 694:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 650;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 696:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 651;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 697:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 652;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 698:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 653;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 699:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 700;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 701:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 651;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 702:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 657;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 703:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 652;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 704:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 660;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 705:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 653;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 706:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 672;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 707:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 666;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 708:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 668;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 709:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 680;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 710:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 672;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 711:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 674;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 712:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 676;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 713:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 688;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 714:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 680;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 715:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 682;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 716:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 684;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 717:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 718;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 719:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 688;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 720:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 689;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 721:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 690;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 722:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 691;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 723:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 692;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 724:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 726;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 725:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 694;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 726:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 695;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 727:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 696;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 728:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 697;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 729:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 698;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 730:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 731;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 731:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 700;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 732:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 696;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 733:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 702;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 734:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 697;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 735:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 704;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 736:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 698;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 737:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 710;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 738:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 707;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 739:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 708;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 740:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 714;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 741:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 710;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 742:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 711;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 743:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 712;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 744:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 719;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 745:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 714;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 746:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 715;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 747:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 716;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 748:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 749;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 749:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 718;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 750:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 719;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 757:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 726;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 762:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 731;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 780:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 749;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 782:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 27;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 783:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 787;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 784:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 788;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 785:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 789;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 786:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 30;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 788:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 792;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 789:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 793;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_800_999(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 800 :
						case 801 :
						case 802 :
						case 803 :
						case 804 :
						case 805 :
						case 806 :
						case 807 :
						case 808 :
						case 809 :
						case 810 :
						case 811 :
						case 812 :
						case 813 :
						case 814 :
						case 815 :
						case 816 :
						case 817 :
						case 818 :
						case 819 :
						case 820 :
						case 821 :
						case 822 :
						case 823 :
						case 824 :
						case 825 :
						case 826 :
						case 827 :
						case 828 :
						case 829 :
						case 830 :
						case 831 :
						case 832 :
						case 833 :
						case 834 :
						case 835 :
						case 836 :
						case 837 :
						case 838 :
						case 839 :
						case 840 :
						case 841 :
						case 842 :
						case 843 :
						case 844 :
						case 845 :
						case 846 :
						case 847 :
						case 848 :
						case 849 :
						case 850 :
						case 851 :
						case 852 :
						case 853 :
						case 854 :
						case 855 :
						case 856 :
						case 857 :
						case 858 :
						case 859 :
						case 860 :
						case 861 :
						case 862 :
						case 863 :
						case 864 :
						case 865 :
						case 866 :
						case 867 :
						case 868 :
						case 869 :
						case 870 :
						case 871 :
						case 872 :
						case 873 :
						case 874 :
						case 875 :
						case 876 :
						case 877 :
						case 878 :
						case 879 :
						case 880 :
						case 881 :
						case 882 :
						case 883 :
						case 884 :
						case 885 :
						case 886 :
						case 887 :
						case 888 :
						case 889 :
						case 890 :
						case 891 :
						case 892 :
						case 893 :
						case 894 :
						case 905 :
						case 914 :
						case 948 :
							monitor.wait();
							break;
						case 895:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 34;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 896:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 826;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 897:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 827;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 898:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 643;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 899:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 830;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 900:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 831;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 901:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 646;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 902:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 905;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 903:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 835;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 904:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 695;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 906:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 837;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 907:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 651;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 908:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 839;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 909:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 652;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 910:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 841;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 911:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 653;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 912:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 914;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 913:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 700;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 915:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 650;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 916:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 837;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 917:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 848;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 918:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 657;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 919:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 839;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 920:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 852;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 921:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 660;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 922:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 841;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 923:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 870;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 924:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 672;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 925:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 647;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 926:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 861;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 927:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 666;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 928:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 864;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 929:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 668;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 930:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 882;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 931:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 680;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 932:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 870;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 933:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 644;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 934:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 873;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 935:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 674;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 936:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 876;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 937:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 676;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 938:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 894;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 939:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 688;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 940:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 882;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 941:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 35;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 942:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 885;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 943:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 682;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 944:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 888;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 945:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 684;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 946:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 948;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 947:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 718;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 949:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 894;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 950:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 31;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 951:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 896;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 952:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 897;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 953:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 689;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 954:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 899;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 955:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 900;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 956:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 691;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 957:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 960;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 958:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 903;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 959:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 726;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 960:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 905;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 961:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 906;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 962:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 696;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 963:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 908;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 964:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 697;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 965:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 910;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 966:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 698;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 967:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 969;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 968:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 731;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 969:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 914;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 970:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 694;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 971:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 906;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 972:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 917;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 973:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 702;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 974:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 908;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 975:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 920;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 976:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 704;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 977:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 910;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 978:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 932;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 979:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 710;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 980:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 692;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 981:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 926;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 982:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 707;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 983:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 928;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 984:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 708;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 985:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 940;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 986:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 714;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 987:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 932;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 988:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 690;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 989:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 934;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 990:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 711;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 991:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 936;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 992:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 712;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 993:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 949;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 994:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 719;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 995:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 940;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 996:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 32;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 997:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 942;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 998:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 715;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 999:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 944;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1000_1199(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1005 :
						case 1006 :
						case 1007 :
						case 1008 :
						case 1009 :
						case 1010 :
						case 1011 :
						case 1012 :
						case 1013 :
						case 1014 :
						case 1016 :
						case 1017 :
						case 1018 :
						case 1019 :
						case 1020 :
						case 1021 :
						case 1022 :
						case 1023 :
						case 1025 :
						case 1026 :
						case 1027 :
						case 1028 :
						case 1029 :
						case 1030 :
						case 1031 :
						case 1032 :
						case 1033 :
						case 1034 :
						case 1035 :
						case 1036 :
						case 1037 :
						case 1038 :
						case 1039 :
						case 1040 :
						case 1041 :
						case 1042 :
						case 1043 :
						case 1044 :
						case 1045 :
						case 1046 :
						case 1047 :
						case 1048 :
						case 1049 :
						case 1050 :
						case 1051 :
						case 1052 :
						case 1053 :
						case 1054 :
						case 1055 :
						case 1056 :
						case 1057 :
						case 1059 :
						case 1063 :
						case 1066 :
						case 1067 :
						case 1068 :
						case 1069 :
						case 1070 :
						case 1071 :
						case 1072 :
						case 1073 :
						case 1074 :
						case 1075 :
						case 1076 :
						case 1077 :
						case 1078 :
						case 1079 :
						case 1080 :
						case 1081 :
						case 1082 :
						case 1083 :
						case 1084 :
						case 1085 :
						case 1086 :
						case 1087 :
						case 1088 :
						case 1089 :
						case 1090 :
						case 1091 :
						case 1092 :
						case 1093 :
						case 1094 :
						case 1095 :
						case 1096 :
						case 1097 :
						case 1098 :
						case 1099 :
						case 1100 :
						case 1101 :
						case 1102 :
						case 1103 :
						case 1104 :
						case 1105 :
						case 1106 :
						case 1107 :
						case 1108 :
						case 1109 :
						case 1110 :
						case 1111 :
						case 1112 :
						case 1113 :
						case 1114 :
						case 1115 :
						case 1116 :
						case 1117 :
						case 1118 :
						case 1119 :
						case 1120 :
						case 1121 :
						case 1122 :
						case 1123 :
						case 1124 :
						case 1125 :
						case 1126 :
						case 1127 :
						case 1128 :
						case 1129 :
						case 1130 :
						case 1131 :
						case 1132 :
						case 1133 :
						case 1134 :
						case 1135 :
						case 1136 :
						case 1137 :
						case 1138 :
						case 1139 :
						case 1140 :
						case 1141 :
						case 1142 :
						case 1143 :
						case 1144 :
						case 1145 :
						case 1146 :
						case 1147 :
						case 1148 :
						case 1149 :
						case 1156 :
						case 1161 :
						case 1179 :
							monitor.wait();
							break;
						case 1000:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 716;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1001:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1003;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1002:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 749;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1003:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 948;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1004:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 949;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1015:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 960;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1024:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 969;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1058:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1003;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1060:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1063;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1061:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1064;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1062:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1065;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1064:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1067;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1065:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1068;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1150:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1104;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1151:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1105;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1152:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1107;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1153:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1108;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1154:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1156;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1155:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1111;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1157:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1112;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1158:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1113;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1159:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1114;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1160:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1161;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1162:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1112;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1163:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1118;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1164:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1113;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1165:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1121;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1166:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1114;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1167:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1133;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1168:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1127;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1169:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1129;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1170:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1141;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1171:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1133;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1172:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1135;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1173:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1137;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1174:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1149;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1175:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1141;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1176:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1143;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1177:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1145;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1178:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1179;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1180:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1149;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1181:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1150;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1182:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1151;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1183:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1152;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1184:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1153;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1185:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1187;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1186:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1155;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1187:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1156;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1188:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1157;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1189:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1158;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1190:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1159;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1191:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1192;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1192:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1161;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1193:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1157;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1194:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1163;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1195:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1158;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1196:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1165;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1197:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1159;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1198:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1171;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1199:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1168;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1200_1399(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1212 :
						case 1213 :
						case 1214 :
						case 1215 :
						case 1216 :
						case 1217 :
						case 1218 :
						case 1220 :
						case 1221 :
						case 1222 :
						case 1223 :
						case 1224 :
						case 1226 :
						case 1227 :
						case 1228 :
						case 1229 :
						case 1230 :
						case 1231 :
						case 1232 :
						case 1233 :
						case 1234 :
						case 1235 :
						case 1236 :
						case 1237 :
						case 1238 :
						case 1239 :
						case 1240 :
						case 1241 :
						case 1242 :
						case 1243 :
						case 1245 :
						case 1249 :
						case 1252 :
						case 1253 :
						case 1254 :
						case 1255 :
						case 1256 :
						case 1257 :
						case 1258 :
						case 1259 :
						case 1260 :
						case 1261 :
						case 1262 :
						case 1263 :
						case 1264 :
						case 1265 :
						case 1266 :
						case 1267 :
						case 1268 :
						case 1269 :
						case 1270 :
						case 1271 :
						case 1272 :
						case 1273 :
						case 1274 :
						case 1275 :
						case 1276 :
						case 1277 :
						case 1278 :
						case 1279 :
						case 1280 :
						case 1281 :
						case 1282 :
						case 1283 :
						case 1284 :
						case 1285 :
						case 1286 :
						case 1287 :
						case 1288 :
						case 1289 :
						case 1290 :
						case 1291 :
						case 1292 :
						case 1293 :
						case 1294 :
						case 1295 :
						case 1296 :
						case 1297 :
						case 1298 :
						case 1299 :
						case 1300 :
						case 1301 :
						case 1302 :
						case 1303 :
						case 1304 :
						case 1305 :
						case 1306 :
						case 1307 :
						case 1308 :
						case 1309 :
						case 1310 :
						case 1311 :
						case 1312 :
						case 1313 :
						case 1314 :
						case 1315 :
						case 1316 :
						case 1317 :
						case 1318 :
						case 1319 :
						case 1320 :
						case 1321 :
						case 1322 :
						case 1323 :
						case 1324 :
						case 1325 :
						case 1326 :
						case 1327 :
						case 1328 :
						case 1329 :
						case 1330 :
						case 1331 :
						case 1332 :
						case 1333 :
						case 1334 :
						case 1335 :
						case 1342 :
						case 1347 :
						case 1365 :
						case 1398 :
						case 1399 :
							monitor.wait();
							break;
						case 1200:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1169;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1201:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1175;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1202:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1171;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1203:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1172;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1204:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1173;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1205:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1180;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1206:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1175;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1207:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1176;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1208:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1177;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1209:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1210;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1210:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1179;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1211:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1180;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1219:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1187;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1225:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1192;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1244:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1210;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1246:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1249;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1247:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1250;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1248:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1251;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1250:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1253;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1251:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1254;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1336:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1290;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1337:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1291;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1338:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1293;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1339:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1294;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1340:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1342;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1341:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1297;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1343:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1298;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1344:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1299;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1345:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1300;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1346:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1347;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1348:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1298;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1349:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1304;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1350:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1299;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1351:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1307;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1352:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1300;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1353:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1319;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1354:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1313;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1355:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1315;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1356:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1327;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1357:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1319;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1358:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1321;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1359:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1323;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1360:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1335;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1361:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1327;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1362:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1329;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1363:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1331;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1364:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1365;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1366:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1335;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1367:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1336;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1368:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1337;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1369:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1338;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1370:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1339;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1371:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1373;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1372:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1341;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1373:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1342;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1374:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1343;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1375:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1344;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1376:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1345;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1377:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1378;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1378:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1347;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1379:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1343;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1380:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1349;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1381:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1344;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1382:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1351;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1383:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1345;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1384:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1357;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1385:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1354;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1386:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1355;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1387:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1361;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1388:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1357;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1389:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1358;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1390:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1359;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1391:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1366;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1392:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1361;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1393:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1362;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1394:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1363;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1395:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1396;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1396:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1365;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1397:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1366;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1400_1599(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1400 :
						case 1401 :
						case 1402 :
						case 1403 :
						case 1404 :
						case 1406 :
						case 1407 :
						case 1408 :
						case 1409 :
						case 1410 :
						case 1412 :
						case 1413 :
						case 1414 :
						case 1415 :
						case 1416 :
						case 1417 :
						case 1418 :
						case 1419 :
						case 1420 :
						case 1421 :
						case 1422 :
						case 1423 :
						case 1424 :
						case 1425 :
						case 1426 :
						case 1427 :
						case 1428 :
						case 1429 :
						case 1431 :
						case 1433 :
						case 1437 :
						case 1440 :
						case 1441 :
						case 1442 :
						case 1443 :
						case 1444 :
						case 1445 :
						case 1446 :
						case 1447 :
						case 1448 :
						case 1449 :
						case 1450 :
						case 1451 :
						case 1452 :
						case 1453 :
						case 1454 :
						case 1455 :
						case 1456 :
						case 1457 :
						case 1458 :
						case 1459 :
						case 1460 :
						case 1461 :
						case 1462 :
						case 1463 :
						case 1464 :
						case 1465 :
						case 1466 :
						case 1467 :
						case 1468 :
						case 1469 :
						case 1470 :
						case 1471 :
						case 1472 :
						case 1473 :
						case 1474 :
						case 1475 :
						case 1476 :
						case 1477 :
						case 1478 :
						case 1479 :
						case 1480 :
						case 1481 :
						case 1482 :
						case 1483 :
						case 1484 :
						case 1485 :
						case 1486 :
						case 1487 :
						case 1488 :
						case 1489 :
						case 1490 :
						case 1491 :
						case 1492 :
						case 1493 :
						case 1494 :
						case 1495 :
						case 1496 :
						case 1497 :
						case 1498 :
						case 1499 :
						case 1500 :
						case 1501 :
						case 1502 :
						case 1503 :
						case 1504 :
						case 1505 :
						case 1506 :
						case 1507 :
						case 1508 :
						case 1509 :
						case 1510 :
						case 1511 :
						case 1512 :
						case 1513 :
						case 1514 :
						case 1515 :
						case 1516 :
						case 1517 :
						case 1518 :
						case 1519 :
						case 1520 :
						case 1521 :
						case 1522 :
						case 1523 :
						case 1530 :
						case 1535 :
						case 1553 :
						case 1586 :
						case 1587 :
						case 1588 :
						case 1589 :
						case 1590 :
						case 1591 :
						case 1592 :
						case 1593 :
						case 1594 :
						case 1596 :
						case 1597 :
						case 1598 :
						case 1599 :
							monitor.wait();
							break;
						case 1405:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1373;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1411:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1378;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1430:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1396;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1432:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1433;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1434:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1437;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1435:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1438;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1436:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1439;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1438:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1441;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1439:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1442;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1524:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1478;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1525:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1479;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1526:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1481;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1527:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1482;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1528:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1530;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1529:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1485;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1531:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1486;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1532:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1487;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1533:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1488;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1534:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1535;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1536:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1486;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1537:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1492;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1538:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1487;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1539:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1495;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1540:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1488;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1541:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1507;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1542:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1501;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1543:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1503;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1544:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1515;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1545:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1507;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1546:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1509;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1547:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1511;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1548:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1523;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1549:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1515;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1550:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1517;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1551:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1519;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1552:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1553;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1554:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1523;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1555:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1524;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1556:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1525;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1557:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1526;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1558:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1527;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1559:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1561;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1560:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1529;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1561:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1530;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1562:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1531;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1563:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1532;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1564:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1533;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1565:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1566;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1566:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1535;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1567:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1531;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1568:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1537;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1569:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1532;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1570:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1539;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1571:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1533;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1572:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1545;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1573:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1542;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1574:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1543;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1575:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1549;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1576:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1545;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1577:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1546;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1578:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1547;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1579:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1554;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1580:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1549;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1581:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1550;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1582:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1551;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1583:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1584;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1584:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1553;
									queueFrompsinv_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1585:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1554;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1595:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1561;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1600_1624(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1600 :
						case 1602 :
						case 1603 :
						case 1604 :
						case 1605 :
						case 1606 :
						case 1607 :
						case 1608 :
						case 1609 :
						case 1610 :
						case 1611 :
						case 1612 :
						case 1613 :
						case 1614 :
						case 1615 :
						case 1616 :
						case 1617 :
						case 1618 :
						case 1619 :
						case 1620 :
						case 1621 :
						case 1623 :
							monitor.wait();
							break;
						case 1601:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1566;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
						case 1622:
							if (queueFrommasterTopsinv_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1584;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTopsinv_0_.take());
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				@Override
				public <Any, AnyInput> Optional<Any> exchange(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					synchronized (monitor){
						while (true){
							if (state >=0 && state <= 199){
								var result = exchange_0_199(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=200 && state <= 399){
								var result = exchange_200_399(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=400 && state <= 599){
								var result = exchange_400_599(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=600 && state <= 799){
								var result = exchange_600_799(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=800 && state <= 999){
								var result = exchange_800_999(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1000 && state <= 1199){
								var result = exchange_1000_1199(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1200 && state <= 1399){
								var result = exchange_1200_1399(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1400 && state <= 1599){
								var result = exchange_1400_1599(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1600 && state <= 1624){
								var result = exchange_1600_1624(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
						}
					}
					
				}
			};
			case "resid_0_": return new IEnvironment() {
				
				@Override
				public String getName(){
					return environmentName;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_0_199(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 0 :
						case 1 :
						case 2 :
						case 3 :
						case 5 :
						case 6 :
						case 7 :
						case 9 :
						case 10 :
						case 11 :
						case 12 :
						case 13 :
						case 14 :
						case 16 :
						case 17 :
						case 18 :
						case 20 :
						case 21 :
						case 22 :
						case 24 :
						case 25 :
						case 27 :
						case 28 :
						case 30 :
						case 31 :
						case 33 :
						case 34 :
						case 36 :
						case 38 :
						case 40 :
						case 42 :
						case 46 :
						case 55 :
						case 62 :
						case 68 :
						case 73 :
						case 77 :
						case 80 :
						case 82 :
						case 83 :
						case 84 :
						case 85 :
						case 87 :
						case 88 :
						case 90 :
						case 91 :
						case 92 :
						case 93 :
						case 96 :
						case 98 :
						case 99 :
						case 100 :
						case 101 :
						case 104 :
						case 106 :
						case 107 :
						case 108 :
						case 111 :
						case 112 :
						case 113 :
						case 114 :
						case 115 :
						case 116 :
						case 120 :
						case 123 :
						case 125 :
						case 126 :
						case 127 :
						case 128 :
						case 130 :
						case 131 :
						case 133 :
						case 134 :
						case 135 :
						case 136 :
						case 140 :
						case 143 :
						case 145 :
						case 146 :
						case 147 :
						case 149 :
						case 150 :
						case 151 :
						case 152 :
						case 156 :
						case 159 :
						case 160 :
						case 161 :
						case 162 :
						case 163 :
						case 167 :
						case 168 :
						case 169 :
						case 170 :
						case 171 :
						case 172 :
						case 173 :
						case 174 :
						case 179 :
						case 183 :
						case 186 :
						case 188 :
						case 189 :
						case 190 :
						case 191 :
						case 193 :
						case 194 :
						case 196 :
						case 197 :
						case 198 :
						case 199 :
							monitor.wait();
							break;
						case 4:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1616;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 8:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1618;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 15:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1426;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 19:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1240;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 23:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1052;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 26:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 777;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 29:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 746;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 32:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 715;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 35:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 682;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 37:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 638;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 39:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 634;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 41:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 630;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 43:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 625;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 44:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 45;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 45:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 46;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 47:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 55;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 48:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 62;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 49:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 317;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 50:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 429;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 51:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 509;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 52:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 561;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 53:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 593;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 54:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 612;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 56:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 68;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 57:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 179;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 58:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 227;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 59:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 263;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 60:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 287;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 61:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 302;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 63:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 73;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 64:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 120;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 65:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 140;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 66:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 156;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 67:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 167;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 69:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 77;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 70:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 96;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 71:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 104;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 72:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 111;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 74:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 80;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 75:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 87;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 76:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 90;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 78:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 82;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 79:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 84;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 81:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 83;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 86:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 88;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 89:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 84;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 94:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 98;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 95:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 100;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 97:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 99;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 102:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 87;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 103:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 106;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 105:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 88;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 109:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 90;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 110:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 100;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 117:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 123;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 118:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 130;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 119:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 133;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 121:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 125;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 122:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 127;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 124:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 126;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 129:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 131;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 132:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 127;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 137:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 96;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 138:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 143;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 139:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 149;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 141:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 98;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 142:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 145;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 144:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 99;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 148:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 100;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 153:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 104;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 154:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 130;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 155:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 159;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 157:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 106;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 158:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 131;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 164:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 111;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 165:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 133;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 166:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 149;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 175:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 183;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 176:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 202;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 177:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 210;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 178:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 217;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 180:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 186;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 181:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 193;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 182:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 196;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 184:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 188;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 185:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 190;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 187:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 189;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 192:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 194;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 195:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 190;
								return Optional.empty();
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_200_399(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 202 :
						case 204 :
						case 205 :
						case 206 :
						case 207 :
						case 210 :
						case 212 :
						case 213 :
						case 214 :
						case 217 :
						case 218 :
						case 219 :
						case 220 :
						case 221 :
						case 222 :
						case 227 :
						case 231 :
						case 234 :
						case 236 :
						case 237 :
						case 238 :
						case 240 :
						case 241 :
						case 242 :
						case 243 :
						case 246 :
						case 248 :
						case 249 :
						case 250 :
						case 253 :
						case 254 :
						case 255 :
						case 256 :
						case 257 :
						case 258 :
						case 263 :
						case 267 :
						case 270 :
						case 271 :
						case 272 :
						case 273 :
						case 274 :
						case 277 :
						case 278 :
						case 279 :
						case 280 :
						case 281 :
						case 282 :
						case 287 :
						case 291 :
						case 292 :
						case 293 :
						case 294 :
						case 295 :
						case 296 :
						case 297 :
						case 302 :
						case 303 :
						case 304 :
						case 305 :
						case 306 :
						case 307 :
						case 308 :
						case 309 :
						case 310 :
						case 311 :
						case 317 :
						case 322 :
						case 326 :
						case 329 :
						case 331 :
						case 332 :
						case 333 :
						case 334 :
						case 336 :
						case 337 :
						case 339 :
						case 340 :
						case 341 :
						case 342 :
						case 345 :
						case 347 :
						case 348 :
						case 349 :
						case 350 :
						case 353 :
						case 355 :
						case 356 :
						case 357 :
						case 360 :
						case 361 :
						case 362 :
						case 363 :
						case 364 :
						case 365 :
						case 369 :
						case 372 :
						case 374 :
						case 375 :
						case 376 :
						case 377 :
						case 379 :
						case 380 :
						case 382 :
						case 383 :
						case 384 :
						case 385 :
						case 389 :
						case 392 :
						case 394 :
						case 395 :
						case 396 :
						case 398 :
						case 399 :
							monitor.wait();
							break;
						case 200:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 204;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 201:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 206;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 203:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 205;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 208:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 193;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 209:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 212;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 211:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 194;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 215:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 196;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 216:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 206;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 223:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 120;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 224:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 231;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 225:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 246;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 226:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 253;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 228:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 123;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 229:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 234;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 230:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 240;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 232:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 125;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 233:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 236;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 235:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 126;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 239:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 127;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 244:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 130;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 245:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 248;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 247:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 131;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 251:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 133;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 252:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 240;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 259:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 140;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 260:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 202;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 261:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 267;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 262:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 277;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 264:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 143;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 265:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 204;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 266:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 270;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 268:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 145;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 269:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 205;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 275:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 149;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 276:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 206;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 283:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 156;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 284:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 210;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 285:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 246;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 286:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 291;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 288:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 159;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 289:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 212;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 290:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 248;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 298:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 167;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 299:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 217;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 300:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 253;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 301:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 277;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 312:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 322;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 313:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 369;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 314:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 389;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 315:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 405;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 316:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 416;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 318:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 326;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 319:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 345;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 320:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 353;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 321:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 360;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 323:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 329;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 324:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 336;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 325:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 339;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 327:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 331;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 328:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 333;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 330:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 332;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 335:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 337;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 338:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 333;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 343:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 347;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 344:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 349;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 346:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 348;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 351:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 336;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 352:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 355;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 354:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 337;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 358:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 339;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 359:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 349;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 366:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 372;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 367:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 379;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 368:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 382;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 370:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 374;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 371:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 376;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 373:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 375;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 378:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 380;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 381:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 376;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 386:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 345;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 387:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 392;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 388:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 398;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 390:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 347;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 391:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 394;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 393:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 348;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 397:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 349;
								return Optional.empty();
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_400_599(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 400 :
						case 401 :
						case 405 :
						case 408 :
						case 409 :
						case 410 :
						case 411 :
						case 412 :
						case 416 :
						case 417 :
						case 418 :
						case 419 :
						case 420 :
						case 421 :
						case 422 :
						case 423 :
						case 429 :
						case 434 :
						case 438 :
						case 441 :
						case 443 :
						case 444 :
						case 445 :
						case 447 :
						case 448 :
						case 449 :
						case 450 :
						case 453 :
						case 455 :
						case 456 :
						case 457 :
						case 460 :
						case 461 :
						case 462 :
						case 463 :
						case 464 :
						case 465 :
						case 469 :
						case 472 :
						case 474 :
						case 475 :
						case 476 :
						case 478 :
						case 479 :
						case 480 :
						case 481 :
						case 485 :
						case 488 :
						case 489 :
						case 490 :
						case 491 :
						case 492 :
						case 496 :
						case 497 :
						case 498 :
						case 499 :
						case 500 :
						case 501 :
						case 502 :
						case 503 :
						case 509 :
						case 514 :
						case 518 :
						case 521 :
						case 522 :
						case 523 :
						case 524 :
						case 525 :
						case 528 :
						case 529 :
						case 530 :
						case 531 :
						case 532 :
						case 533 :
						case 537 :
						case 540 :
						case 541 :
						case 542 :
						case 543 :
						case 544 :
						case 548 :
						case 549 :
						case 550 :
						case 551 :
						case 552 :
						case 553 :
						case 554 :
						case 555 :
						case 561 :
						case 566 :
						case 570 :
						case 571 :
						case 572 :
						case 573 :
						case 574 :
						case 575 :
						case 576 :
						case 580 :
						case 581 :
						case 582 :
						case 583 :
						case 584 :
						case 585 :
						case 586 :
						case 587 :
						case 593 :
						case 598 :
						case 599 :
							monitor.wait();
							break;
						case 402:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 353;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 403:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 379;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 404:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 408;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 406:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 355;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 407:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 380;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 413:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 360;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 414:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 382;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 415:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 398;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 424:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 179;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 425:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 434;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 426:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 469;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 427:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 485;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 428:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 496;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 430:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 183;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 431:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 438;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 432:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 453;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 433:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 460;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 435:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 186;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 436:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 441;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 437:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 447;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 439:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 188;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 440:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 443;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 442:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 189;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 446:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 190;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 451:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 193;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 452:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 455;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 454:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 194;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 458:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 196;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 459:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 447;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 466:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 202;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 467:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 472;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 468:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 478;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 470:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 204;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 471:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 474;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 473:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 205;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 477:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 206;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 482:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 210;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 483:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 453;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 484:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 488;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 486:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 212;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 487:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 455;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 493:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 217;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 494:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 460;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 495:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 478;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 504:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 227;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 505:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 369;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 506:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 514;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 507:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 537;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 508:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 548;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 510:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 231;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 511:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 372;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 512:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 518;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 513:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 528;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 515:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 234;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 516:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 374;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 517:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 521;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 519:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 236;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 520:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 375;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 526:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 240;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 527:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 376;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 534:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 246;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 535:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 379;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 536:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 540;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 538:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 248;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 539:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 380;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 545:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 253;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 546:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 382;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 547:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 528;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 556:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 263;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 557:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 389;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 558:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 469;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 559:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 566;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 560:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 580;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 562:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 267;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 563:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 392;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 564:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 472;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 565:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 570;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 567:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 270;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 568:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 394;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 569:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 474;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 577:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 277;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 578:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 398;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 579:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 478;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 588:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 287;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 589:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 405;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 590:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 485;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 591:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 537;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 592:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 598;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 594:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 291;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 595:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 408;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 596:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 488;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 597:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 540;
								return Optional.empty();
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_600_799(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 600 :
						case 601 :
						case 602 :
						case 603 :
						case 604 :
						case 605 :
						case 606 :
						case 612 :
						case 613 :
						case 614 :
						case 615 :
						case 616 :
						case 617 :
						case 618 :
						case 619 :
						case 620 :
						case 621 :
						case 622 :
						case 623 :
						case 627 :
						case 628 :
						case 629 :
						case 631 :
						case 632 :
						case 633 :
						case 635 :
						case 636 :
						case 637 :
						case 639 :
						case 640 :
						case 641 :
						case 642 :
						case 643 :
						case 645 :
						case 646 :
						case 648 :
						case 649 :
						case 653 :
						case 654 :
						case 660 :
						case 661 :
						case 662 :
						case 663 :
						case 664 :
						case 668 :
						case 669 :
						case 670 :
						case 671 :
						case 672 :
						case 676 :
						case 677 :
						case 678 :
						case 679 :
						case 680 :
						case 684 :
						case 685 :
						case 686 :
						case 687 :
						case 688 :
						case 689 :
						case 691 :
						case 693 :
						case 695 :
						case 698 :
						case 699 :
						case 700 :
						case 704 :
						case 705 :
						case 706 :
						case 708 :
						case 709 :
						case 710 :
						case 712 :
						case 713 :
						case 714 :
						case 716 :
						case 717 :
						case 718 :
						case 719 :
						case 720 :
						case 722 :
						case 724 :
						case 726 :
						case 729 :
						case 730 :
						case 731 :
						case 735 :
						case 736 :
						case 737 :
						case 739 :
						case 740 :
						case 741 :
						case 743 :
						case 744 :
						case 745 :
						case 747 :
						case 748 :
						case 749 :
						case 750 :
						case 751 :
						case 753 :
						case 755 :
						case 757 :
						case 760 :
						case 761 :
						case 762 :
						case 766 :
						case 767 :
						case 768 :
						case 770 :
						case 771 :
						case 772 :
						case 774 :
						case 775 :
						case 776 :
						case 778 :
						case 779 :
						case 780 :
						case 781 :
						case 782 :
						case 783 :
						case 784 :
						case 786 :
						case 787 :
						case 788 :
						case 790 :
						case 791 :
						case 792 :
						case 794 :
						case 796 :
						case 798 :
							monitor.wait();
							break;
						case 607:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 302;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 608:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 416;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 609:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 496;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 610:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 548;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 611:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 580;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 624:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 45;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 625:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 627;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 626:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 46;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 630:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 631;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 634:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 635;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 638:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 639;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 644:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 674;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 647:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 666;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 650:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 657;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 651:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 652;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 652:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 653;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 655:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 625;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 656:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 652;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 657:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 660;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 658:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 627;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 659:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 653;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 665:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 630;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 666:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 668;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 667:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 631;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 673:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 634;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 674:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 676;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 675:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 635;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 681:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 638;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 682:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 684;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 683:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 639;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 690:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 711;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 692:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 707;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 694:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 702;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 696:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 697;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 697:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 698;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 701:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 697;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 702:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 704;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 703:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 698;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 707:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 708;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 711:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 712;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 715:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 716;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 721:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 742;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 723:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 738;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 725:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 733;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 727:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 728;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 728:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 729;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 732:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 728;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 733:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 735;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 734:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 729;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 738:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 739;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 742:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 743;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 746:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 747;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 752:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 773;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 754:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 769;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 756:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 764;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 758:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 759;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 759:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 760;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 763:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 759;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 764:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 766;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 765:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 760;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 769:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 770;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 773:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 774;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 777:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 778;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 785:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 997;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 789:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 942;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 793:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 885;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 795:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 820;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 797:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 816;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 799:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 812;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_800_999(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 800 :
						case 804 :
						case 805 :
						case 809 :
						case 810 :
						case 811 :
						case 813 :
						case 814 :
						case 815 :
						case 817 :
						case 818 :
						case 819 :
						case 821 :
						case 822 :
						case 823 :
						case 824 :
						case 825 :
						case 826 :
						case 828 :
						case 829 :
						case 830 :
						case 832 :
						case 833 :
						case 834 :
						case 836 :
						case 841 :
						case 842 :
						case 843 :
						case 844 :
						case 852 :
						case 853 :
						case 854 :
						case 855 :
						case 856 :
						case 857 :
						case 858 :
						case 864 :
						case 865 :
						case 866 :
						case 867 :
						case 868 :
						case 869 :
						case 870 :
						case 876 :
						case 877 :
						case 878 :
						case 879 :
						case 880 :
						case 881 :
						case 882 :
						case 888 :
						case 889 :
						case 890 :
						case 891 :
						case 892 :
						case 893 :
						case 894 :
						case 895 :
						case 896 :
						case 898 :
						case 899 :
						case 901 :
						case 902 :
						case 904 :
						case 905 :
						case 910 :
						case 911 :
						case 912 :
						case 913 :
						case 914 :
						case 920 :
						case 921 :
						case 922 :
						case 923 :
						case 924 :
						case 928 :
						case 929 :
						case 930 :
						case 931 :
						case 932 :
						case 936 :
						case 937 :
						case 938 :
						case 939 :
						case 940 :
						case 944 :
						case 945 :
						case 946 :
						case 947 :
						case 948 :
						case 949 :
						case 950 :
						case 951 :
						case 953 :
						case 954 :
						case 956 :
						case 957 :
						case 959 :
						case 960 :
						case 965 :
						case 966 :
						case 967 :
						case 968 :
						case 969 :
						case 975 :
						case 976 :
						case 977 :
						case 978 :
						case 979 :
						case 983 :
						case 984 :
						case 985 :
						case 986 :
						case 987 :
						case 991 :
						case 992 :
						case 993 :
						case 994 :
						case 995 :
						case 999 :
							monitor.wait();
							break;
						case 801:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 807;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 802:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 803;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 803:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 804;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 806:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 803;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 807:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 809;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 808:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 804;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 812:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 813;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 816:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 817;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 820:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 821;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 827:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 873;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 831:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 861;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 835:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 848;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 837:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 839;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 838:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 652;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 839:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 841;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 840:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 653;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 845:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 657;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 846:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 807;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 847:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 839;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 848:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 852;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 849:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 660;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 850:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 809;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 851:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 841;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 859:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 666;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 860:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 812;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 861:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 864;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 862:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 668;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 863:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 813;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 871:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 674;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 872:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 816;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 873:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 876;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 874:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 676;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 875:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 817;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 883:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 682;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 884:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 820;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 885:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 888;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 886:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 684;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 887:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 821;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 897:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 934;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 900:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 926;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 903:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 917;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 906:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 908;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 907:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 697;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 908:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 910;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 909:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 698;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 915:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 702;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 916:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 908;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 917:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 920;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 918:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 704;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 919:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 910;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 925:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 707;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 926:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 928;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 927:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 708;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 933:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 711;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 934:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 936;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 935:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 712;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 941:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 715;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 942:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 944;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 943:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 716;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 952:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 989;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 955:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 981;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 958:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 972;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 961:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 963;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 962:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 728;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 963:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 965;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 964:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 729;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 970:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 733;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 971:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 963;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 972:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 975;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 973:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 735;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 974:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 965;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 980:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 738;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 981:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 983;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 982:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 739;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 988:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 742;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 989:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 991;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 990:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 743;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 996:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 746;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 997:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 999;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 998:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 747;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1000_1199(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1000 :
						case 1001 :
						case 1002 :
						case 1003 :
						case 1004 :
						case 1005 :
						case 1006 :
						case 1008 :
						case 1009 :
						case 1011 :
						case 1012 :
						case 1014 :
						case 1015 :
						case 1020 :
						case 1021 :
						case 1022 :
						case 1023 :
						case 1024 :
						case 1030 :
						case 1031 :
						case 1032 :
						case 1033 :
						case 1034 :
						case 1038 :
						case 1039 :
						case 1040 :
						case 1041 :
						case 1042 :
						case 1046 :
						case 1047 :
						case 1048 :
						case 1049 :
						case 1050 :
						case 1054 :
						case 1055 :
						case 1056 :
						case 1057 :
						case 1058 :
						case 1059 :
						case 1060 :
						case 1061 :
						case 1063 :
						case 1064 :
						case 1066 :
						case 1067 :
						case 1069 :
						case 1070 :
						case 1072 :
						case 1074 :
						case 1076 :
						case 1078 :
						case 1081 :
						case 1082 :
						case 1083 :
						case 1087 :
						case 1088 :
						case 1089 :
						case 1091 :
						case 1092 :
						case 1093 :
						case 1095 :
						case 1096 :
						case 1097 :
						case 1099 :
						case 1100 :
						case 1101 :
						case 1102 :
						case 1103 :
						case 1104 :
						case 1106 :
						case 1107 :
						case 1109 :
						case 1110 :
						case 1114 :
						case 1115 :
						case 1121 :
						case 1122 :
						case 1123 :
						case 1124 :
						case 1125 :
						case 1129 :
						case 1130 :
						case 1131 :
						case 1132 :
						case 1133 :
						case 1137 :
						case 1138 :
						case 1139 :
						case 1140 :
						case 1141 :
						case 1145 :
						case 1146 :
						case 1147 :
						case 1148 :
						case 1149 :
						case 1150 :
						case 1152 :
						case 1154 :
						case 1156 :
						case 1159 :
						case 1160 :
						case 1161 :
						case 1165 :
						case 1166 :
						case 1167 :
						case 1169 :
						case 1170 :
						case 1171 :
						case 1173 :
						case 1174 :
						case 1175 :
						case 1177 :
						case 1178 :
						case 1179 :
						case 1180 :
						case 1181 :
						case 1183 :
						case 1185 :
						case 1187 :
						case 1190 :
						case 1191 :
						case 1192 :
						case 1196 :
						case 1197 :
						case 1198 :
							monitor.wait();
							break;
						case 1007:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1044;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1010:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1036;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1013:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1027;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1016:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1018;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1017:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 759;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1018:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1020;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1019:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 760;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1025:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 764;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1026:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1018;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1027:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1030;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1028:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 766;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1029:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1020;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1035:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 769;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1036:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1038;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1037:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 770;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1043:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 773;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1044:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1046;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1045:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 774;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1051:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 777;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1052:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1054;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1053:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 778;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1062:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1207;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1065:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1176;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1068:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1143;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1071:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1098;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1073:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1094;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1075:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1090;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1077:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1085;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1079:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1080;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1080:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1081;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1084:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1080;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1085:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1087;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1086:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1081;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1090:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1091;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1094:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1095;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1098:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1099;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1105:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1135;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1108:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1127;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1111:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1118;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1112:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1113;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1113:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1114;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1116:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1085;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1117:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1113;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1118:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1121;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1119:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1087;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1120:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1114;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1126:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1090;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1127:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1129;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1128:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1091;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1134:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1094;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1135:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1137;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1136:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1095;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1142:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1098;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1143:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1145;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1144:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1099;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1151:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1172;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1153:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1168;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1155:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1163;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1157:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1158;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1158:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1159;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1162:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1158;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1163:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1165;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1164:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1159;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1168:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1169;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1172:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1173;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1176:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1177;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1182:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1203;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1184:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1199;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1186:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1194;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1188:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1189;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1189:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1190;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1193:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1189;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1194:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1196;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1195:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1190;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1199:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1200;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1200_1399(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1200 :
						case 1201 :
						case 1202 :
						case 1204 :
						case 1205 :
						case 1206 :
						case 1208 :
						case 1209 :
						case 1210 :
						case 1211 :
						case 1212 :
						case 1214 :
						case 1216 :
						case 1218 :
						case 1219 :
						case 1222 :
						case 1223 :
						case 1224 :
						case 1225 :
						case 1229 :
						case 1230 :
						case 1231 :
						case 1233 :
						case 1234 :
						case 1235 :
						case 1237 :
						case 1238 :
						case 1239 :
						case 1241 :
						case 1242 :
						case 1243 :
						case 1244 :
						case 1245 :
						case 1246 :
						case 1247 :
						case 1249 :
						case 1250 :
						case 1252 :
						case 1253 :
						case 1255 :
						case 1256 :
						case 1258 :
						case 1260 :
						case 1262 :
						case 1264 :
						case 1267 :
						case 1268 :
						case 1269 :
						case 1273 :
						case 1274 :
						case 1275 :
						case 1277 :
						case 1278 :
						case 1279 :
						case 1281 :
						case 1282 :
						case 1283 :
						case 1285 :
						case 1286 :
						case 1287 :
						case 1288 :
						case 1289 :
						case 1290 :
						case 1292 :
						case 1293 :
						case 1295 :
						case 1296 :
						case 1300 :
						case 1301 :
						case 1307 :
						case 1308 :
						case 1309 :
						case 1310 :
						case 1311 :
						case 1315 :
						case 1316 :
						case 1317 :
						case 1318 :
						case 1319 :
						case 1323 :
						case 1324 :
						case 1325 :
						case 1326 :
						case 1327 :
						case 1331 :
						case 1332 :
						case 1333 :
						case 1334 :
						case 1335 :
						case 1336 :
						case 1338 :
						case 1340 :
						case 1342 :
						case 1345 :
						case 1346 :
						case 1347 :
						case 1351 :
						case 1352 :
						case 1353 :
						case 1355 :
						case 1356 :
						case 1357 :
						case 1359 :
						case 1360 :
						case 1361 :
						case 1363 :
						case 1364 :
						case 1365 :
						case 1366 :
						case 1367 :
						case 1369 :
						case 1371 :
						case 1373 :
						case 1376 :
						case 1377 :
						case 1378 :
						case 1382 :
						case 1383 :
						case 1384 :
						case 1386 :
						case 1387 :
						case 1388 :
						case 1390 :
						case 1391 :
						case 1392 :
						case 1394 :
						case 1395 :
						case 1396 :
						case 1397 :
						case 1398 :
							monitor.wait();
							break;
						case 1203:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1204;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1207:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1208;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1213:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1236;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1215:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1232;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1217:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1227;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1220:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1221;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1221:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1222;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1226:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1221;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1227:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1229;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1228:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1222;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1232:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1233;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1236:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1237;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1240:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1241;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1248:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1393;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1251:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1362;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1254:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1329;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1257:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1284;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1259:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1280;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1261:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1276;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1263:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1271;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1265:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1266;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1266:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1267;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1270:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1266;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1271:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1273;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1272:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1267;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1276:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1277;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1280:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1281;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1284:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1285;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1291:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1321;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1294:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1313;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1297:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1304;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1298:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1299;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1299:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1300;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1302:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1271;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1303:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1299;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1304:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1307;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1305:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1273;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1306:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1300;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1312:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1276;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1313:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1315;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1314:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1277;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1320:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1280;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1321:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1323;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1322:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1281;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1328:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1284;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1329:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1331;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1330:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1285;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1337:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1358;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1339:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1354;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1341:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1349;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1343:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1344;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1344:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1345;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1348:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1344;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1349:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1351;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1350:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1345;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1354:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1355;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1358:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1359;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1362:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1363;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1368:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1389;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1370:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1385;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1372:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1380;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1374:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1375;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1375:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1376;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1379:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1375;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1380:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1382;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1381:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1376;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1385:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1386;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1389:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1390;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1393:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1394;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1399:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1422;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1400_1599(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1400 :
						case 1402 :
						case 1404 :
						case 1405 :
						case 1408 :
						case 1409 :
						case 1410 :
						case 1411 :
						case 1415 :
						case 1416 :
						case 1417 :
						case 1419 :
						case 1420 :
						case 1421 :
						case 1423 :
						case 1424 :
						case 1425 :
						case 1427 :
						case 1428 :
						case 1429 :
						case 1430 :
						case 1431 :
						case 1432 :
						case 1433 :
						case 1434 :
						case 1435 :
						case 1437 :
						case 1438 :
						case 1440 :
						case 1441 :
						case 1443 :
						case 1444 :
						case 1446 :
						case 1448 :
						case 1450 :
						case 1452 :
						case 1455 :
						case 1456 :
						case 1457 :
						case 1461 :
						case 1462 :
						case 1463 :
						case 1465 :
						case 1466 :
						case 1467 :
						case 1469 :
						case 1470 :
						case 1471 :
						case 1473 :
						case 1474 :
						case 1475 :
						case 1476 :
						case 1477 :
						case 1478 :
						case 1480 :
						case 1481 :
						case 1483 :
						case 1484 :
						case 1488 :
						case 1489 :
						case 1495 :
						case 1496 :
						case 1497 :
						case 1498 :
						case 1499 :
						case 1503 :
						case 1504 :
						case 1505 :
						case 1506 :
						case 1507 :
						case 1511 :
						case 1512 :
						case 1513 :
						case 1514 :
						case 1515 :
						case 1519 :
						case 1520 :
						case 1521 :
						case 1522 :
						case 1523 :
						case 1524 :
						case 1526 :
						case 1528 :
						case 1530 :
						case 1533 :
						case 1534 :
						case 1535 :
						case 1539 :
						case 1540 :
						case 1541 :
						case 1543 :
						case 1544 :
						case 1545 :
						case 1547 :
						case 1548 :
						case 1549 :
						case 1551 :
						case 1552 :
						case 1553 :
						case 1554 :
						case 1555 :
						case 1557 :
						case 1559 :
						case 1561 :
						case 1564 :
						case 1565 :
						case 1566 :
						case 1570 :
						case 1571 :
						case 1572 :
						case 1574 :
						case 1575 :
						case 1576 :
						case 1578 :
						case 1579 :
						case 1580 :
						case 1582 :
						case 1583 :
						case 1584 :
						case 1585 :
						case 1586 :
						case 1587 :
						case 1588 :
						case 1590 :
						case 1592 :
						case 1594 :
						case 1595 :
						case 1598 :
						case 1599 :
							monitor.wait();
							break;
						case 1401:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1418;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1403:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1413;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1406:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1407;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1407:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1408;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1412:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1407;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1413:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1415;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1414:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1408;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1418:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1419;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1422:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1423;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1426:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1427;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1436:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1581;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1439:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1550;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1442:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1517;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1445:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1472;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1447:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1468;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1449:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1464;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1451:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1459;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1453:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1454;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1454:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1455;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1458:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1454;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1459:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1461;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1460:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1455;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1464:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1465;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1468:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1469;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1472:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1473;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1479:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1509;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1482:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1501;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1485:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1492;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1486:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1487;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1487:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1488;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1490:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1459;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1491:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1487;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1492:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1495;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1493:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1461;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1494:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1488;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1500:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1464;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1501:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1503;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1502:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1465;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1508:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1468;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1509:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1511;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1510:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1469;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1516:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1472;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1517:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1519;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1518:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1473;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1525:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1546;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1527:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1542;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1529:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1537;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1531:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1532;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1532:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1533;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1536:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1532;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1537:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1539;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1538:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1533;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1542:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1543;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1546:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1547;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1550:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1551;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1556:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1577;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1558:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1573;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1560:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1568;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1562:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1563;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1563:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1564;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1567:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1563;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1568:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1570;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1569:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1564;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1573:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1574;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1577:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1578;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1581:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1582;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1589:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1612;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1591:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1608;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1593:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1603;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1596:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1597;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1597:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1598;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1600_1624(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1600 :
						case 1601 :
						case 1605 :
						case 1606 :
						case 1607 :
						case 1609 :
						case 1610 :
						case 1611 :
						case 1613 :
						case 1614 :
						case 1615 :
						case 1617 :
						case 1619 :
						case 1620 :
						case 1621 :
						case 1622 :
						case 1623 :
							monitor.wait();
							break;
						case 1602:
							if (queueFrommasterToresid_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1597;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterToresid_0_.take());
							}
							monitor.wait();
							break;
						case 1603:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1605;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1604:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1598;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1608:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1609;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1612:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1613;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1616:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1617;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1618:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1619;
									queueFromresid_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				@Override
				public <Any, AnyInput> Optional<Any> exchange(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					synchronized (monitor){
						while (true){
							if (state >=0 && state <= 199){
								var result = exchange_0_199(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=200 && state <= 399){
								var result = exchange_200_399(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=400 && state <= 599){
								var result = exchange_400_599(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=600 && state <= 799){
								var result = exchange_600_799(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=800 && state <= 999){
								var result = exchange_800_999(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1000 && state <= 1199){
								var result = exchange_1000_1199(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1200 && state <= 1399){
								var result = exchange_1200_1399(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1400 && state <= 1599){
								var result = exchange_1400_1599(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1600 && state <= 1624){
								var result = exchange_1600_1624(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
						}
					}
					
				}
			};
			case "rprj_0_": return new IEnvironment() {
				
				@Override
				public String getName(){
					return environmentName;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_0_199(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 0 :
						case 1 :
						case 2 :
						case 4 :
						case 5 :
						case 6 :
						case 8 :
						case 9 :
						case 10 :
						case 11 :
						case 12 :
						case 13 :
						case 15 :
						case 16 :
						case 17 :
						case 19 :
						case 20 :
						case 21 :
						case 23 :
						case 24 :
						case 26 :
						case 27 :
						case 29 :
						case 30 :
						case 32 :
						case 33 :
						case 35 :
						case 37 :
						case 40 :
						case 42 :
						case 43 :
						case 44 :
						case 45 :
						case 46 :
						case 53 :
						case 60 :
						case 66 :
						case 71 :
						case 75 :
						case 78 :
						case 81 :
						case 82 :
						case 83 :
						case 85 :
						case 86 :
						case 87 :
						case 88 :
						case 93 :
						case 94 :
						case 97 :
						case 98 :
						case 99 :
						case 101 :
						case 102 :
						case 103 :
						case 104 :
						case 105 :
						case 106 :
						case 107 :
						case 108 :
						case 116 :
						case 118 :
						case 121 :
						case 124 :
						case 125 :
						case 126 :
						case 128 :
						case 129 :
						case 130 :
						case 131 :
						case 136 :
						case 138 :
						case 141 :
						case 142 :
						case 143 :
						case 144 :
						case 145 :
						case 146 :
						case 147 :
						case 152 :
						case 153 :
						case 154 :
						case 155 :
						case 156 :
						case 157 :
						case 158 :
						case 159 :
						case 160 :
						case 161 :
						case 162 :
						case 163 :
						case 174 :
						case 177 :
						case 181 :
						case 184 :
						case 187 :
						case 188 :
						case 189 :
						case 191 :
						case 192 :
						case 193 :
						case 194 :
						case 199 :
							monitor.wait();
							break;
						case 3:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1586;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 7:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1588;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 14:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1398;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 18:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1212;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 22:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1006;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 25:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 751;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 28:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 720;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 31:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 689;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 34:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 643;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 36:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 38;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 38:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 40;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 39:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 41;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 41:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 43;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 47:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 53;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 48:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 60;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 49:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 315;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 50:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 427;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 51:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 507;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 52:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 559;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 54:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 592;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 55:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 623;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 56:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 66;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 57:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 177;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 58:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 225;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 59:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 261;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 61:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 286;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 62:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 311;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 63:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 71;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 64:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 118;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 65:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 138;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 67:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 155;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 68:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 174;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 69:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 75;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 70:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 94;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 72:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 103;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 73:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 116;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 74:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 78;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 76:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 86;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 77:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 93;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 79:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 81;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 80:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 85;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 84:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 83;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 89:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 81;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 90:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 88;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 91:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 83;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 92:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 85;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 95:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 97;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 96:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 101;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 100:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 99;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 109:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 86;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 110:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 97;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 111:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 106;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 112:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 88;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 113:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 99;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 114:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 93;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 115:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 101;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 117:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 121;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 119:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 129;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 120:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 136;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 122:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 124;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 123:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 128;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 127:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 126;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 132:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 124;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 133:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 131;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 134:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 126;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 135:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 128;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 137:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 94;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 139:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 142;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 140:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 152;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 148:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 97;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 149:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 145;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 150:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 99;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 151:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 101;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 164:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 103;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 165:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 129;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 166:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 142;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 167:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 159;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 168:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 106;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 169:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 131;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 170:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 145;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 171:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 116;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 172:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 136;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 173:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 152;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 175:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 181;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 176:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 200;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 178:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 209;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 179:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 222;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 180:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 184;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 182:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 192;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 183:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 199;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 185:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 187;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 186:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 191;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 190:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 189;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 195:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 187;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 196:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 194;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 197:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 189;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 198:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 191;
								return Optional.empty();
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_200_399(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 200 :
						case 203 :
						case 204 :
						case 205 :
						case 207 :
						case 208 :
						case 209 :
						case 210 :
						case 211 :
						case 212 :
						case 213 :
						case 214 :
						case 222 :
						case 225 :
						case 229 :
						case 232 :
						case 233 :
						case 234 :
						case 235 :
						case 236 :
						case 237 :
						case 238 :
						case 243 :
						case 244 :
						case 245 :
						case 246 :
						case 247 :
						case 248 :
						case 249 :
						case 250 :
						case 258 :
						case 261 :
						case 264 :
						case 265 :
						case 266 :
						case 267 :
						case 268 :
						case 269 :
						case 270 :
						case 271 :
						case 272 :
						case 273 :
						case 274 :
						case 282 :
						case 283 :
						case 284 :
						case 285 :
						case 286 :
						case 287 :
						case 288 :
						case 289 :
						case 290 :
						case 291 :
						case 292 :
						case 293 :
						case 294 :
						case 295 :
						case 296 :
						case 297 :
						case 311 :
						case 315 :
						case 320 :
						case 324 :
						case 327 :
						case 330 :
						case 331 :
						case 332 :
						case 334 :
						case 335 :
						case 336 :
						case 337 :
						case 342 :
						case 343 :
						case 346 :
						case 347 :
						case 348 :
						case 350 :
						case 351 :
						case 352 :
						case 353 :
						case 354 :
						case 355 :
						case 356 :
						case 357 :
						case 365 :
						case 367 :
						case 370 :
						case 373 :
						case 374 :
						case 375 :
						case 377 :
						case 378 :
						case 379 :
						case 380 :
						case 385 :
						case 387 :
						case 390 :
						case 391 :
						case 392 :
						case 393 :
						case 394 :
						case 395 :
						case 396 :
							monitor.wait();
							break;
						case 201:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 203;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 202:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 207;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 206:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 205;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 215:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 192;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 216:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 203;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 217:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 212;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 218:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 194;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 219:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 205;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 220:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 199;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 221:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 207;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 223:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 118;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 224:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 229;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 226:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 245;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 227:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 258;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 228:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 121;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 230:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 233;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 231:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 243;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 239:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 124;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 240:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 236;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 241:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 126;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 242:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 128;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 251:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 129;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 252:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 233;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 253:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 248;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 254:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 131;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 255:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 236;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 256:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 136;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 257:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 243;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 259:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 138;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 260:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 200;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 262:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 266;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 263:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 282;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 275:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 142;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 276:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 203;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 277:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 270;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 278:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 145;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 279:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 205;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 280:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 152;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 281:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 207;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 298:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 155;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 299:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 209;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 300:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 245;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 301:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 266;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 302:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 291;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 303:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 159;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 304:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 212;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 305:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 248;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 306:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 270;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 307:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 174;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 308:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 222;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 309:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 258;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 310:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 282;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 312:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 320;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 313:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 367;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 314:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 387;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 316:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 404;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 317:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 423;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 318:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 324;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 319:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 343;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 321:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 352;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 322:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 365;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 323:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 327;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 325:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 335;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 326:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 342;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 328:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 330;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 329:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 334;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 333:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 332;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 338:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 330;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 339:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 337;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 340:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 332;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 341:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 334;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 344:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 346;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 345:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 350;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 349:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 348;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 358:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 335;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 359:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 346;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 360:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 355;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 361:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 337;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 362:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 348;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 363:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 342;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 364:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 350;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 366:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 370;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 368:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 378;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 369:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 385;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 371:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 373;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 372:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 377;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 376:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 375;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 381:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 373;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 382:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 380;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 383:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 375;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 384:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 377;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 386:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 343;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 388:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 391;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 389:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 401;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 397:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 346;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 398:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 394;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 399:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 348;
								return Optional.empty();
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_400_599(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 401 :
						case 402 :
						case 403 :
						case 404 :
						case 405 :
						case 406 :
						case 407 :
						case 408 :
						case 409 :
						case 410 :
						case 411 :
						case 412 :
						case 423 :
						case 427 :
						case 432 :
						case 436 :
						case 439 :
						case 440 :
						case 441 :
						case 442 :
						case 443 :
						case 444 :
						case 445 :
						case 450 :
						case 451 :
						case 452 :
						case 453 :
						case 454 :
						case 455 :
						case 456 :
						case 457 :
						case 465 :
						case 467 :
						case 470 :
						case 471 :
						case 472 :
						case 473 :
						case 474 :
						case 475 :
						case 476 :
						case 481 :
						case 482 :
						case 483 :
						case 484 :
						case 485 :
						case 486 :
						case 487 :
						case 488 :
						case 489 :
						case 490 :
						case 491 :
						case 492 :
						case 503 :
						case 507 :
						case 512 :
						case 515 :
						case 516 :
						case 517 :
						case 518 :
						case 519 :
						case 520 :
						case 521 :
						case 522 :
						case 523 :
						case 524 :
						case 525 :
						case 533 :
						case 534 :
						case 535 :
						case 536 :
						case 537 :
						case 538 :
						case 539 :
						case 540 :
						case 541 :
						case 542 :
						case 543 :
						case 544 :
						case 555 :
						case 559 :
						case 562 :
						case 563 :
						case 564 :
						case 565 :
						case 566 :
						case 567 :
						case 568 :
						case 569 :
						case 570 :
						case 571 :
						case 572 :
						case 573 :
						case 574 :
						case 575 :
						case 576 :
						case 587 :
						case 588 :
						case 589 :
						case 590 :
						case 591 :
						case 592 :
						case 593 :
						case 594 :
						case 595 :
						case 596 :
						case 597 :
						case 598 :
						case 599 :
							monitor.wait();
							break;
						case 400:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 350;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 413:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 352;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 414:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 378;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 415:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 391;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 416:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 408;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 417:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 355;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 418:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 380;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 419:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 394;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 420:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 365;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 421:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 385;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 422:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 401;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 424:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 177;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 425:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 432;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 426:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 467;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 428:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 484;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 429:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 503;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 430:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 181;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 431:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 436;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 433:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 452;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 434:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 465;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 435:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 184;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 437:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 440;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 438:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 450;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 446:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 187;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 447:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 443;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 448:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 189;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 449:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 191;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 458:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 192;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 459:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 440;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 460:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 455;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 461:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 194;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 462:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 443;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 463:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 199;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 464:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 450;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 466:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 200;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 468:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 471;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 469:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 481;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 477:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 203;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 478:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 474;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 479:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 205;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 480:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 207;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 493:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 209;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 494:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 452;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 495:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 471;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 496:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 488;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 497:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 212;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 498:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 455;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 499:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 474;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 500:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 222;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 501:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 465;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 502:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 481;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 504:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 225;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 505:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 367;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 506:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 512;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 508:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 536;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 509:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 555;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 510:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 229;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 511:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 370;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 513:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 517;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 514:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 533;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 526:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 233;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 527:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 373;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 528:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 521;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 529:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 236;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 530:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 375;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 531:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 243;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 532:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 377;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 545:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 245;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 546:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 378;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 547:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 517;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 548:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 540;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 549:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 248;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 550:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 380;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 551:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 521;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 552:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 258;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 553:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 385;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 554:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 533;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 556:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 261;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 557:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 387;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 558:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 467;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 560:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 565;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 561:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 587;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 577:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 266;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 578:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 391;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 579:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 471;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 580:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 570;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 581:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 270;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 582:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 394;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 583:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 474;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 584:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 282;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 585:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 401;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 586:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 481;
								return Optional.empty();
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_600_799(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 600 :
						case 601 :
						case 602 :
						case 603 :
						case 604 :
						case 605 :
						case 606 :
						case 623 :
						case 624 :
						case 625 :
						case 626 :
						case 627 :
						case 628 :
						case 629 :
						case 633 :
						case 638 :
						case 639 :
						case 640 :
						case 646 :
						case 648 :
						case 649 :
						case 650 :
						case 651 :
						case 652 :
						case 653 :
						case 654 :
						case 655 :
						case 656 :
						case 657 :
						case 658 :
						case 659 :
						case 660 :
						case 661 :
						case 662 :
						case 663 :
						case 664 :
						case 672 :
						case 681 :
						case 682 :
						case 683 :
						case 684 :
						case 685 :
						case 686 :
						case 687 :
						case 691 :
						case 693 :
						case 694 :
						case 695 :
						case 696 :
						case 697 :
						case 698 :
						case 699 :
						case 700 :
						case 701 :
						case 702 :
						case 703 :
						case 704 :
						case 705 :
						case 706 :
						case 710 :
						case 715 :
						case 716 :
						case 717 :
						case 718 :
						case 722 :
						case 724 :
						case 725 :
						case 726 :
						case 727 :
						case 728 :
						case 729 :
						case 730 :
						case 731 :
						case 732 :
						case 733 :
						case 734 :
						case 735 :
						case 736 :
						case 737 :
						case 741 :
						case 746 :
						case 747 :
						case 748 :
						case 749 :
						case 753 :
						case 755 :
						case 756 :
						case 757 :
						case 758 :
						case 759 :
						case 760 :
						case 761 :
						case 762 :
						case 763 :
						case 764 :
						case 765 :
						case 766 :
						case 767 :
						case 768 :
						case 772 :
						case 777 :
						case 778 :
						case 779 :
						case 780 :
						case 782 :
						case 783 :
						case 785 :
						case 786 :
						case 787 :
						case 789 :
						case 790 :
						case 791 :
						case 793 :
						case 795 :
						case 798 :
							monitor.wait();
							break;
						case 607:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 286;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 608:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 404;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 609:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 484;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 610:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 536;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 611:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 565;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 612:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 598;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 613:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 291;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 614:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 408;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 615:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 488;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 616:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 540;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 617:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 570;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 618:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 311;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 619:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 423;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 620:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 503;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 621:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 555;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 622:
							if (isCloseAction) {
								monitor.notifyAll();
								state = 587;
								return Optional.empty();
							}
							monitor.wait();
							break;
						case 630:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 625;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 631:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 627;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 632:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 633;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 634:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 630;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 635:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 631;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 636:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 637;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 637:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 633;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 641:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 637;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 642:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 38;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 643:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 646;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 644:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 647;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 645:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 40;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 647:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 650;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 665:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 43;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 666:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 657;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 667:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 625;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 668:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 660;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 669:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 627;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 670:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 672;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 671:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 633;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 673:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 41;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 674:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 666;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 675:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 630;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 676:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 668;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 677:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 631;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 678:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 680;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 679:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 637;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 680:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 672;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 688:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 680;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 689:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 691;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 690:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 692;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 692:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 694;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 707:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 702;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 708:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 704;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 709:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 710;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 711:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 707;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 712:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 708;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 713:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 714;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 714:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 710;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 719:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 714;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 720:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 722;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 721:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 723;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 723:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 725;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 738:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 733;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 739:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 735;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 740:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 741;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 742:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 738;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 743:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 739;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 744:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 745;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 745:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 741;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 750:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 745;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 751:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 753;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 752:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 754;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 754:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 756;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 769:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 764;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 770:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 766;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 771:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 772;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 773:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 769;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 774:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 770;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 775:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 776;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 776:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 772;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 781:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 776;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 784:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 951;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 788:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 896;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 792:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 826;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 794:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 796;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 796:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 798;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 797:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 799;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 799:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 801;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_800_999(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 800 :
						case 801 :
						case 802 :
						case 803 :
						case 804 :
						case 805 :
						case 806 :
						case 807 :
						case 808 :
						case 809 :
						case 810 :
						case 811 :
						case 815 :
						case 820 :
						case 821 :
						case 822 :
						case 830 :
						case 832 :
						case 833 :
						case 834 :
						case 835 :
						case 836 :
						case 837 :
						case 838 :
						case 839 :
						case 840 :
						case 841 :
						case 842 :
						case 843 :
						case 844 :
						case 845 :
						case 846 :
						case 847 :
						case 848 :
						case 849 :
						case 850 :
						case 851 :
						case 852 :
						case 853 :
						case 854 :
						case 855 :
						case 856 :
						case 857 :
						case 858 :
						case 870 :
						case 883 :
						case 884 :
						case 885 :
						case 886 :
						case 887 :
						case 888 :
						case 889 :
						case 890 :
						case 891 :
						case 892 :
						case 893 :
						case 899 :
						case 901 :
						case 902 :
						case 903 :
						case 904 :
						case 905 :
						case 906 :
						case 907 :
						case 908 :
						case 909 :
						case 910 :
						case 911 :
						case 912 :
						case 913 :
						case 914 :
						case 915 :
						case 916 :
						case 917 :
						case 918 :
						case 919 :
						case 920 :
						case 921 :
						case 922 :
						case 923 :
						case 924 :
						case 932 :
						case 941 :
						case 942 :
						case 943 :
						case 944 :
						case 945 :
						case 946 :
						case 947 :
						case 948 :
						case 954 :
						case 956 :
						case 957 :
						case 958 :
						case 959 :
						case 960 :
						case 961 :
						case 962 :
						case 963 :
						case 964 :
						case 965 :
						case 966 :
						case 967 :
						case 968 :
						case 969 :
						case 970 :
						case 971 :
						case 972 :
						case 973 :
						case 974 :
						case 975 :
						case 976 :
						case 977 :
						case 978 :
						case 979 :
						case 987 :
						case 996 :
						case 997 :
						case 998 :
						case 999 :
							monitor.wait();
							break;
						case 812:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 807;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 813:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 809;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 814:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 815;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 816:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 812;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 817:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 813;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 818:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 819;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 819:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 815;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 823:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 819;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 824:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 643;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 825:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 796;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 826:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 830;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 827:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 831;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 828:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 646;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 829:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 798;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 831:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 835;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 859:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 650;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 860:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 801;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 861:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 848;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 862:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 657;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 863:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 807;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 864:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 852;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 865:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 660;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 866:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 809;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 867:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 870;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 868:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 672;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 869:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 815;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 871:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 647;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 872:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 799;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 873:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 861;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 874:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 666;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 875:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 812;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 876:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 864;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 877:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 668;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 878:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 813;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 879:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 882;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 880:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 680;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 881:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 819;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 882:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 870;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 894:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 882;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 895:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 689;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 896:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 899;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 897:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 900;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 898:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 691;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 900:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 903;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 925:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 694;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 926:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 917;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 927:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 702;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 928:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 920;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 929:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 704;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 930:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 932;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 931:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 710;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 933:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 692;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 934:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 926;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 935:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 707;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 936:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 928;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 937:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 708;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 938:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 940;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 939:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 714;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 940:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 932;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 949:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 940;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 950:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 720;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 951:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 954;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 952:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 955;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 953:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 722;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 955:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 958;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 980:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 725;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 981:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 972;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 982:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 733;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 983:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 975;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 984:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 735;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 985:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 987;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 986:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 741;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 988:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 723;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 989:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 981;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 990:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 738;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 991:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 983;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 992:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 739;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 993:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 995;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 994:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 745;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 995:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 987;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1000_1199(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1000 :
						case 1001 :
						case 1002 :
						case 1003 :
						case 1009 :
						case 1011 :
						case 1012 :
						case 1013 :
						case 1014 :
						case 1015 :
						case 1016 :
						case 1017 :
						case 1018 :
						case 1019 :
						case 1020 :
						case 1021 :
						case 1022 :
						case 1023 :
						case 1024 :
						case 1025 :
						case 1026 :
						case 1027 :
						case 1028 :
						case 1029 :
						case 1030 :
						case 1031 :
						case 1032 :
						case 1033 :
						case 1034 :
						case 1042 :
						case 1051 :
						case 1052 :
						case 1053 :
						case 1054 :
						case 1055 :
						case 1056 :
						case 1057 :
						case 1058 :
						case 1060 :
						case 1062 :
						case 1063 :
						case 1065 :
						case 1066 :
						case 1068 :
						case 1069 :
						case 1071 :
						case 1074 :
						case 1076 :
						case 1077 :
						case 1078 :
						case 1079 :
						case 1080 :
						case 1081 :
						case 1082 :
						case 1083 :
						case 1084 :
						case 1085 :
						case 1086 :
						case 1087 :
						case 1088 :
						case 1089 :
						case 1093 :
						case 1098 :
						case 1099 :
						case 1100 :
						case 1101 :
						case 1107 :
						case 1109 :
						case 1110 :
						case 1111 :
						case 1112 :
						case 1113 :
						case 1114 :
						case 1115 :
						case 1116 :
						case 1117 :
						case 1118 :
						case 1119 :
						case 1120 :
						case 1121 :
						case 1122 :
						case 1123 :
						case 1124 :
						case 1125 :
						case 1133 :
						case 1142 :
						case 1143 :
						case 1144 :
						case 1145 :
						case 1146 :
						case 1147 :
						case 1148 :
						case 1152 :
						case 1154 :
						case 1155 :
						case 1156 :
						case 1157 :
						case 1158 :
						case 1159 :
						case 1160 :
						case 1161 :
						case 1162 :
						case 1163 :
						case 1164 :
						case 1165 :
						case 1166 :
						case 1167 :
						case 1171 :
						case 1176 :
						case 1177 :
						case 1178 :
						case 1179 :
						case 1183 :
						case 1185 :
						case 1186 :
						case 1187 :
						case 1188 :
						case 1189 :
						case 1190 :
						case 1191 :
						case 1192 :
						case 1193 :
						case 1194 :
						case 1195 :
						case 1196 :
						case 1197 :
						case 1198 :
							monitor.wait();
							break;
						case 1004:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 995;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1005:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 751;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1006:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1009;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1007:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1010;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1008:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 753;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1010:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1013;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1035:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 756;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1036:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1027;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1037:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 764;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1038:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1030;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1039:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 766;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1040:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1042;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1041:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 772;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1043:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 754;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1044:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1036;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1045:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 769;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1046:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1038;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1047:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 770;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1048:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1050;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1049:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 776;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1050:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1042;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1059:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1050;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1061:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1181;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1064:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1150;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1067:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1104;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1070:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1072;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1072:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1074;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1073:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1075;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1075:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1077;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1090:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1085;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1091:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1087;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1092:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1093;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1094:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1090;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1095:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1091;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1096:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1097;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1097:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1093;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1102:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1097;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1103:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1072;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1104:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1107;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1105:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1108;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1106:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1074;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1108:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1111;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1126:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1077;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1127:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1118;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1128:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1085;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1129:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1121;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1130:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1087;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1131:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1133;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1132:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1093;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1134:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1075;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1135:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1127;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1136:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1090;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1137:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1129;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1138:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1091;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1139:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1141;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1140:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1097;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1141:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1133;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1149:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1141;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1150:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1152;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1151:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1153;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1153:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1155;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1168:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1163;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1169:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1165;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1170:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1171;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1172:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1168;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1173:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1169;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1174:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1175;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1175:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1171;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1180:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1175;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1181:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1183;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1182:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1184;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1184:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1186;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1199:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1194;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1200_1399(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1202 :
						case 1207 :
						case 1208 :
						case 1209 :
						case 1210 :
						case 1214 :
						case 1216 :
						case 1217 :
						case 1218 :
						case 1219 :
						case 1220 :
						case 1221 :
						case 1222 :
						case 1223 :
						case 1224 :
						case 1225 :
						case 1226 :
						case 1227 :
						case 1228 :
						case 1229 :
						case 1230 :
						case 1231 :
						case 1235 :
						case 1240 :
						case 1241 :
						case 1242 :
						case 1243 :
						case 1244 :
						case 1246 :
						case 1248 :
						case 1249 :
						case 1251 :
						case 1252 :
						case 1254 :
						case 1255 :
						case 1257 :
						case 1260 :
						case 1262 :
						case 1263 :
						case 1264 :
						case 1265 :
						case 1266 :
						case 1267 :
						case 1268 :
						case 1269 :
						case 1270 :
						case 1271 :
						case 1272 :
						case 1273 :
						case 1274 :
						case 1275 :
						case 1279 :
						case 1284 :
						case 1285 :
						case 1286 :
						case 1287 :
						case 1293 :
						case 1295 :
						case 1296 :
						case 1297 :
						case 1298 :
						case 1299 :
						case 1300 :
						case 1301 :
						case 1302 :
						case 1303 :
						case 1304 :
						case 1305 :
						case 1306 :
						case 1307 :
						case 1308 :
						case 1309 :
						case 1310 :
						case 1311 :
						case 1319 :
						case 1328 :
						case 1329 :
						case 1330 :
						case 1331 :
						case 1332 :
						case 1333 :
						case 1334 :
						case 1338 :
						case 1340 :
						case 1341 :
						case 1342 :
						case 1343 :
						case 1344 :
						case 1345 :
						case 1346 :
						case 1347 :
						case 1348 :
						case 1349 :
						case 1350 :
						case 1351 :
						case 1352 :
						case 1353 :
						case 1357 :
						case 1362 :
						case 1363 :
						case 1364 :
						case 1365 :
						case 1369 :
						case 1371 :
						case 1372 :
						case 1373 :
						case 1374 :
						case 1375 :
						case 1376 :
						case 1377 :
						case 1378 :
						case 1379 :
						case 1380 :
						case 1381 :
						case 1382 :
						case 1383 :
						case 1384 :
						case 1388 :
						case 1393 :
						case 1394 :
						case 1395 :
						case 1396 :
							monitor.wait();
							break;
						case 1200:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1196;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1201:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1202;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1203:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1199;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1204:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1200;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1205:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1206;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1206:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1202;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1211:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1206;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1212:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1214;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1213:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1215;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1215:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1217;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1232:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1227;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1233:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1229;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1234:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1235;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1236:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1232;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1237:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1233;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1238:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1239;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1239:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1235;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1245:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1239;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1247:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1367;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1250:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1336;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1253:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1290;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1256:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1258;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1258:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1260;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1259:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1261;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1261:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1263;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1276:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1271;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1277:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1273;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1278:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1279;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1280:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1276;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1281:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1277;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1282:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1283;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1283:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1279;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1288:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1283;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1289:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1258;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1290:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1293;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1291:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1294;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1292:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1260;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1294:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1297;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1312:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1263;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1313:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1304;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1314:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1271;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1315:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1307;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1316:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1273;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1317:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1319;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1318:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1279;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1320:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1261;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1321:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1313;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1322:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1276;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1323:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1315;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1324:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1277;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1325:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1327;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1326:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1283;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1327:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1319;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1335:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1327;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1336:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1338;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1337:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1339;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1339:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1341;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1354:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1349;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1355:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1351;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1356:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1357;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1358:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1354;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1359:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1355;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1360:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1361;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1361:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1357;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1366:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1361;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1367:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1369;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1368:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1370;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1370:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1372;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1385:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1380;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1386:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1382;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1387:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1388;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1389:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1385;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1390:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1386;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1391:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1392;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1392:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1388;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1397:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1392;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1398:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1400;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1399:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1401;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1400_1599(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1400 :
						case 1402 :
						case 1403 :
						case 1404 :
						case 1405 :
						case 1406 :
						case 1407 :
						case 1408 :
						case 1409 :
						case 1410 :
						case 1411 :
						case 1412 :
						case 1413 :
						case 1414 :
						case 1415 :
						case 1416 :
						case 1417 :
						case 1421 :
						case 1426 :
						case 1427 :
						case 1428 :
						case 1429 :
						case 1430 :
						case 1432 :
						case 1433 :
						case 1434 :
						case 1436 :
						case 1437 :
						case 1439 :
						case 1440 :
						case 1442 :
						case 1443 :
						case 1445 :
						case 1448 :
						case 1450 :
						case 1451 :
						case 1452 :
						case 1453 :
						case 1454 :
						case 1455 :
						case 1456 :
						case 1457 :
						case 1458 :
						case 1459 :
						case 1460 :
						case 1461 :
						case 1462 :
						case 1463 :
						case 1467 :
						case 1472 :
						case 1473 :
						case 1474 :
						case 1475 :
						case 1481 :
						case 1483 :
						case 1484 :
						case 1485 :
						case 1486 :
						case 1487 :
						case 1488 :
						case 1489 :
						case 1490 :
						case 1491 :
						case 1492 :
						case 1493 :
						case 1494 :
						case 1495 :
						case 1496 :
						case 1497 :
						case 1498 :
						case 1499 :
						case 1507 :
						case 1516 :
						case 1517 :
						case 1518 :
						case 1519 :
						case 1520 :
						case 1521 :
						case 1522 :
						case 1526 :
						case 1528 :
						case 1529 :
						case 1530 :
						case 1531 :
						case 1532 :
						case 1533 :
						case 1534 :
						case 1535 :
						case 1536 :
						case 1537 :
						case 1538 :
						case 1539 :
						case 1540 :
						case 1541 :
						case 1545 :
						case 1550 :
						case 1551 :
						case 1552 :
						case 1553 :
						case 1557 :
						case 1559 :
						case 1560 :
						case 1561 :
						case 1562 :
						case 1563 :
						case 1564 :
						case 1565 :
						case 1566 :
						case 1567 :
						case 1568 :
						case 1569 :
						case 1570 :
						case 1571 :
						case 1572 :
						case 1576 :
						case 1581 :
						case 1582 :
						case 1583 :
						case 1584 :
						case 1587 :
						case 1590 :
						case 1592 :
						case 1593 :
						case 1594 :
						case 1595 :
						case 1596 :
						case 1597 :
						case 1598 :
						case 1599 :
							monitor.wait();
							break;
						case 1401:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1403;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1418:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1413;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1419:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1415;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1420:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1421;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1422:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1418;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1423:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1419;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1424:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1425;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1425:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1421;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1431:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1425;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1435:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1555;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1438:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1524;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1441:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1478;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1444:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1446;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1446:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1448;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1447:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1449;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1449:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1451;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1464:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1459;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1465:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1461;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1466:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1467;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1468:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1464;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1469:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1465;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1470:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1471;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1471:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1467;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1476:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1471;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1477:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1446;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1478:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1481;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1479:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1482;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1480:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1448;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1482:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1485;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1500:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1451;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1501:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1492;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1502:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1459;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1503:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1495;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1504:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1461;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1505:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1507;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1506:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1467;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1508:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1449;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1509:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1501;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1510:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1464;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1511:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1503;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1512:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1465;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1513:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1515;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1514:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1471;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1515:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1507;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1523:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1515;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1524:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1526;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1525:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1527;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1527:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1529;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1542:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1537;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1543:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1539;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1544:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1545;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1546:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1542;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1547:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1543;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1548:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1549;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1549:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1545;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1554:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1549;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1555:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1557;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1556:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1558;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1558:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1560;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1573:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1568;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1574:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1570;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1575:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1576;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1577:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1573;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1578:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1574;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1579:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1580;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1580:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1576;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1585:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1580;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1586:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1587;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1588:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1590;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1589:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1591;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1591:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1593;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				public <Any, AnyInput> Optional<Any> exchange_1600_1624(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					switch (state){
						case 1600 :
						case 1601 :
						case 1602 :
						case 1603 :
						case 1604 :
						case 1605 :
						case 1606 :
						case 1607 :
						case 1611 :
						case 1616 :
						case 1617 :
						case 1618 :
						case 1619 :
						case 1620 :
						case 1621 :
						case 1622 :
							monitor.wait();
							break;
						case 1608:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1603;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1609:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1605;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1610:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1611;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1612:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1608;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1613:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1609;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1614:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1615;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
						case 1615:
							if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
								if (receiver == null) {
									receiver = "master";
								}
								if (receiver.equals("master")) {
									monitor.notifyAll();
									state = 1611;
									queueFromrprj_0_Tomaster.put(box.get());
									return Optional.empty();
								}
							}
							monitor.wait();
							break;
						case 1623:
							if (queueFrommasterTorprj_0_.peek() != null ) {
								monitor.notifyAll();
								state = 1615;
								// Disabling unchecked inspection: We did check the class in the if statement above
								//noinspection unchecked
								return Optional.of((Any)queueFrommasterTorprj_0_.take());
							}
							monitor.wait();
							break;
					}
					return null;
				}
				
				@Override
				public <Any, AnyInput> Optional<Any> exchange(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					synchronized (monitor){
						while (true){
							if (state >=0 && state <= 199){
								var result = exchange_0_199(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=200 && state <= 399){
								var result = exchange_200_399(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=400 && state <= 599){
								var result = exchange_400_599(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=600 && state <= 799){
								var result = exchange_600_799(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=800 && state <= 999){
								var result = exchange_800_999(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1000 && state <= 1199){
								var result = exchange_1000_1199(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1200 && state <= 1399){
								var result = exchange_1200_1399(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1400 && state <= 1599){
								var result = exchange_1400_1599(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
							if (state >=1600 && state <= 1624){
								var result = exchange_1600_1624(box, receiver, isCloseAction);
								if(result != null)
								  return (Optional<Any>) result;
							}
						}
					}
					
				}
			};
			default: throw new Exception("Unknown environment");
		}
	}
	
	@Override
	public String[] threadNames(){
		return new String[] { "interp_0_","master","resid_0_","rprj_0_","psinv_0_" };
	}
	
	@Override
	public Object[] dummies(){
		return new Object[]{"TestStringDummy"};
	}
	
	@Override
	public int getState(){
		return this.state;
	}
}
