/* !!! IMPORTANT !!!
 * !!! This code is generated from a protocol definition. !!!
 * !!! Any Changes made to this code could be overridden. !!!
 * !!! If you want to change the protocol, change its definition and regenerate this code. !!!
 **/
package nl.florianslob.modelchecking.generated;

// Import types from the API
import nl.florianslob.modelchecking.base.api.v2.*;

import java.util.Optional;
import java.util.Random;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class CGProtocol_n_4 implements IProtocol {
	private volatile int state = 0;
	private final Object monitor = this;
	
	private final BlockingQueue<Object> queueFrommasterToworker_0_ = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFrommasterToworker_1_ = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFrommasterToworker_2_ = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFrommasterToworker_3_ = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFromworker_0_Tomaster = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFromworker_2_Tomaster = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFromworker_1_Tomaster = new LinkedBlockingQueue<>(); 
	private final BlockingQueue<Object> queueFromworker_3_Tomaster = new LinkedBlockingQueue<>(); 
	
	@Override
	public IEnvironment getEnvironment(String environmentName) throws Exception{
		switch (environmentName){
			case "master": return new IEnvironment() {
				
				@Override
				public String getName(){
					return environmentName;
				}
				
				@Override
				public <Any, AnyInput> Optional<Any> exchange(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					synchronized (monitor){
						while (true){
							switch (state){
								case 0:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(4);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_","worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 4;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 3;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(4);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_","worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 8;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 7;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 6;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 5;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 10;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 12;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 11;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1369;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1368;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 10;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 3:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1368;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2335;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 11;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 4:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 12;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1369;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2335;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 5:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 46;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 48;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 47;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 6:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2183;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2184;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 46;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 7:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2183;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 47;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2488;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 8:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2184;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2488;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 48;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 9:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 15;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 16;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 14;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 10:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1371;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1372;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 11:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2337;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1371;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 12:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1372;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2337;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 13:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 18;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 20;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 19;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 17;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 14:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1374;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1375;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 15:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1374;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2339;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 16:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2339;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1375;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 17:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 23;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 22;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 21;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 18:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1378;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1379;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1376;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 19:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1378;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2342;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2340;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 20:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2342;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1379;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2518;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 21:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 26;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 25;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 22:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 25;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2344;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 23:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2344;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 26;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 24:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 28;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 29;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 25:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1381;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 26:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1381;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 27:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 32;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 31;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 30;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 28:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1383;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 29:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1383;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 30:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 33;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 34;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 31:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1386;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1384;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 32:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1386;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1489;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 33:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 36;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 34:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 36;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 35:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 38;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 36:
									monitor.wait();
									break;
								case 37:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 40;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 39;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 38:
									monitor.wait();
									break;
								case 39:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 41;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 40:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1389;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 41:
									monitor.wait();
									break;
								case 42:
									monitor.wait();
									break;
								case 43:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 44;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 44:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(4);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_","worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 7;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 8;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 5;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 6;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(4);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_","worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 4;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 3;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 45:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 52;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 50;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 51;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 46:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1182;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1183;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 47:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1182;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1334;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 48:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1183;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1334;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 49:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 56;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 54;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 55;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 53;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 50:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 997;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 996;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 51:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1148;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 996;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 52:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 997;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1148;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 53:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 59;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 57;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 58;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 54:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 719;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 720;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 717;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 55:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 942;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 719;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 940;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 56:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 942;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 720;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 986;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 57:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 61;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 62;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 58:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 687;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 61;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 59:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 62;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 687;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 60:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 64;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 65;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 61:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 656;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 62:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 656;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 63:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 68;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 67;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 66;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 64:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 625;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 65:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 625;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 66:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 70;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 69;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 67:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 579;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 577;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 68:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 579;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 616;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 69:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 72;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 70:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 72;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 71:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 74;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 72:
									monitor.wait();
									break;
								case 73:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 76;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 75;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 74:
									monitor.wait();
									break;
								case 75:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 77;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 76:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 559;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 77:
									monitor.wait();
									break;
								case 78:
									monitor.wait();
									break;
								case 79:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 80;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 80:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 84;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 81;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 82;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 83;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 81:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 90;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 91;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 89;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 82:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 89;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 303;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 304;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 83:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 389;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 390;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 303;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 84:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 476;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 390;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 475;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 85:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 92;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 391;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 305;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 477;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 86:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 392;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 306;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 93;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 478;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 87:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 393;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 479;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 307;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 94;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 88:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 394;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 95;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 308;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 480;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 89:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 97;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 96;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 90:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 200;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 96;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 91:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 242;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 200;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 92:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 98;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 201;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 243;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 93:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 99;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 244;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 202;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 94:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 203;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 100;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 245;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 95:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 101;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 204;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 246;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 96:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 102;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 97:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 102;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 98:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 103;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 162;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 99:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 163;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 104;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 100:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 164;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 105;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 101:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 106;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 165;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 102:
									monitor.wait();
									break;
								case 103:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 127;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 104:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 143;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 105:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 150;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 106:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 157;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 107:
									monitor.wait();
									break;
								case 108:
									monitor.wait();
									break;
								case 109:
									monitor.wait();
									break;
								case 110:
									monitor.wait();
									break;
								case 111:
									monitor.wait();
									break;
								case 112:
									monitor.wait();
									break;
								case 113:
									monitor.wait();
									break;
								case 114:
									monitor.wait();
									break;
								case 115:
									monitor.wait();
									break;
								case 116:
									monitor.wait();
									break;
								case 117:
									monitor.wait();
									break;
								case 118:
									monitor.wait();
									break;
								case 119:
									monitor.wait();
									break;
								case 120:
									monitor.wait();
									break;
								case 121:
									monitor.wait();
									break;
								case 122:
									monitor.wait();
									break;
								case 123:
									monitor.wait();
									break;
								case 124:
									monitor.wait();
									break;
								case 125:
									monitor.wait();
									break;
								case 126:
									monitor.wait();
									break;
								case 127:
									monitor.wait();
									break;
								case 128:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 131;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 129:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 137;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 130:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 140;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 131:
									monitor.wait();
									break;
								case 132:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 134;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 133:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 136;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 134:
									monitor.wait();
									break;
								case 135:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 136:
									monitor.wait();
									break;
								case 137:
									monitor.wait();
									break;
								case 138:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 139;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 139:
									monitor.wait();
									break;
								case 140:
									monitor.wait();
									break;
								case 141:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 142;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 142:
									monitor.wait();
									break;
								case 143:
									monitor.wait();
									break;
								case 144:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 146;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 145:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 149;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 146:
									monitor.wait();
									break;
								case 147:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 148;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 148:
									monitor.wait();
									break;
								case 149:
									monitor.wait();
									break;
								case 150:
									monitor.wait();
									break;
								case 151:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 153;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 152:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 154;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 153:
									monitor.wait();
									break;
								case 154:
									monitor.wait();
									break;
								case 155:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 156;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 156:
									monitor.wait();
									break;
								case 157:
									monitor.wait();
									break;
								case 158:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 160;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 159:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 161;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 160:
									monitor.wait();
									break;
								case 161:
									monitor.wait();
									break;
								case 162:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 127;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 163:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 143;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 164:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 150;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 165:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 157;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 166:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 131;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 167:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 137;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 168:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 140;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 169:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 134;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 170:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 136;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 171:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 172:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 139;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 173:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 142;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 174:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 146;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 175:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 149;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 176:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 148;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 177:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 153;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 178:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 154;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 179:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 156;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 180:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 160;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 181:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 161;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 182:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 166;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 183:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 167;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 129;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 184:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 168;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 130;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 185:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 132;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 169;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 186:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 133;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 170;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 187:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 188;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 189;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 188:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 189:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 190:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 138;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 172;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 191:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 141;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 173;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 192:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 144;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 174;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 193:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 175;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 145;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 194:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 147;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 176;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 195:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 177;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 151;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 196:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 152;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 178;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 197:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 179;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 155;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 198:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 158;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 180;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 199:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 181;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 159;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 200:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 102;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 201:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 103;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 205;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 202:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 104;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 206;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 203:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 207;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 105;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 204:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 208;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 106;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 205:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 127;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 206:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 143;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 207:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 150;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 208:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 157;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 209:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 131;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 210:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 137;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 211:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 140;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 212:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 134;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 213:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 136;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 214:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 215:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 139;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 216:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 142;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 217:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 146;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 218:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 149;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 219:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 148;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 220:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 153;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 221:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 154;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 222:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 156;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 223:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 160;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 224:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 161;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 225:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 209;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 226:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 129;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 210;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 227:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 130;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 211;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 228:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 212;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 132;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 229:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 133;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 213;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 230:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 231;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 188;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 231:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 232:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 215;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 138;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 233:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 216;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 141;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 234:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 217;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 144;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 235:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 145;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 218;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 236:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 147;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 219;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 237:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 220;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 151;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 238:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 152;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 221;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 239:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 222;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 155;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 240:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 223;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 158;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 241:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 159;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 224;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 242:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 102;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 243:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 205;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 247;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 244:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 248;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 206;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 245:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 207;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 249;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 246:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 250;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 208;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 247:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 127;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 248:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 143;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 249:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 150;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 250:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 157;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 251:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 131;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 252:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 137;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 253:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 140;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 254:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 134;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 255:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 136;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 256:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 257:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 139;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 258:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 142;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 259:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 146;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 260:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 149;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 261:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 148;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 262:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 153;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 263:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 154;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 264:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 156;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 265:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 160;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 266:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 161;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 267:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 209;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 251;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 268:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 252;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 210;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 269:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 211;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 253;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 270:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 254;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 212;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 271:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 255;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 213;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 272:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 273;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 231;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 273:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 274:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 215;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 257;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 275:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 216;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 258;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 276:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 259;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 217;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 277:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 218;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 260;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 278:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 261;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 219;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 279:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 262;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 220;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 280:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 221;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 263;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 281:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 222;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 264;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 282:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 265;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 223;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 283:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 266;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 224;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 284:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 225;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 182;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 267;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 285:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 183;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 268;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 226;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 286:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 269;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 184;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 227;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 287:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 270;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 185;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 228;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 288:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 186;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 229;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 271;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 289:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 292;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 290;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 291;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 290:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 188;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 189;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 291:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 231;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 188;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 292:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 273;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 231;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 293:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 274;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 190;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 232;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 294:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 233;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 275;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 191;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 295:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 234;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 192;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 276;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 296:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 193;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 235;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 277;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 297:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 278;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 236;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 194;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 298:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 195;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 237;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 279;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 299:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 196;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 238;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 280;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 300:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 281;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 239;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 197;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 301:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 282;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 198;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 240;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 302:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 283;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 199;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 241;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 303:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 309;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 96;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 304:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 309;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 242;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 305:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 310;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 351;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 98;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 306:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 99;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 311;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 352;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 307:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 312;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 353;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 100;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 308:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 313;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 354;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 101;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 309:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 102;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 310:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 103;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 314;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 311:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 315;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 104;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 312:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 105;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 313:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 106;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 317;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 314:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 127;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 315:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 143;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 316:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 150;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 317:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 157;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 318:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 131;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 319:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 137;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 320:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 140;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 321:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 134;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 322:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 136;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 323:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 324:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 139;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 325:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 142;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 326:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 146;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 327:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 149;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 328:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 148;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 329:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 153;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 330:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 154;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 331:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 156;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 332:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 160;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 333:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 161;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 334:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 318;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 335:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 129;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 319;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 336:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 130;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 320;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 337:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 321;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 132;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 338:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 322;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 133;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 339:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 188;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 340;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 340:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 341:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 324;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 138;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 342:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 141;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 325;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 343:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 144;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 326;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 344:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 145;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 327;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 345:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 328;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 147;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 346:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 329;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 151;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 347:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 152;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 330;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 348:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 155;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 331;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 349:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 158;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 332;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 350:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 159;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 333;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 351:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 247;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 314;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 352:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 315;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 248;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 353:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 249;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 354:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 250;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 317;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 355:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 251;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 318;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 356:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 319;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 252;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 357:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 320;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 253;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 358:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 321;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 254;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 359:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 255;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 322;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 360:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 273;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 340;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 361:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 257;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 324;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 362:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 258;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 325;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 363:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 259;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 326;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 364:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 327;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 260;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 365:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 328;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 261;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 366:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 262;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 329;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 367:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 263;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 330;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 368:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 331;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 264;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 369:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 265;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 332;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 370:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 333;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 266;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 371:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 182;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 355;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 334;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 372:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 335;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 356;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 183;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 373:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 184;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 357;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 336;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 374:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 337;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 185;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 358;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 375:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 186;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 338;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 359;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 376:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 377;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 378;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 290;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 377:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 340;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 188;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 378:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 340;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 273;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 379:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 190;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 341;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 361;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 380:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 342;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 362;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 191;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 381:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 363;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 192;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 343;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 382:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 193;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 364;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 344;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 383:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 345;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 365;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 194;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 384:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 366;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 195;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 346;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 385:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 367;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 347;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 196;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 386:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 368;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 197;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 348;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 387:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 349;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 198;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 369;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 388:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 370;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 199;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 350;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 389:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 96;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 200;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 390:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 309;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 415;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 391:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 310;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 416;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 395;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 392:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 417;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 396;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 311;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 393:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 418;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 312;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 397;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 394:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 398;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 313;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 419;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 395:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 103;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 205;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 396:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 206;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 104;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 397:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 105;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 207;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 398:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 208;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 106;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 399:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 209;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 400:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 210;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 129;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 401:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 130;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 211;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 402:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 212;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 132;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 403:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 213;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 133;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 404:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 231;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 188;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 405:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 138;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 215;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 406:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 141;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 216;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 407:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 144;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 217;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 408:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 145;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 218;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 409:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 219;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 147;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 410:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 220;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 151;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 411:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 221;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 152;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 412:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 155;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 222;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 413:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 158;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 223;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 414:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 224;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 159;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 415:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 102;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 416:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 420;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 314;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 417:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 315;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 421;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 418:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 422;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 419:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 423;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 317;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 420:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 127;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 421:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 143;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 422:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 150;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 423:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 157;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 424:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 131;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 425:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 137;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 426:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 140;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 427:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 134;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 428:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 136;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 429:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 430:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 139;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 431:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 142;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 432:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 146;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 433:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 149;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 434:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 148;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 435:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 153;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 436:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 154;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 437:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 156;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 438:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 160;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 439:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 161;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 440:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 318;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 424;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 441:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 425;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 319;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 442:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 320;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 426;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 443:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 321;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 427;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 444:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 428;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 322;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 445:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 446;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 340;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 446:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 447:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 430;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 324;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 448:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 431;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 325;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 449:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 326;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 432;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 450:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 327;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 433;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 451:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 434;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 328;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 452:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 329;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 435;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 453:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 330;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 436;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 454:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 437;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 331;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 455:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 332;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 438;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 456:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 439;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 333;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 457:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 440;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 334;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 399;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 458:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 400;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 441;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 335;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 459:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 401;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 442;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 336;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 460:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 337;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 443;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 402;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 461:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 403;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 444;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 338;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 462:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 377;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 463;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 464;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 463:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 188;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 231;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 464:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 446;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 340;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 465:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 341;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 405;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 447;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 466:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 448;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 342;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 406;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 467:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 343;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 449;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 407;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 468:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 344;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 408;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 450;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 469:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 451;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 345;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 409;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 470:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 410;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 452;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 346;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 471:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 411;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 453;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 347;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 472:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 412;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 348;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 454;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 473:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 413;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 349;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 455;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 474:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 414;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 456;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 350;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 475:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 242;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 200;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 476:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 309;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 242;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 477:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 416;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 501;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 481;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 478:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 482;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 417;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 502;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 479:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 503;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 483;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 418;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 480:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 419;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 484;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 504;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 481:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 247;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 205;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 482:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 248;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 206;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 483:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 249;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 207;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 484:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 208;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 250;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 485:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 209;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 251;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 486:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 252;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 210;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 487:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 253;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 211;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 488:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 212;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 254;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 489:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 255;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 213;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 490:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 231;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 273;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 491:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 257;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 215;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 492:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 216;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 258;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 493:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 217;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 259;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 494:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 218;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 260;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 495:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 261;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 219;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 496:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 220;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 262;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 497:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 263;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 221;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 498:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 264;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 222;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 499:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 223;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 265;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 500:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 266;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 224;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 501:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 314;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 247;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 502:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 248;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 315;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 503:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 249;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 504:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 250;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 317;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 505:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 251;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 318;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 506:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 252;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 319;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 507:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 253;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 320;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 508:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 254;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 321;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 509:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 322;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 255;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 510:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 273;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 340;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 511:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 324;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 257;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 512:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 258;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 325;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 513:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 259;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 326;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 514:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 260;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 327;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 515:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 328;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 261;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 516:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 329;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 262;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 517:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 330;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 263;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 518:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 264;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 331;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 519:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 265;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 332;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 520:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 333;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 266;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 521:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 440;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 485;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 505;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 522:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 486;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 441;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 506;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 523:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 487;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 507;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 442;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 524:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 508;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 488;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 443;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 525:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 509;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 444;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 489;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 526:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 527;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 464;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 528;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 527:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 231;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 273;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 528:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 273;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 340;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 529:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 491;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 511;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 447;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 530:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 512;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 448;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 492;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 531:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 513;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 449;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 493;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 532:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 450;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 514;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 494;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 533:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 515;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 495;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 451;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 534:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 496;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 452;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 516;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 535:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 517;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 453;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 497;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 536:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 454;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 498;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 518;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 537:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 455;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 519;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 499;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 538:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 520;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 500;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 456;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 539:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 521;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 457;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 284;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 371;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 540:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 522;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 372;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 458;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 285;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 541:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 459;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 523;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 373;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 286;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 542:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 374;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 524;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 287;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 460;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 543:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 461;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 375;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 525;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 288;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 544:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 547;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 548;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 546;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 545;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 545:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 291;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 290;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 292;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 546:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 377;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 290;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 378;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 547:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 464;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 463;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 377;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 548:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 528;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 464;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 527;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 549:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 529;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 379;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 293;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 465;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 550:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 380;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 466;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 530;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 294;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 551:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 531;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 381;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 467;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 295;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 552:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 468;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 296;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 532;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 382;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 553:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 383;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 469;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 297;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 533;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 554:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 384;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 534;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 298;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 470;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 555:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 385;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 299;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 471;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 535;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 556:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 472;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 536;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 300;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 386;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 557:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 387;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 537;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 473;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 301;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 558:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 302;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 388;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 538;
										return Optional.empty();
									}
									if (isCloseAction) {
										monitor.notifyAll();
										state = 474;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 559:
									monitor.wait();
									break;
								case 560:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 561;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 561:
									monitor.wait();
									break;
								case 562:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 564;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 563;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 563:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 80;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 564:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 80;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 565:
									monitor.wait();
									break;
								case 566:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 567;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 567:
									monitor.wait();
									break;
								case 568:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 80;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 569:
									monitor.wait();
									break;
								case 570:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 571;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 571:
									monitor.wait();
									break;
								case 572:
									monitor.wait();
									break;
								case 573:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 569;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 574:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 570;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 575;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 575:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 576;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 576:
									monitor.wait();
									break;
								case 577:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 72;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 578:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 582;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 580;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 579:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 608;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 580:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 74;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 581:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 585;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 583;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 584;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 582:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 600;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 583:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 76;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 75;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 584:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 586;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 75;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 585:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 590;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 591;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 586:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 559;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 587:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 561;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 588:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 589;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 563;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 589:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 80;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 590:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 559;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 591:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 559;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 592:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 593;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 594;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 593:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 561;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 594:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 561;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 595:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 597;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 598;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 596;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 596:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 563;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 564;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 597:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 563;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 589;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 598:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 589;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 599;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 599:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 80;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 600:
									monitor.wait();
									break;
								case 601:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 602;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 602:
									monitor.wait();
									break;
								case 603:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 604;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 605;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 604:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 567;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 605:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 606;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 606:
									monitor.wait();
									break;
								case 607:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 599;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 589;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 608:
									monitor.wait();
									break;
								case 609:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 610;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 610:
									monitor.wait();
									break;
								case 611:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 612;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 613;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 612:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 571;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 613:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 614;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 614:
									monitor.wait();
									break;
								case 615:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 606;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 616:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 72;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 617:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 609;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 618;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 618:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 569;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 619:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 611;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 620;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 621;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 620:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 570;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 575;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 621:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 623;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 622;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 622:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 576;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 623:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 614;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 624:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 627;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 625:
									monitor.wait();
									break;
								case 626:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 629;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 628;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 627:
									monitor.wait();
									break;
								case 628:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 631;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 629:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 636;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 630:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 586;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 75;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 631:
									monitor.wait();
									break;
								case 632:
									monitor.wait();
									break;
								case 633:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 634;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 634:
									monitor.wait();
									break;
								case 635:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 80;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 636:
									monitor.wait();
									break;
								case 637:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 638;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 638:
									monitor.wait();
									break;
								case 639:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 640;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 641;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 640:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 634;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 641:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 634;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 642:
									monitor.wait();
									break;
								case 643:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 644;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 644:
									monitor.wait();
									break;
								case 645:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 634;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 646:
									monitor.wait();
									break;
								case 647:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 648;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 648:
									monitor.wait();
									break;
								case 649:
									monitor.wait();
									break;
								case 650:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 646;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 651:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 647;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 652;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 652:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 654;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 653:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 623;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 622;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 654:
									monitor.wait();
									break;
								case 655:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 658;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 656:
									monitor.wait();
									break;
								case 657:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 660;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 659;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 658:
									monitor.wait();
									break;
								case 659:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 662;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 660:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 667;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 661:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 631;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 662:
									monitor.wait();
									break;
								case 663:
									monitor.wait();
									break;
								case 664:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 665;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 665:
									monitor.wait();
									break;
								case 666:
									monitor.wait();
									break;
								case 667:
									monitor.wait();
									break;
								case 668:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 669;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 669:
									monitor.wait();
									break;
								case 670:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 671;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 672;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 671:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 665;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 672:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 665;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 673:
									monitor.wait();
									break;
								case 674:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 675;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 675:
									monitor.wait();
									break;
								case 676:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 665;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 677:
									monitor.wait();
									break;
								case 678:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 679;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 679:
									monitor.wait();
									break;
								case 680:
									monitor.wait();
									break;
								case 681:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 677;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 682:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 678;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 683;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 683:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 685;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 684:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 654;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 685:
									monitor.wait();
									break;
								case 686:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 655;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 689;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 687:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 656;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 688:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 657;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 691;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 690;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 689:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 658;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 690:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 693;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 692;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 691:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 660;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 698;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 692:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 662;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 693:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 662;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 694:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 663;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 695:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 664;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 696;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 696:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 697;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 697:
									monitor.wait();
									break;
								case 698:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 662;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 699:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 668;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 700;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 700:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 663;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 701:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 670;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 702;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 703;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 702:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 664;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 696;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 703:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 676;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 696;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 704:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 673;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 705:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 674;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 706;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 706:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 680;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 707:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 676;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 696;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 708:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 677;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 709:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 678;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 710;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 710:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 685;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 711:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 680;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 712:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 681;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 708;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 713:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 682;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 709;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 714;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 714:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 715;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 716;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 715:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 685;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 716:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 685;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 717:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 62;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 61;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 718:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 724;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 723;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 721;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 719:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 887;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 885;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 720:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 887;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 931;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 721:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 64;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 65;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 722:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 727;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 728;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 725;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 726;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 723:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 832;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 830;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 724:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 832;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 876;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 725:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 68;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 67;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 66;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 726:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 730;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 729;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 66;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 727:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 762;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 759;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 760;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 728:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 762;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 818;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 819;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 729:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 732;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 577;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 730:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 732;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 616;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 731:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 734;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 580;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 732:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 608;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 733:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 736;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 583;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 735;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 734:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 600;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 735:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 737;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 75;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 736:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 741;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 590;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 737:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 559;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 738:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 561;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 739:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 740;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 563;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 740:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 80;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 741:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 559;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 742:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 593;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 743;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 743:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 561;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 744:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 745;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 596;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 746;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 745:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 563;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 740;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 746:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 599;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 740;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 747:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 602;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 748:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 604;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 749;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 749:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 606;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 750:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 740;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 599;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 751:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 610;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 752:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 612;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 753;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 753:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 614;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 754:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 606;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 755:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 751;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 618;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 756:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 752;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 757;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 620;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 757:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 758;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 622;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 758:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 614;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 759:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 579;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 577;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 760:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 732;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 577;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 761:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 766;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 763;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 764;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 762:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 806;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 807;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 763:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 582;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 580;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 764:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 734;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 580;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 765:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 770;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 767;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 769;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 768;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 766:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 794;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 795;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 767:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 585;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 584;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 583;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 768:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 736;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 583;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 735;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 769:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 772;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 735;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 771;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 770:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 780;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 782;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 781;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 771:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 586;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 75;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 772:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 741;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 773;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 773:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 559;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 774:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 743;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 775;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 775:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 561;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 776:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 745;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 778;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 777;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 777:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 563;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 589;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 778:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 740;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 779;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 779:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 80;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 780:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 591;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 590;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 781:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 590;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 741;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 782:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 773;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 741;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 783:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 786;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 784;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 785;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 784:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 593;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 594;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 785:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 743;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 593;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 786:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 743;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 775;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 787:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 788;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 791;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 790;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 789;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 788:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 598;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 597;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 596;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 789:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 596;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 745;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 746;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 790:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 778;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 745;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 777;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 791:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 793;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 778;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 792;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 792:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 599;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 589;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 793:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 740;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 599;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 794:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 600;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 795:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 600;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 796:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 798;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 797;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 797:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 602;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 798:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 602;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 799:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 802;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 801;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 800;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 800:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 604;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 605;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 801:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 604;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 749;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 802:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 804;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 803;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 803:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 606;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 804:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 606;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 805:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 792;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 778;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 793;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 806:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 608;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 807:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 608;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 808:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 810;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 809;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 809:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 610;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 810:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 610;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 811:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 813;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 812;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 814;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 812:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 613;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 612;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 813:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 753;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 612;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 814:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 816;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 815;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 815:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 614;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 816:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 614;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 817:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 803;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 804;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 818:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 579;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 616;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 819:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 732;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 616;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 820:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 808;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 821;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 822;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 821:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 609;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 618;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 822:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 751;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 618;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 823:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 811;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 824;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 825;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 826;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 824:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 611;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 620;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 621;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 825:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 752;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 757;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 620;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 826:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 829;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 827;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 828;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 827:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 623;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 622;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 828:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 758;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 622;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 829:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 816;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 815;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 830:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 625;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 831:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 835;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 833;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 832:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 868;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 833:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 627;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 834:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 838;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 837;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 836;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 835:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 860;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 836:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 629;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 628;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 837:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 841;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 839;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 838:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 850;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 851;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 839:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 631;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 840:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 772;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 771;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 735;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 841:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 842;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 842:
									monitor.wait();
									break;
								case 843:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 844;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 844:
									monitor.wait();
									break;
								case 845:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 847;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 846;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 846:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 634;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 847:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 848;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 848:
									monitor.wait();
									break;
								case 849:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 779;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 740;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 850:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 636;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 851:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 842;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 852:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 854;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 853;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 853:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 638;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 854:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 844;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 855:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 857;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 858;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 856;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 856:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 641;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 640;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 857:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 846;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 847;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 858:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 859;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 847;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 859:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 634;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 860:
									monitor.wait();
									break;
								case 861:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 862;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 862:
									monitor.wait();
									break;
								case 863:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 865;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 864;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 864:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 644;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 865:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 866;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 866:
									monitor.wait();
									break;
								case 867:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 847;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 859;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 868:
									monitor.wait();
									break;
								case 869:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 870;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 870:
									monitor.wait();
									break;
								case 871:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 872;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 873;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 872:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 648;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 873:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 874;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 874:
									monitor.wait();
									break;
								case 875:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 866;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 876:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 625;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 877:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 869;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 878;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 878:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 646;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 879:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 871;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 880;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 881;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 880:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 647;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 652;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 881:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 884;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 882;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 882:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 654;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 883:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 829;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 827;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 828;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 884:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 874;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 885:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 656;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 886:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 890;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 888;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 887:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 923;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 888:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 658;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 889:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 893;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 892;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 891;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 890:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 915;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 891:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 660;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 659;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 892:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 896;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 894;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 893:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 906;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 905;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 894:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 662;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 895:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 841;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 839;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 896:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 897;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 897:
									monitor.wait();
									break;
								case 898:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 899;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 899:
									monitor.wait();
									break;
								case 900:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 901;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 902;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 901:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 665;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 902:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 903;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 903:
									monitor.wait();
									break;
								case 904:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 848;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 905:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 667;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 906:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 897;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 907:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 909;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 908;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 908:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 669;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 909:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 899;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 910:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 911;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 913;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 912;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 911:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 672;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 671;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 912:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 901;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 902;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 913:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 902;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 914;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 914:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 665;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 915:
									monitor.wait();
									break;
								case 916:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 917;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 917:
									monitor.wait();
									break;
								case 918:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 919;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 920;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 919:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 675;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 920:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 921;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 921:
									monitor.wait();
									break;
								case 922:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 914;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 902;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 923:
									monitor.wait();
									break;
								case 924:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 925;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 925:
									monitor.wait();
									break;
								case 926:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 928;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 927;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 927:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 679;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 928:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 929;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 929:
									monitor.wait();
									break;
								case 930:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 921;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 931:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 656;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 932:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 924;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 933;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 933:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 677;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 934:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 926;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 935;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 936;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 935:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 678;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 683;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 936:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 939;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 937;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 937:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 685;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 938:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 884;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 882;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 939:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 929;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 940:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 687;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 61;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 941:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 945;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 886;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 943;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 942:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 887;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 978;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 943:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 655;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 689;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 944:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 889;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 948;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 947;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 946;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 945:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 890;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 970;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 946:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 691;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 657;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 690;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 947:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 951;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 950;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 949;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 948:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 893;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 960;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 961;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 949:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 692;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 693;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 950:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 896;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 894;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 951:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 896;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 952;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 952:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 662;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 953:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 898;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 954;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 954:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 663;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 955:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 900;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 956;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 957;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 956:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 664;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 696;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 957:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 959;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 958;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 958:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 697;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 959:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 903;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 960:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 660;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 698;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 961:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 896;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 952;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 962:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 907;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 964;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 963;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 963:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 668;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 700;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 964:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 898;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 954;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 965:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 910;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 966;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 968;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 967;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 966:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 670;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 702;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 703;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 967:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 900;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 956;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 957;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 968:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 922;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 957;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 969;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 969:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 676;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 696;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 970:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 658;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 971:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 916;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 972;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 972:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 673;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 973:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 918;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 974;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 975;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 974:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 674;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 706;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 975:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 930;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 976;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 976:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 680;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 977:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 922;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 957;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 969;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 978:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 656;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 979:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 924;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 980;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 980:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 677;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 981:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 926;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 983;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 982;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 982:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 678;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 710;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 983:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 939;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 984;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 984:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 685;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 985:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 930;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 976;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 986:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 687;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 62;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 987:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 932;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 979;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 988;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 988:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 708;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 681;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 989:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 981;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 934;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 991;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 990;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 990:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 709;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 682;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 714;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 991:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 993;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 994;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 992;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 992:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 716;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 715;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 993:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 939;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 937;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 994:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 939;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 984;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 995:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1000;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 999;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 996:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1117;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 997:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1117;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 998:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1003;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1002;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1001;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 999:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1086;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1000:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1086;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1001:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1005;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1006;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1002:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1040;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1038;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1003:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1040;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1077;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1004:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 730;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 729;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 66;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1005:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1008;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1006:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1008;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1007:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1010;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1008:
									monitor.wait();
									break;
								case 1009:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1012;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1011;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1010:
									monitor.wait();
									break;
								case 1011:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1014;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1012:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1019;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1013:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 737;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 75;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1014:
									monitor.wait();
									break;
								case 1015:
									monitor.wait();
									break;
								case 1016:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1017;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1017:
									monitor.wait();
									break;
								case 1018:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 80;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1019:
									monitor.wait();
									break;
								case 1020:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1021;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1021:
									monitor.wait();
									break;
								case 1022:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1024;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1023;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1023:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1017;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1024:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1017;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1025:
									monitor.wait();
									break;
								case 1026:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1027;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1027:
									monitor.wait();
									break;
								case 1028:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1017;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1029:
									monitor.wait();
									break;
								case 1030:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1031;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1031:
									monitor.wait();
									break;
								case 1032:
									monitor.wait();
									break;
								case 1033:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1029;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1034:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1030;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1035;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1035:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1037;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1036:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 758;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 622;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1037:
									monitor.wait();
									break;
								case 1038:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1008;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1039:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1043;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1041;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1040:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1069;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1041:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1010;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1042:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1046;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1044;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1045;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1043:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1061;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1044:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1012;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1011;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1045:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1047;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1011;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1046:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1051;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1052;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1047:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1019;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1048:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1021;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1049:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1050;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1023;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1050:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1017;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1051:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1019;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1052:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1019;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1053:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1055;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1054;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1054:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1021;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1055:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1021;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1056:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1057;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1059;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1058;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1057:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1023;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1024;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1058:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1023;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1050;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1059:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1050;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1060;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1060:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1017;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1061:
									monitor.wait();
									break;
								case 1062:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1063;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1063:
									monitor.wait();
									break;
								case 1064:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1065;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1066;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1065:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1027;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1066:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1067;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1067:
									monitor.wait();
									break;
								case 1068:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1060;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1050;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1069:
									monitor.wait();
									break;
								case 1070:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1071;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1071:
									monitor.wait();
									break;
								case 1072:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1074;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1073;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1073:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1031;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1074:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1075;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1075:
									monitor.wait();
									break;
								case 1076:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1067;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1077:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1008;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1078:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1070;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1079;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1079:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1029;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1080:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1072;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1081;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1082;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1081:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1030;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1035;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1082:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1084;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1083;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1083:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1037;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1084:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1075;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1085:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1088;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1086:
									monitor.wait();
									break;
								case 1087:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1090;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1089;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1088:
									monitor.wait();
									break;
								case 1089:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1092;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1090:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1097;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1091:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1047;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1011;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1092:
									monitor.wait();
									break;
								case 1093:
									monitor.wait();
									break;
								case 1094:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1095;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1095:
									monitor.wait();
									break;
								case 1096:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1017;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1097:
									monitor.wait();
									break;
								case 1098:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1099;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1099:
									monitor.wait();
									break;
								case 1100:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1102;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1101;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1101:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1095;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1102:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1095;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1103:
									monitor.wait();
									break;
								case 1104:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1105;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1105:
									monitor.wait();
									break;
								case 1106:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1095;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1107:
									monitor.wait();
									break;
								case 1108:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1109;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1109:
									monitor.wait();
									break;
								case 1110:
									monitor.wait();
									break;
								case 1111:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1107;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1112:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1108;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1113;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1113:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1115;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1114:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1084;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1083;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1115:
									monitor.wait();
									break;
								case 1116:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1119;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1117:
									monitor.wait();
									break;
								case 1118:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1121;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1120;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1119:
									monitor.wait();
									break;
								case 1120:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1123;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1121:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1128;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1122:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1092;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1123:
									monitor.wait();
									break;
								case 1124:
									monitor.wait();
									break;
								case 1125:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1126;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1126:
									monitor.wait();
									break;
								case 1127:
									monitor.wait();
									break;
								case 1128:
									monitor.wait();
									break;
								case 1129:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1130;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1130:
									monitor.wait();
									break;
								case 1131:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1133;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1132;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1132:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1126;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1133:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1126;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1134:
									monitor.wait();
									break;
								case 1135:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1136;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1136:
									monitor.wait();
									break;
								case 1137:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1126;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1138:
									monitor.wait();
									break;
								case 1139:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1140;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1140:
									monitor.wait();
									break;
								case 1141:
									monitor.wait();
									break;
								case 1142:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1138;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1143:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1139;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1144;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1144:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1146;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1145:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1115;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1146:
									monitor.wait();
									break;
								case 1147:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1150;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1116;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1148:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1117;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1149:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1118;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1152;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1151;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1150:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1119;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1151:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1155;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1154;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1152:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1121;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1161;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1153:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 950;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 951;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 949;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1154:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1123;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1155:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1123;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1156:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1124;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1157:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1125;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1158;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1158:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1160;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1159:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 959;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 958;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1160:
									monitor.wait();
									break;
								case 1161:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1123;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1162:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1129;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1163;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1163:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1124;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1164:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1131;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1165;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1166;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1165:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1125;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1158;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1166:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1137;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1158;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1167:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1134;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1168:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1135;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1169;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1169:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1141;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1170:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1137;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1158;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1171:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1138;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1172:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1139;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1173;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1173:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1146;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1174:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1141;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1175:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1171;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1142;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1176:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1172;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1143;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1177;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1177:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1179;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1180;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1178:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 993;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 994;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 992;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1179:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1146;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1180:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1146;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1181:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1185;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1186;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1182:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1303;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1183:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1303;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1184:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1189;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1188;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1187;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1185:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1272;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1186:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1272;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1187:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1191;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1192;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1188:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1226;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1224;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1189:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1226;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1263;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1190:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1005;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1006;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1191:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1194;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1192:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1194;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1193:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1196;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1194:
									monitor.wait();
									break;
								case 1195:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1198;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1197;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1196:
									monitor.wait();
									break;
								case 1197:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1200;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1198:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1205;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1199:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1014;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1200:
									monitor.wait();
									break;
								case 1201:
									monitor.wait();
									break;
								case 1202:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1203;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1203:
									monitor.wait();
									break;
								case 1204:
									monitor.wait();
									break;
								case 1205:
									monitor.wait();
									break;
								case 1206:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1207;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1207:
									monitor.wait();
									break;
								case 1208:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1210;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1209;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1209:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1203;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1210:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1203;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1211:
									monitor.wait();
									break;
								case 1212:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1213;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1213:
									monitor.wait();
									break;
								case 1214:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1203;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1215:
									monitor.wait();
									break;
								case 1216:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1217;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1217:
									monitor.wait();
									break;
								case 1218:
									monitor.wait();
									break;
								case 1219:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1215;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1220:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1216;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1221;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1221:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1223;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1222:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1037;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1223:
									monitor.wait();
									break;
								case 1224:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1194;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1225:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1229;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1227;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1226:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1255;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1227:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1196;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1228:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1232;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1231;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1230;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1229:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1247;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1230:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1198;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1197;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1231:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1233;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1197;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1232:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1237;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1238;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1233:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1205;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1234:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1207;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1235:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1236;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1209;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1236:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1203;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1237:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1205;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1238:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1205;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1239:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1241;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1240;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1240:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1207;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1241:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1207;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1242:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1243;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1244;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1245;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1243:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1209;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1210;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1244:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1209;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1236;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1245:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1236;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1246;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1246:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1203;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1247:
									monitor.wait();
									break;
								case 1248:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1249;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1249:
									monitor.wait();
									break;
								case 1250:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1251;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1252;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1251:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1213;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1252:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1253;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1253:
									monitor.wait();
									break;
								case 1254:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1246;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1236;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1255:
									monitor.wait();
									break;
								case 1256:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1257;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1257:
									monitor.wait();
									break;
								case 1258:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1260;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1259;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1259:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1217;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1260:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1261;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1261:
									monitor.wait();
									break;
								case 1262:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1253;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1263:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1194;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1264:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1256;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1265;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1265:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1215;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1266:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1258;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1268;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1267;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1267:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1216;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1221;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1268:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1270;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1269;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1269:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1223;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1270:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1261;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1271:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1274;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1272:
									monitor.wait();
									break;
								case 1273:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1276;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1275;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1274:
									monitor.wait();
									break;
								case 1275:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1278;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1276:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1283;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1277:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1233;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1197;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1278:
									monitor.wait();
									break;
								case 1279:
									monitor.wait();
									break;
								case 1280:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1281;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1281:
									monitor.wait();
									break;
								case 1282:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1203;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1283:
									monitor.wait();
									break;
								case 1284:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1285;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1285:
									monitor.wait();
									break;
								case 1286:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1288;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1287;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1287:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1281;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1288:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1281;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1289:
									monitor.wait();
									break;
								case 1290:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1291;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1291:
									monitor.wait();
									break;
								case 1292:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1281;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1293:
									monitor.wait();
									break;
								case 1294:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1295;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1295:
									monitor.wait();
									break;
								case 1296:
									monitor.wait();
									break;
								case 1297:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1293;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1298:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1294;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1299;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1299:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1301;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1300:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1270;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1269;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1301:
									monitor.wait();
									break;
								case 1302:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1305;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1303:
									monitor.wait();
									break;
								case 1304:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1307;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1306;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1305:
									monitor.wait();
									break;
								case 1306:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1309;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1307:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1314;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1308:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1278;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1309:
									monitor.wait();
									break;
								case 1310:
									monitor.wait();
									break;
								case 1311:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1312;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1312:
									monitor.wait();
									break;
								case 1313:
									monitor.wait();
									break;
								case 1314:
									monitor.wait();
									break;
								case 1315:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1316;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1316:
									monitor.wait();
									break;
								case 1317:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1319;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1318;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1318:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1312;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1319:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1312;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1320:
									monitor.wait();
									break;
								case 1321:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1322;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1322:
									monitor.wait();
									break;
								case 1323:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1312;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1324:
									monitor.wait();
									break;
								case 1325:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1326;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1326:
									monitor.wait();
									break;
								case 1327:
									monitor.wait();
									break;
								case 1328:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1324;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1329:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1325;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1330;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1330:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1332;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1331:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1301;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1332:
									monitor.wait();
									break;
								case 1333:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1302;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1336;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1334:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1303;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1335:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1304;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1338;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1337;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1336:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1305;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1337:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1341;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1340;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1338:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1307;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1347;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1339:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1154;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1155;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1340:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1309;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1341:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1309;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1342:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1310;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1343:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1311;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1344;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1344:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1346;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1345:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1160;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1346:
									monitor.wait();
									break;
								case 1347:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1309;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1348:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1315;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1349;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1349:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1310;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1350:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1317;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1352;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1351;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1351:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1311;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1344;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1352:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1323;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1344;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1353:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1320;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1354:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1321;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1355;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1355:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1327;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1356:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1323;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1344;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1357:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1324;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1358:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1325;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1359;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1359:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1332;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1360:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1327;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1361:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1328;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1357;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1362:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1358;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1329;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1363;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1363:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1365;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1366;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1364:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1179;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1180;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1365:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1332;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1366:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1332;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1367:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1370;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2031;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2032;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1368:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1371;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2149;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1369:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1372;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2149;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1370:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1880;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1879;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1371:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1997;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1372:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1997;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1373:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1728;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1727;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1374:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1845;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1375:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1845;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1376:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 25;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 26;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1377:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1510;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1509;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1507;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1378:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1673;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1671;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1379:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1673;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1717;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1380:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1463;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1381:
									monitor.wait();
									break;
								case 1382:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1438;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1383:
									monitor.wait();
									break;
								case 1384:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 36;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1385:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1403;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1401;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1386:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1429;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1387:
									monitor.wait();
									break;
								case 1388:
									monitor.wait();
									break;
								case 1389:
									monitor.wait();
									break;
								case 1390:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1391;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1391:
									monitor.wait();
									break;
								case 1392:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1393;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1394;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1393:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 44;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1394:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 44;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1395:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1396;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1396:
									monitor.wait();
									break;
								case 1397:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 44;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1398:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1399;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1399:
									monitor.wait();
									break;
								case 1400:
									monitor.wait();
									break;
								case 1401:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 38;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1402:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1406;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1404;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1405;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1403:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1421;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1404:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 40;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 39;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1405:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1407;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 39;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1406:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1411;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1412;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1407:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1389;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1408:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1391;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1409:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1410;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1393;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1410:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 44;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1411:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1389;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1412:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1389;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1413:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1414;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1415;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1414:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1391;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1415:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1391;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1416:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1418;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1419;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1417;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1417:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1394;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1393;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1418:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1393;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1410;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1419:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1410;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1420;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1420:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 44;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1421:
									monitor.wait();
									break;
								case 1422:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1423;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1423:
									monitor.wait();
									break;
								case 1424:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1425;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1426;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1425:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1396;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1426:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1427;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1427:
									monitor.wait();
									break;
								case 1428:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1410;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1420;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1429:
									monitor.wait();
									break;
								case 1430:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1431;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1431:
									monitor.wait();
									break;
								case 1432:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1434;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1433;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1433:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1399;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1434:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1435;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1435:
									monitor.wait();
									break;
								case 1436:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1427;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1437:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1440;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1439;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1438:
									monitor.wait();
									break;
								case 1439:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1442;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1440:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1447;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1441:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1407;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 39;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1442:
									monitor.wait();
									break;
								case 1443:
									monitor.wait();
									break;
								case 1444:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1445;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1445:
									monitor.wait();
									break;
								case 1446:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 44;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1447:
									monitor.wait();
									break;
								case 1448:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1449;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1449:
									monitor.wait();
									break;
								case 1450:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1451;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1452;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1451:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1445;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1452:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1445;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1453:
									monitor.wait();
									break;
								case 1454:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1455;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1455:
									monitor.wait();
									break;
								case 1456:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1445;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1457:
									monitor.wait();
									break;
								case 1458:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1459;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1459:
									monitor.wait();
									break;
								case 1460:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1435;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1461:
									monitor.wait();
									break;
								case 1462:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1465;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1464;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1463:
									monitor.wait();
									break;
								case 1464:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1467;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1465:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1472;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1466:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1442;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1467:
									monitor.wait();
									break;
								case 1468:
									monitor.wait();
									break;
								case 1469:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1470;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1470:
									monitor.wait();
									break;
								case 1471:
									monitor.wait();
									break;
								case 1472:
									monitor.wait();
									break;
								case 1473:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1474;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1474:
									monitor.wait();
									break;
								case 1475:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1476;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1477;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1476:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1470;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1477:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1470;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1478:
									monitor.wait();
									break;
								case 1479:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1480;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1480:
									monitor.wait();
									break;
								case 1481:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1470;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1482:
									monitor.wait();
									break;
								case 1483:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1484;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1484:
									monitor.wait();
									break;
								case 1485:
									monitor.wait();
									break;
								case 1486:
									monitor.wait();
									break;
								case 1487:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1482;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1488:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1457;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1489:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 36;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1490:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1430;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1495;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1491:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1387;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1492:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1398;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1493;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1493:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1494;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1494:
									monitor.wait();
									break;
								case 1495:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1387;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1496:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1432;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1498;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1497;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1497:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1398;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1493;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1498:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1460;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1499;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1499:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1494;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1500:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1458;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1501;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1501:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1485;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1502:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1460;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1499;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1503:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1483;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1504;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1504:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1506;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1505:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1485;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1506:
									monitor.wait();
									break;
								case 1507:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 29;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 28;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1508:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1514;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1513;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1511;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1512;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1509:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1618;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1616;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1510:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1618;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1662;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1511:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 32;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 31;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 30;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1512:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1515;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1516;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 30;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1513:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1548;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1545;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1546;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1514:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1548;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1604;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1605;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1515:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1518;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1384;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1516:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1518;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1489;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1517:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1520;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1401;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1518:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1429;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1519:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1522;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1521;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1404;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1520:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1421;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1521:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1523;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 39;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1522:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1411;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1527;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1523:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1389;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1524:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1391;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1525:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1526;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1393;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1526:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 44;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1527:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1389;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1528:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1414;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1529;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1529:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1391;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1530:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1417;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1531;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1532;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1531:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1393;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1526;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1532:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1420;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1526;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1533:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1423;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1534:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1535;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1425;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1535:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1427;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1536:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1420;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1526;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1537:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1431;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1538:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1539;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1433;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1539:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1435;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1540:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1427;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1541:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1537;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1495;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1542:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1538;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1497;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1543;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1543:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1544;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1499;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1544:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1435;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1545:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1386;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1384;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1546:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1518;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1384;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1547:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1552;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1550;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1549;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1548:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1593;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1592;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1549:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1403;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1401;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1550:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1520;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1401;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1551:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1556;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1553;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1555;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1554;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1552:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1580;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1581;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1553:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1406;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1404;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1405;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1554:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1522;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1404;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1521;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1555:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1558;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1557;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1521;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1556:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1566;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1568;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1567;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1557:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1407;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 39;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1558:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1559;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1527;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1559:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1389;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1560:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1561;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1529;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1561:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1391;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1562:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1564;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1563;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1531;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1563:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1410;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1393;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1564:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1565;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1526;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1565:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 44;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1566:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1411;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1412;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1567:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1527;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1411;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1568:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1559;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1527;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1569:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1572;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1571;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1570;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1570:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1415;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1414;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1571:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1529;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1414;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1572:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1529;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1561;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1573:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1575;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1576;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1577;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1574;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1574:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1417;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1419;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1418;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1575:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1417;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1531;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1532;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1576:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1531;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1563;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1564;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1577:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1579;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1578;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1564;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1578:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1410;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1420;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1579:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1420;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1526;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1580:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1421;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1581:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1421;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1582:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1583;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1584;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1583:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1423;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1584:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1423;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1585:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1586;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1587;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1588;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1586:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1425;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1426;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1587:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1425;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1535;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1588:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1590;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1589;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1589:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1427;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1590:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1427;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1591:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1579;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1564;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1578;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1592:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1429;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1593:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1429;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1594:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1596;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1595;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1595:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1431;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1596:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1431;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1597:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1598;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1600;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1599;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1598:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1434;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1433;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1599:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1433;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1539;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1600:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1602;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1601;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1601:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1435;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1602:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1435;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1603:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1590;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1589;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1604:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1386;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1489;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1605:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1518;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1489;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1606:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1594;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1608;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1607;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1607:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1430;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1495;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1608:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1537;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1495;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1609:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1597;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1610;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1612;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1611;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1610:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1432;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1498;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1497;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1611:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1538;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1497;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1543;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1612:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1615;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1613;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1614;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1613:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1460;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1499;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1614:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1544;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1499;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1615:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1602;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1601;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1616:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1383;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1617:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1621;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1619;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1618:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1654;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1619:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1438;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1620:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1624;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1623;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1622;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1621:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1646;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1622:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1440;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1439;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1623:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1627;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1625;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1624:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1636;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1637;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1625:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1442;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1626:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1558;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1521;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1557;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1627:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1628;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1628:
									monitor.wait();
									break;
								case 1629:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1630;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1630:
									monitor.wait();
									break;
								case 1631:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1632;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1633;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1632:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1445;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1633:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1634;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1634:
									monitor.wait();
									break;
								case 1635:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1565;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1526;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1636:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1447;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1637:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1628;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1638:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1639;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1640;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1639:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1449;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1640:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1630;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1641:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1642;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1644;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1643;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1642:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1451;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1452;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1643:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1633;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1632;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1644:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1645;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1633;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1645:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1445;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1646:
									monitor.wait();
									break;
								case 1647:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1648;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1648:
									monitor.wait();
									break;
								case 1649:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1650;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1651;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1650:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1455;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1651:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1652;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1652:
									monitor.wait();
									break;
								case 1653:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1645;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1633;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1654:
									monitor.wait();
									break;
								case 1655:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1656;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1656:
									monitor.wait();
									break;
								case 1657:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1658;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1659;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1658:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1459;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1659:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1660;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1660:
									monitor.wait();
									break;
								case 1661:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1652;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1662:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1383;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1663:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1655;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1664;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1664:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1457;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1665:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1657;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1667;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1666;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1666:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1458;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1501;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1667:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1670;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1668;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1668:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1485;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1669:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1615;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1614;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1613;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1670:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1660;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1671:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1381;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1672:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1676;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1674;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1673:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1709;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1674:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1463;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1675:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1679;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1677;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1678;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1676:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1701;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1677:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1465;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1464;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1678:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1682;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1680;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1679:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1691;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1692;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1680:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1467;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1681:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1627;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1625;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1682:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1683;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1683:
									monitor.wait();
									break;
								case 1684:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1685;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1685:
									monitor.wait();
									break;
								case 1686:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1688;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1687;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1687:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1470;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1688:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1689;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1689:
									monitor.wait();
									break;
								case 1690:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1634;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1691:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1472;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1692:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1683;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1693:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1694;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1695;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1694:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1474;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1695:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1685;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1696:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1699;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1698;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1697;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1697:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1476;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1477;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1698:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1687;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1688;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1699:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1688;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1700;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1700:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1470;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1701:
									monitor.wait();
									break;
								case 1702:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1703;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1703:
									monitor.wait();
									break;
								case 1704:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1705;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1706;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1705:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1480;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1706:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1707;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1707:
									monitor.wait();
									break;
								case 1708:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1688;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1700;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1709:
									monitor.wait();
									break;
								case 1710:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1711;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1711:
									monitor.wait();
									break;
								case 1712:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1713;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1714;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1713:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1484;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1714:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1715;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1715:
									monitor.wait();
									break;
								case 1716:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1707;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1717:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1381;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1718:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1710;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1719;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1719:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1482;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1720:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1712;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1721;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1722;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1721:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1483;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1504;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1722:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1725;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1723;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1723:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1506;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1724:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1670;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1668;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1725:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1715;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1726:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1731;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1730;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1729;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1727:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1814;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1728:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1814;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1729:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1733;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1734;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1730:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1768;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1766;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1731:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1768;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1805;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1732:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1515;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1516;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 30;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1733:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1736;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1734:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1736;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1735:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1738;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1736:
									monitor.wait();
									break;
								case 1737:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1740;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1739;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1738:
									monitor.wait();
									break;
								case 1739:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1742;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1740:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1747;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1741:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1523;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 39;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1742:
									monitor.wait();
									break;
								case 1743:
									monitor.wait();
									break;
								case 1744:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1745;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1745:
									monitor.wait();
									break;
								case 1746:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 44;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1747:
									monitor.wait();
									break;
								case 1748:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1749;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1749:
									monitor.wait();
									break;
								case 1750:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1752;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1751;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1751:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1745;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1752:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1745;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1753:
									monitor.wait();
									break;
								case 1754:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1755;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1755:
									monitor.wait();
									break;
								case 1756:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1745;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1757:
									monitor.wait();
									break;
								case 1758:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1759;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1759:
									monitor.wait();
									break;
								case 1760:
									monitor.wait();
									break;
								case 1761:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1757;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1762:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1758;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1763;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1763:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1765;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1764:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1544;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1499;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1765:
									monitor.wait();
									break;
								case 1766:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1736;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1767:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1771;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1769;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1768:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1797;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1769:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1738;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1770:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1774;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1772;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1773;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1771:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1789;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1772:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1740;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1739;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1773:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1775;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1739;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1774:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1779;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1780;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1775:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1747;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1776:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1749;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1777:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1778;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1751;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1778:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1745;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1779:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1747;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1780:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1747;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1781:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1783;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1782;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1782:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1749;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1783:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1749;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1784:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1785;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1787;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1786;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1785:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1751;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1752;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1786:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1778;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1751;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1787:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1778;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1788;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1788:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1745;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1789:
									monitor.wait();
									break;
								case 1790:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1791;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1791:
									monitor.wait();
									break;
								case 1792:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1794;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1793;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1793:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1755;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1794:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1795;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1795:
									monitor.wait();
									break;
								case 1796:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1788;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1778;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1797:
									monitor.wait();
									break;
								case 1798:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1799;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1799:
									monitor.wait();
									break;
								case 1800:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1802;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1801;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1801:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1759;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1802:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1803;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1803:
									monitor.wait();
									break;
								case 1804:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1795;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1805:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1736;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1806:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1798;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1807;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1807:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1757;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1808:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1800;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1809;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1810;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1809:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1758;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1763;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1810:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1812;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1811;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1811:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1765;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1812:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1803;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1813:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1816;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1814:
									monitor.wait();
									break;
								case 1815:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1818;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1817;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1816:
									monitor.wait();
									break;
								case 1817:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1820;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1818:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1825;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1819:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1775;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1739;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1820:
									monitor.wait();
									break;
								case 1821:
									monitor.wait();
									break;
								case 1822:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1823;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1823:
									monitor.wait();
									break;
								case 1824:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1745;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1825:
									monitor.wait();
									break;
								case 1826:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1827;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1827:
									monitor.wait();
									break;
								case 1828:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1829;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1830;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1829:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1823;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1830:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1823;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1831:
									monitor.wait();
									break;
								case 1832:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1833;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1833:
									monitor.wait();
									break;
								case 1834:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1823;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1835:
									monitor.wait();
									break;
								case 1836:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1837;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1837:
									monitor.wait();
									break;
								case 1838:
									monitor.wait();
									break;
								case 1839:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1835;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1840:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1836;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1841;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1841:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1843;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1842:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1812;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1811;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1843:
									monitor.wait();
									break;
								case 1844:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1847;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1845:
									monitor.wait();
									break;
								case 1846:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1849;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1848;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1847:
									monitor.wait();
									break;
								case 1848:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1852;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1849:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1858;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1850:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1682;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1680;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1851:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1820;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1852:
									monitor.wait();
									break;
								case 1853:
									monitor.wait();
									break;
								case 1854:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1855;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1855:
									monitor.wait();
									break;
								case 1856:
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1689;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1857:
									monitor.wait();
									break;
								case 1858:
									monitor.wait();
									break;
								case 1859:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1860;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1860:
									monitor.wait();
									break;
								case 1861:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1863;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1862;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1862:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1855;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1863:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1855;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1864:
									monitor.wait();
									break;
								case 1865:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1866;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1866:
									monitor.wait();
									break;
								case 1867:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1855;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1868:
									monitor.wait();
									break;
								case 1869:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1870;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1870:
									monitor.wait();
									break;
								case 1871:
									monitor.wait();
									break;
								case 1872:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1868;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1873:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1869;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1874;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1874:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1877;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1875:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1725;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1723;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1876:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1843;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1877:
									monitor.wait();
									break;
								case 1878:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1883;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1882;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1881;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1879:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1966;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1880:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1966;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1881:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1886;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1885;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1882:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1920;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1918;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1883:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1920;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1957;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1884:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1734;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1733;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1885:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1888;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1886:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1888;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1887:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1890;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1888:
									monitor.wait();
									break;
								case 1889:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1892;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1891;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1890:
									monitor.wait();
									break;
								case 1891:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1894;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1892:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1899;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1893:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1742;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1894:
									monitor.wait();
									break;
								case 1895:
									monitor.wait();
									break;
								case 1896:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1897;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1897:
									monitor.wait();
									break;
								case 1898:
									monitor.wait();
									break;
								case 1899:
									monitor.wait();
									break;
								case 1900:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1901;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1901:
									monitor.wait();
									break;
								case 1902:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1904;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1903;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1903:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1897;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1904:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1897;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1905:
									monitor.wait();
									break;
								case 1906:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1907;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1907:
									monitor.wait();
									break;
								case 1908:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1897;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1909:
									monitor.wait();
									break;
								case 1910:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1911;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1911:
									monitor.wait();
									break;
								case 1912:
									monitor.wait();
									break;
								case 1913:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1909;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1914:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1910;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1915;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1915:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1917;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1916:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1765;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1917:
									monitor.wait();
									break;
								case 1918:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1888;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1919:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1923;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1921;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1920:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1949;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1921:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1890;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1922:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1926;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1925;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1924;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1923:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1941;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1924:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1892;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1891;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1925:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1927;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1891;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1926:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1932;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1931;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1927:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1899;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1928:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1901;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1929:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1930;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1903;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1930:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1897;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1931:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1899;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1932:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1899;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1933:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1935;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1934;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1934:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1901;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1935:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1901;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1936:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1937;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1939;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1938;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1937:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1904;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1903;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1938:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1930;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1903;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1939:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1940;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1930;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1940:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1897;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1941:
									monitor.wait();
									break;
								case 1942:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1943;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1943:
									monitor.wait();
									break;
								case 1944:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1945;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1946;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1945:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1907;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1946:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1947;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1947:
									monitor.wait();
									break;
								case 1948:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1940;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1930;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1949:
									monitor.wait();
									break;
								case 1950:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1951;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1951:
									monitor.wait();
									break;
								case 1952:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1954;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1953;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1953:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1911;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1954:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1955;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1955:
									monitor.wait();
									break;
								case 1956:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1947;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1957:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1888;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1958:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1950;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1959;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1959:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1909;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1960:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1952;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1962;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1961;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1961:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1910;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1915;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1962:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1964;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1963;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1963:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1917;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1964:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1955;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1965:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1968;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1966:
									monitor.wait();
									break;
								case 1967:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1970;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1969;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1968:
									monitor.wait();
									break;
								case 1969:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1972;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1970:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1977;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1971:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1927;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1891;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1972:
									monitor.wait();
									break;
								case 1973:
									monitor.wait();
									break;
								case 1974:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1975;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1975:
									monitor.wait();
									break;
								case 1976:
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1897;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1977:
									monitor.wait();
									break;
								case 1978:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1979;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1979:
									monitor.wait();
									break;
								case 1980:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1981;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1982;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1981:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1975;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1982:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1975;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1983:
									monitor.wait();
									break;
								case 1984:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1985;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1985:
									monitor.wait();
									break;
								case 1986:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1975;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1987:
									monitor.wait();
									break;
								case 1988:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1989;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1989:
									monitor.wait();
									break;
								case 1990:
									monitor.wait();
									break;
								case 1991:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1987;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1992:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1988;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1993;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1993:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1995;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1994:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1964;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 1963;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1995:
									monitor.wait();
									break;
								case 1996:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1999;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1997:
									monitor.wait();
									break;
								case 1998:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2001;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2000;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 1999:
									monitor.wait();
									break;
								case 2000:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2004;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2001:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2010;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2002:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1852;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2003:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1972;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2004:
									monitor.wait();
									break;
								case 2005:
									monitor.wait();
									break;
								case 2006:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2007;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2007:
									monitor.wait();
									break;
								case 2008:
									monitor.wait();
									break;
								case 2009:
									monitor.wait();
									break;
								case 2010:
									monitor.wait();
									break;
								case 2011:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2012;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2012:
									monitor.wait();
									break;
								case 2013:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2014;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2015;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2014:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2007;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2015:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2007;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2016:
									monitor.wait();
									break;
								case 2017:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2018;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2018:
									monitor.wait();
									break;
								case 2019:
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2007;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2020:
									monitor.wait();
									break;
								case 2021:
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2022;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2022:
									monitor.wait();
									break;
								case 2023:
									monitor.wait();
									break;
								case 2024:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2020;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2025:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2021;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2026;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2026:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2029;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2027:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1877;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2028:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1995;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2029:
									monitor.wait();
									break;
								case 2030:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2034;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2035;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1878;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2033;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2031:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2118;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1879;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2032:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1880;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2118;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2033:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2037;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2036;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2038;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2034:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2072;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1882;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2070;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2035:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1883;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2072;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2109;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2036:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1885;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1886;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2037:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1885;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2040;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2038:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1886;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2040;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2039:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2042;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1887;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2040:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1888;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2041:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2044;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1889;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2043;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2042:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1890;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2043:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2046;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2045;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2044:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1892;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2051;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2045:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1894;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2046:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1894;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2047:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1895;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2048:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1896;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2049;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2049:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2050;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2050:
									monitor.wait();
									break;
								case 2051:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1894;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2052:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1900;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2053;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2053:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1895;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2054:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1902;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2055;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2056;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2055:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1896;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2049;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2056:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1908;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2049;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2057:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1905;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2058:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1906;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2059;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2059:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1912;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2060:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1908;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2049;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2061:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1909;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2062:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1910;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2063;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2063:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1917;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2064:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1912;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2065:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2061;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1913;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2066:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2062;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1914;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2067;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2067:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2068;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2069;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2068:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1917;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2069:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1917;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2070:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1885;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2040;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2071:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1919;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2075;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2073;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2072:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1920;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2101;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2073:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2042;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1887;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2074:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1922;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2078;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2077;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2076;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2075:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1923;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2093;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2076:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1889;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2044;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2043;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2077:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1971;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2079;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2043;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2078:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1926;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2083;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2084;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2079:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1927;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2051;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2080:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1928;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2053;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2081:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1929;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2055;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2082;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2082:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1976;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2049;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2083:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1892;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2051;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2084:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1927;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2051;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2085:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1933;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2087;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2086;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2086:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1900;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2053;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2087:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1928;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2053;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2088:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1936;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2090;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2089;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2091;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2089:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1902;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2056;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2055;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2090:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1929;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2055;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2082;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2091:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1948;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2092;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2082;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2092:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1908;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2049;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2093:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1890;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2094:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1942;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2095;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2095:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1905;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2096:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1944;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2098;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2097;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2097:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1906;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2059;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2098:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1956;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2099;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2099:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1912;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2100:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1948;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2092;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2082;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2101:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1888;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2102:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1950;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2103;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2103:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1909;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2104:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1952;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2106;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2105;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2105:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1910;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2063;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2106:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1964;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2107;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2107:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1917;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2108:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1956;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2099;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2109:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1886;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2040;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2110:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1958;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2102;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2111;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2111:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2061;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1913;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2112:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2104;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1960;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2114;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2113;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2113:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2062;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1914;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2067;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2114:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1994;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2116;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2115;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2115:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2068;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2069;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2116:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1964;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2107;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2117:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1965;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2120;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2118:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1966;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2119:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2122;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1967;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2121;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2120:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1968;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2121:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2124;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2003;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2122:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1970;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2129;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2123:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1971;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2079;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2043;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2124:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1972;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2125:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1973;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2126:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1974;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2127;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2127:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2009;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2128:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1976;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2049;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2129:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1972;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2130:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1978;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2131;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2131:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1973;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2132:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1980;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2134;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2133;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2133:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1974;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2127;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2134:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1986;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2127;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2135:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1983;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2136:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1984;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2137;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2137:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1990;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2138:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1986;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2127;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2139:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1987;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2140:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1988;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2141;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2141:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1995;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2142:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1990;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2143:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1991;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2139;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2144:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1992;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2140;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2145;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2145:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2147;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2028;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2146:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1994;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2116;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2115;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2147:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1995;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2148:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2151;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1996;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2149:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1997;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2150:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1998;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2153;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2152;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2151:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1999;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2152:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2156;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2154;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2153:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2001;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2162;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2154:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2004;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2155:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2124;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2003;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2156:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2004;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2157:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2005;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2158:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2006;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2159;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2159:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2160;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2160:
									monitor.wait();
									break;
								case 2161:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2009;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2162:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2004;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2163:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2011;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2164;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2164:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2005;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2165:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2013;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2166;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2167;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2166:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2006;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2159;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2167:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2019;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2159;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2168:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2016;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2169:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2017;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2170;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2170:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2023;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2171:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2019;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2159;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2172:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2020;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2173:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2021;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2174;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2174:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2029;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2175:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2023;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2176:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2024;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2172;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2177:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2173;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2025;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2178;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2178:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2179;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2181;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2179:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2029;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2180:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2147;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2028;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2181:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2029;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2182:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2187;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1181;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2186;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2183:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2304;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1182;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2184:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2304;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1183;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2185:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2190;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2189;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1184;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2188;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2186:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2273;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1185;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2187:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2273;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1186;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2188:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2191;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2192;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2193;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2189:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2227;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1188;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2225;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2190:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2227;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1189;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2264;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2191:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1192;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1191;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2192:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2195;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1191;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2193:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1192;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2195;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2194:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1193;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2197;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2195:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1194;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2196:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2199;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1195;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2198;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2197:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1196;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2198:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2200;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2201;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2199:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1198;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2206;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2200:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1200;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2201:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1200;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2202:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1201;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2203:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1202;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2204;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2204:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2205;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2205:
									monitor.wait();
									break;
								case 2206:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1200;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2207:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1206;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2208;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2208:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1201;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2209:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1208;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2211;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2210;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2210:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1202;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2204;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2211:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1214;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2204;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2212:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1211;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2213:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1212;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2214;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2214:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1218;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2215:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1214;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2204;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2216:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1215;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2217:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1216;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2218;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2218:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1223;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2219:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1218;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2220:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1219;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2216;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2221:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1220;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2217;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2222;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2222:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2224;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2223;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2223:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1223;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2224:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1223;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2225:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2195;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1191;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2226:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1225;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2230;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2228;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2227:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1226;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2256;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2228:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1193;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2197;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2229:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1228;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2233;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2232;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2231;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2230:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1229;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2248;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2231:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1195;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2199;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2198;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2232:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1277;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2234;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2198;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2233:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1232;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2238;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2239;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2234:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1233;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2206;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2235:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1234;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2208;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2236:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1235;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2210;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2237;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2237:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1282;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2204;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2238:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1198;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2206;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2239:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1233;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2206;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2240:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1239;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2241;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2242;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2241:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1206;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2208;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2242:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1234;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2208;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2243:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1242;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2244;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2246;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2245;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2244:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1208;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2210;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2211;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2245:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1235;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2210;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2237;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2246:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1254;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2247;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2237;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2247:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1214;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2204;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2248:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1196;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2249:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1248;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2250;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2250:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1211;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2251:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1250;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2253;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2252;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2252:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1212;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2214;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2253:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1262;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2254;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2254:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1218;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2255:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1254;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2237;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2247;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2256:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1194;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2257:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1256;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2258;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2258:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1215;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2259:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1258;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2260;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2261;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2260:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1216;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2218;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2261:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1270;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2262;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2262:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1223;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2263:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1262;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2254;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2264:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1192;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2195;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2265:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2257;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1264;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2266;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2266:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1219;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2216;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2267:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2259;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1266;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2268;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2269;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2268:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1220;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2217;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2222;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2269:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2271;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1300;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2270;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2270:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2224;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2223;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2271:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1270;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2262;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2272:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1271;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2275;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2273:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1272;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2274:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2277;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1273;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2276;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2275:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1274;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2276:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2279;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1308;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2277:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1276;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2284;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2278:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1277;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2234;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2198;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2279:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1278;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2280:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1279;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2281:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1280;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2282;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2282:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1313;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2283:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1282;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2204;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2284:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1278;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2285:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1284;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2286;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2286:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1279;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2287:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1286;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2289;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2288;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2288:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1280;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2282;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2289:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1292;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2282;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2290:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1289;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2291:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1290;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2292;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2292:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1296;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2293:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1292;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2282;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2294:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1293;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2295:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1294;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2296;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2296:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1301;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2297:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1296;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2298:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2294;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1297;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2299:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2295;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1298;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2300;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2300:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1331;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2302;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2301:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2271;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1300;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_1_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2270;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_1_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2302:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1301;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2303:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2306;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1302;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2304:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1303;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2305:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1304;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2308;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2307;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2306:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1305;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2307:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2310;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1340;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2308:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1307;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2315;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2309:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1308;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2279;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2310:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1309;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2311:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1310;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2312:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1311;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2313;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2313:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1346;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2314:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1313;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2315:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1309;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2316:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1315;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2317;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2317:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1310;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2318:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1317;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2320;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2319;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2319:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1311;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2313;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2320:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1323;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2313;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2321:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1320;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2322:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1321;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2323;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2323:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1327;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2324:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1323;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2313;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2325:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1324;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2326:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1325;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2327;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2327:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1332;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2328:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1327;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2329:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2325;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1328;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2330:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1329;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2326;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2331;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2331:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1365;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2333;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2332:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2302;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1331;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2333:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1332;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2334:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2148;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2336;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2461;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2335:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2149;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2337;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2336:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2436;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1996;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2337:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1997;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2338:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1844;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2411;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2339:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1845;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2340:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2344;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 25;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2341:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1672;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2371;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2369;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2342:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1673;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2402;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2343:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1380;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2346;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2344:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1381;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2345:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2348;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1462;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2347;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2346:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1463;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2347:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2350;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2349;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2348:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1465;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2355;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2349:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_3_";
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1467;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2350:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1467;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2351:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1468;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2352:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1469;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2353;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2353:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2354;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2354:
									monitor.wait();
									break;
								case 2355:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1467;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2356:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1473;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2357;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2357:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1468;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2358:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1475;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2359;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2360;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2359:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1469;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2353;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2360:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1481;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2353;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2361:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1478;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2362:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1479;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2363;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2363:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1486;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2364:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1481;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2353;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2365:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1482;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2366:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1483;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2367;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2367:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1506;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2368:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1486;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2369:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2346;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1380;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2370:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1675;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2374;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2372;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2373;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2371:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1676;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2394;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2372:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1462;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2348;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2347;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2373:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2376;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1850;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2375;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2374:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1679;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2384;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2385;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2375:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2349;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2350;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2376:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1682;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2377;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2377:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1467;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2378:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1684;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2379;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2379:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1468;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2380:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1686;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2382;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2381;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2381:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1469;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2353;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2382:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1856;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2383;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2383:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2354;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2384:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1465;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2355;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2385:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1682;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2377;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2386:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1693;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2388;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2387;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2387:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1473;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2357;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2388:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1684;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2379;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2389:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1696;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2391;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2392;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2390;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2390:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1475;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2359;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2360;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2391:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1686;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2382;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2381;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2392:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1708;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2382;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2393;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2393:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1481;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2353;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2394:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1463;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2395:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1702;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2396;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2396:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1478;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2397:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1704;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2398;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2399;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2398:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1479;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2363;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2399:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1716;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2400;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2400:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1486;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2401:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1708;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2382;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2393;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2402:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1381;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2403:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1710;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2404;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2404:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1482;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2405:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1712;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2406;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2407;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2406:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1483;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2367;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2407:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1725;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2408;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2408:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1506;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2409:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1716;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2400;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2410:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1846;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2413;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2412;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2411:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1847;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2412:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2002;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2415;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2413:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1849;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2420;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2414:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2376;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1850;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2375;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2415:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1852;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2416:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1853;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2417:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1854;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2418;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2418:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2008;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2419:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1856;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2383;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2420:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1852;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2421:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1859;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2422;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2422:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1853;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2423:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1861;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2425;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2424;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2424:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1854;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2418;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2425:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1867;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2418;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2426:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1864;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2427:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1865;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2428;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2428:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1871;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2429:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1867;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2418;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2430:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1868;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2431:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1869;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2432;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2432:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1877;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2433:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1725;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2408;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2434:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1871;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2435:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1998;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2438;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2437;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2436:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1999;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2437:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2440;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2154;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2438:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2001;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2445;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2439:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2415;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2002;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2440:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2004;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2441:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2005;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2442:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2006;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2443;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2443:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2160;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2444:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2008;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2445:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2004;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2446:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2011;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2447;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2447:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2005;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2448:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2013;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2449;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2450;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2449:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2006;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2443;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2450:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2019;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2443;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2451:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2016;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2452:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2017;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2453;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2453:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2023;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2454:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2019;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2443;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2455:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2020;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2456:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2021;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2457;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2457:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2029;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2458:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1877;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2459:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2023;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2460:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2463;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2435;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2150;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2462;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2461:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2151;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2436;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2462:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2465;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2466;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2464;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2463:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2438;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2153;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2472;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2464:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2154;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2440;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2465:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2154;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2156;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2466:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2440;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2156;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2467:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2157;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2441;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2468:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2158;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2442;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2469;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2469:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2471;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2470;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2470:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2160;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2471:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2160;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2472:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2156;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2440;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2473:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2163;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2446;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2474;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2474:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2441;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2157;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2475:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2165;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2448;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2476;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2477;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2476:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2442;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2158;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2469;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2477:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2454;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2171;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2469;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2478:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2451;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2168;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2479:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2169;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2452;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2480;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2480:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2459;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2175;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2481:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2454;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2171;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2469;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2482:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2172;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2455;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2483:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2456;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2173;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2484;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2484:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2485;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2181;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2485:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2029;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2486:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2459;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2175;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2487:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2303;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1333;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2490;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2488:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2304;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1334;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2489:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2305;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1335;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2492;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2491;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2490:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1336;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2306;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2491:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2494;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2493;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2495;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2492:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1338;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2308;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2501;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2493:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_3_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1340;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 1341;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2494:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_3_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_3_")) {
											monitor.notifyAll();
											state = 2310;
											queueFrommasterToworker_3_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1340;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2495:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2310;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1341;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2496:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2311;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1342;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2497:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2312;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1343;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2498;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2498:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2500;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2499;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2499:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1346;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2500:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											receiver = "worker_0_";
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1346;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2501:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1341;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2310;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2502:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1348;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2316;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2503;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2503:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2311;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1342;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2504:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2318;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1350;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2506;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2505;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2505:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2312;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1343;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2498;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2506:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1356;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2324;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2498;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2507:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2321;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1353;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2508:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2322;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1354;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2509;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2509:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1360;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2328;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2510:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1356;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2324;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_2_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2498;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_2_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2511:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1357;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2325;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2512:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2326;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1358;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2513;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2513:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2333;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1366;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2514:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1360;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2328;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2515:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2516;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2482;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2176;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2516:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2455;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2024;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2517:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1872;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2430;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2518:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2344;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 26;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2519:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2403;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1718;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2525;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2520:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1487;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2365;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2521:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2366;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1503;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2522;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2522:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2524;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2523;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2523:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_2_";
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1506;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2524:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											receiver = "worker_1_";
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1506;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2525:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1487;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2365;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2526:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2405;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1720;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2527;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2528;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2527:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1503;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2366;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2522;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2528:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1875;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2433;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2529;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2529:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2524;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2523;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2530:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1873;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2431;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2531;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2531:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2027;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2458;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2532:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1875;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2433;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_0_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2529;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_0_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2533:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2025;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2456;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2534;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2534:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2179;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2485;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2535:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2458;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2027;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2536:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2533;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2177;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2483;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2537;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2537:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2538;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2539;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2540;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2538:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2179;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2485;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2539:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2181;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2179;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2540:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.CGThreads.CGMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2485;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2181;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2541:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2329;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1361;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2511;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2542:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2512;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2330;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1362;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									if (queueFromworker_3_Tomaster.peek() != null ) {
										monitor.notifyAll();
										state = 2543;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFromworker_3_Tomaster.take());
									}
									monitor.wait();
									break;
								case 2543:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(3);
											var receiverOptionsArray = new String[]{ "worker_0_","worker_2_","worker_1_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 2544;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2546;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2545;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2544:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_2_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 1365;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 1366;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2545:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_2_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_2_")) {
											monitor.notifyAll();
											state = 2333;
											queueFrommasterToworker_2_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1365;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2546:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.ExitMessage.class ) {
										if (receiver == null) {
											int rnd = new Random().nextInt(2);
											var receiverOptionsArray = new String[]{ "worker_1_","worker_0_" };
											receiver = receiverOptionsArray[rnd];
										}
										if (receiver.equals("worker_1_")) {
											monitor.notifyAll();
											state = 2333;
											queueFrommasterToworker_1_.put(box.get());
											return Optional.empty();
										}
										if (receiver.equals("worker_0_")) {
											monitor.notifyAll();
											state = 1366;
											queueFrommasterToworker_0_.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								default: throw new Exception("State number out of bounds");
							}
						}
					}
					
				}
			};
			case "worker_0_": return new IEnvironment() {
				
				@Override
				public String getName(){
					return environmentName;
				}
				
				@Override
				public <Any, AnyInput> Optional<Any> exchange(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					synchronized (monitor){
						while (true){
							switch (state){
								case 0:
									monitor.wait();
									break;
								case 1:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 9;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2:
									monitor.wait();
									break;
								case 3:
									monitor.wait();
									break;
								case 4:
									monitor.wait();
									break;
								case 5:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 45;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 6:
									monitor.wait();
									break;
								case 7:
									monitor.wait();
									break;
								case 8:
									monitor.wait();
									break;
								case 9:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 13;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 10:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 14;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 11:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 15;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 12:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 16;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 13:
									monitor.wait();
									break;
								case 14:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 18;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 15:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 19;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 16:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 20;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 17:
									monitor.wait();
									break;
								case 18:
									monitor.wait();
									break;
								case 19:
									monitor.wait();
									break;
								case 20:
									monitor.wait();
									break;
								case 21:
									monitor.wait();
									break;
								case 22:
									monitor.wait();
									break;
								case 23:
									monitor.wait();
									break;
								case 24:
									monitor.wait();
									break;
								case 25:
									monitor.wait();
									break;
								case 26:
									monitor.wait();
									break;
								case 27:
									monitor.wait();
									break;
								case 28:
									monitor.wait();
									break;
								case 29:
									monitor.wait();
									break;
								case 30:
									monitor.wait();
									break;
								case 31:
									monitor.wait();
									break;
								case 32:
									monitor.wait();
									break;
								case 33:
									monitor.wait();
									break;
								case 34:
									monitor.wait();
									break;
								case 35:
									monitor.wait();
									break;
								case 36:
									monitor.wait();
									break;
								case 37:
									monitor.wait();
									break;
								case 38:
									monitor.wait();
									break;
								case 39:
									monitor.wait();
									break;
								case 40:
									monitor.wait();
									break;
								case 41:
									monitor.wait();
									break;
								case 42:
									monitor.wait();
									break;
								case 43:
									monitor.wait();
									break;
								case 44:
									monitor.wait();
									break;
								case 45:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 49;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 46:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 50;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 47:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 51;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 48:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 52;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 49:
									monitor.wait();
									break;
								case 50:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 54;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 51:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 55;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 52:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 56;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 53:
									monitor.wait();
									break;
								case 54:
									monitor.wait();
									break;
								case 55:
									monitor.wait();
									break;
								case 56:
									monitor.wait();
									break;
								case 57:
									monitor.wait();
									break;
								case 58:
									monitor.wait();
									break;
								case 59:
									monitor.wait();
									break;
								case 60:
									monitor.wait();
									break;
								case 61:
									monitor.wait();
									break;
								case 62:
									monitor.wait();
									break;
								case 63:
									monitor.wait();
									break;
								case 64:
									monitor.wait();
									break;
								case 65:
									monitor.wait();
									break;
								case 66:
									monitor.wait();
									break;
								case 67:
									monitor.wait();
									break;
								case 68:
									monitor.wait();
									break;
								case 69:
									monitor.wait();
									break;
								case 70:
									monitor.wait();
									break;
								case 71:
									monitor.wait();
									break;
								case 72:
									monitor.wait();
									break;
								case 73:
									monitor.wait();
									break;
								case 74:
									monitor.wait();
									break;
								case 75:
									monitor.wait();
									break;
								case 76:
									monitor.wait();
									break;
								case 77:
									monitor.wait();
									break;
								case 78:
									monitor.wait();
									break;
								case 79:
									monitor.wait();
									break;
								case 80:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 85;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 81:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 92;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 82:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 305;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 83:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 391;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 84:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 477;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 85:
									monitor.wait();
									break;
								case 86:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 539;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 87:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 554;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 88:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 557;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 89:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 98;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 90:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 201;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 91:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 243;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 92:
									monitor.wait();
									break;
								case 93:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 284;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 94:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 298;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 95:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 301;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 96:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 103;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 97:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 162;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 98:
									monitor.wait();
									break;
								case 99:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 182;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 100:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 195;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 101:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 198;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 102:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 107;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 103:
									monitor.wait();
									break;
								case 104:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 105:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 151;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 106:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 158;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 107:
									monitor.wait();
									break;
								case 108:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 111;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 109:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 122;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 110:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 125;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 111:
									monitor.wait();
									break;
								case 112:
									monitor.wait();
									break;
								case 113:
									monitor.wait();
									break;
								case 114:
									monitor.wait();
									break;
								case 115:
									monitor.wait();
									break;
								case 116:
									monitor.wait();
									break;
								case 117:
									monitor.wait();
									break;
								case 118:
									monitor.wait();
									break;
								case 119:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 114;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 120:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 118;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 121:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 122:
									monitor.wait();
									break;
								case 123:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 124;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 124:
									monitor.wait();
									break;
								case 125:
									monitor.wait();
									break;
								case 126:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 118;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 127:
									monitor.wait();
									break;
								case 128:
									monitor.wait();
									break;
								case 129:
									monitor.wait();
									break;
								case 130:
									monitor.wait();
									break;
								case 131:
									monitor.wait();
									break;
								case 132:
									monitor.wait();
									break;
								case 133:
									monitor.wait();
									break;
								case 134:
									monitor.wait();
									break;
								case 135:
									monitor.wait();
									break;
								case 136:
									monitor.wait();
									break;
								case 137:
									monitor.wait();
									break;
								case 138:
									monitor.wait();
									break;
								case 139:
									monitor.wait();
									break;
								case 140:
									monitor.wait();
									break;
								case 141:
									monitor.wait();
									break;
								case 142:
									monitor.wait();
									break;
								case 143:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 111;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 144:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 132;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 145:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 141;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 146:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 114;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 147:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 135;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 148:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 149:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 118;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 150:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 122;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 151:
									monitor.wait();
									break;
								case 152:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 155;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 153:
									monitor.wait();
									break;
								case 154:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 124;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 155:
									monitor.wait();
									break;
								case 156:
									monitor.wait();
									break;
								case 157:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 125;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 158:
									monitor.wait();
									break;
								case 159:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 141;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 160:
									monitor.wait();
									break;
								case 161:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 118;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 162:
									monitor.wait();
									break;
								case 163:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 166;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 164:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 177;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 165:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 180;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 166:
									monitor.wait();
									break;
								case 167:
									monitor.wait();
									break;
								case 168:
									monitor.wait();
									break;
								case 169:
									monitor.wait();
									break;
								case 170:
									monitor.wait();
									break;
								case 171:
									monitor.wait();
									break;
								case 172:
									monitor.wait();
									break;
								case 173:
									monitor.wait();
									break;
								case 174:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 169;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 175:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 173;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 176:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 171;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 177:
									monitor.wait();
									break;
								case 178:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 179;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 179:
									monitor.wait();
									break;
								case 180:
									monitor.wait();
									break;
								case 181:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 173;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 182:
									monitor.wait();
									break;
								case 183:
									monitor.wait();
									break;
								case 184:
									monitor.wait();
									break;
								case 185:
									monitor.wait();
									break;
								case 186:
									monitor.wait();
									break;
								case 187:
									monitor.wait();
									break;
								case 188:
									monitor.wait();
									break;
								case 189:
									monitor.wait();
									break;
								case 190:
									monitor.wait();
									break;
								case 191:
									monitor.wait();
									break;
								case 192:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 185;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 193:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 191;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 194:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 187;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 195:
									monitor.wait();
									break;
								case 196:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 197;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 197:
									monitor.wait();
									break;
								case 198:
									monitor.wait();
									break;
								case 199:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 191;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 200:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 205;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 201:
									monitor.wait();
									break;
								case 202:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 225;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 203:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 237;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 204:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 240;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 205:
									monitor.wait();
									break;
								case 206:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 209;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 207:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 220;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 208:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 223;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 209:
									monitor.wait();
									break;
								case 210:
									monitor.wait();
									break;
								case 211:
									monitor.wait();
									break;
								case 212:
									monitor.wait();
									break;
								case 213:
									monitor.wait();
									break;
								case 214:
									monitor.wait();
									break;
								case 215:
									monitor.wait();
									break;
								case 216:
									monitor.wait();
									break;
								case 217:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 212;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 218:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 216;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 219:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 214;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 220:
									monitor.wait();
									break;
								case 221:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 222;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 222:
									monitor.wait();
									break;
								case 223:
									monitor.wait();
									break;
								case 224:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 216;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 225:
									monitor.wait();
									break;
								case 226:
									monitor.wait();
									break;
								case 227:
									monitor.wait();
									break;
								case 228:
									monitor.wait();
									break;
								case 229:
									monitor.wait();
									break;
								case 230:
									monitor.wait();
									break;
								case 231:
									monitor.wait();
									break;
								case 232:
									monitor.wait();
									break;
								case 233:
									monitor.wait();
									break;
								case 234:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 228;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 235:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 233;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 236:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 230;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 237:
									monitor.wait();
									break;
								case 238:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 239;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 239:
									monitor.wait();
									break;
								case 240:
									monitor.wait();
									break;
								case 241:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 233;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 242:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 247;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 243:
									monitor.wait();
									break;
								case 244:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 267;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 245:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 279;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 246:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 282;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 247:
									monitor.wait();
									break;
								case 248:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 251;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 249:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 262;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 250:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 265;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 251:
									monitor.wait();
									break;
								case 252:
									monitor.wait();
									break;
								case 253:
									monitor.wait();
									break;
								case 254:
									monitor.wait();
									break;
								case 255:
									monitor.wait();
									break;
								case 256:
									monitor.wait();
									break;
								case 257:
									monitor.wait();
									break;
								case 258:
									monitor.wait();
									break;
								case 259:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 254;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 260:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 258;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 261:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 256;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 262:
									monitor.wait();
									break;
								case 263:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 264;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 264:
									monitor.wait();
									break;
								case 265:
									monitor.wait();
									break;
								case 266:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 258;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 267:
									monitor.wait();
									break;
								case 268:
									monitor.wait();
									break;
								case 269:
									monitor.wait();
									break;
								case 270:
									monitor.wait();
									break;
								case 271:
									monitor.wait();
									break;
								case 272:
									monitor.wait();
									break;
								case 273:
									monitor.wait();
									break;
								case 274:
									monitor.wait();
									break;
								case 275:
									monitor.wait();
									break;
								case 276:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 270;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 277:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 275;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 278:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 272;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 279:
									monitor.wait();
									break;
								case 280:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 281;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 281:
									monitor.wait();
									break;
								case 282:
									monitor.wait();
									break;
								case 283:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 275;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 284:
									monitor.wait();
									break;
								case 285:
									monitor.wait();
									break;
								case 286:
									monitor.wait();
									break;
								case 287:
									monitor.wait();
									break;
								case 288:
									monitor.wait();
									break;
								case 289:
									monitor.wait();
									break;
								case 290:
									monitor.wait();
									break;
								case 291:
									monitor.wait();
									break;
								case 292:
									monitor.wait();
									break;
								case 293:
									monitor.wait();
									break;
								case 294:
									monitor.wait();
									break;
								case 295:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 287;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 296:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 294;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 297:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 289;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 298:
									monitor.wait();
									break;
								case 299:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 300;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 300:
									monitor.wait();
									break;
								case 301:
									monitor.wait();
									break;
								case 302:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 294;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 303:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 310;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 304:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 351;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 305:
									monitor.wait();
									break;
								case 306:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 371;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 307:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 384;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 308:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 387;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 309:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 314;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 310:
									monitor.wait();
									break;
								case 311:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 334;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 312:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 346;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 313:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 349;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 314:
									monitor.wait();
									break;
								case 315:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 318;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 316:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 329;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 317:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 332;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 318:
									monitor.wait();
									break;
								case 319:
									monitor.wait();
									break;
								case 320:
									monitor.wait();
									break;
								case 321:
									monitor.wait();
									break;
								case 322:
									monitor.wait();
									break;
								case 323:
									monitor.wait();
									break;
								case 324:
									monitor.wait();
									break;
								case 325:
									monitor.wait();
									break;
								case 326:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 321;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 327:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 325;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 328:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 323;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 329:
									monitor.wait();
									break;
								case 330:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 331;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 331:
									monitor.wait();
									break;
								case 332:
									monitor.wait();
									break;
								case 333:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 325;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 334:
									monitor.wait();
									break;
								case 335:
									monitor.wait();
									break;
								case 336:
									monitor.wait();
									break;
								case 337:
									monitor.wait();
									break;
								case 338:
									monitor.wait();
									break;
								case 339:
									monitor.wait();
									break;
								case 340:
									monitor.wait();
									break;
								case 341:
									monitor.wait();
									break;
								case 342:
									monitor.wait();
									break;
								case 343:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 337;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 344:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 342;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 345:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 339;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 346:
									monitor.wait();
									break;
								case 347:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 348;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 348:
									monitor.wait();
									break;
								case 349:
									monitor.wait();
									break;
								case 350:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 342;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 351:
									monitor.wait();
									break;
								case 352:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 355;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 353:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 366;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 354:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 369;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 355:
									monitor.wait();
									break;
								case 356:
									monitor.wait();
									break;
								case 357:
									monitor.wait();
									break;
								case 358:
									monitor.wait();
									break;
								case 359:
									monitor.wait();
									break;
								case 360:
									monitor.wait();
									break;
								case 361:
									monitor.wait();
									break;
								case 362:
									monitor.wait();
									break;
								case 363:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 358;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 364:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 362;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 365:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 360;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 366:
									monitor.wait();
									break;
								case 367:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 368;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 368:
									monitor.wait();
									break;
								case 369:
									monitor.wait();
									break;
								case 370:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 362;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 371:
									monitor.wait();
									break;
								case 372:
									monitor.wait();
									break;
								case 373:
									monitor.wait();
									break;
								case 374:
									monitor.wait();
									break;
								case 375:
									monitor.wait();
									break;
								case 376:
									monitor.wait();
									break;
								case 377:
									monitor.wait();
									break;
								case 378:
									monitor.wait();
									break;
								case 379:
									monitor.wait();
									break;
								case 380:
									monitor.wait();
									break;
								case 381:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 374;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 382:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 380;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 383:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 376;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 384:
									monitor.wait();
									break;
								case 385:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 386;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 386:
									monitor.wait();
									break;
								case 387:
									monitor.wait();
									break;
								case 388:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 380;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 389:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 395;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 390:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 416;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 391:
									monitor.wait();
									break;
								case 392:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 457;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 393:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 470;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 394:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 473;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 395:
									monitor.wait();
									break;
								case 396:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 399;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 397:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 410;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 398:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 413;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 399:
									monitor.wait();
									break;
								case 400:
									monitor.wait();
									break;
								case 401:
									monitor.wait();
									break;
								case 402:
									monitor.wait();
									break;
								case 403:
									monitor.wait();
									break;
								case 404:
									monitor.wait();
									break;
								case 405:
									monitor.wait();
									break;
								case 406:
									monitor.wait();
									break;
								case 407:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 402;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 408:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 406;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 409:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 404;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 410:
									monitor.wait();
									break;
								case 411:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 412;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 412:
									monitor.wait();
									break;
								case 413:
									monitor.wait();
									break;
								case 414:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 406;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 415:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 420;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 416:
									monitor.wait();
									break;
								case 417:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 440;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 418:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 452;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 419:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 455;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 420:
									monitor.wait();
									break;
								case 421:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 424;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 422:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 435;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 423:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 438;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 424:
									monitor.wait();
									break;
								case 425:
									monitor.wait();
									break;
								case 426:
									monitor.wait();
									break;
								case 427:
									monitor.wait();
									break;
								case 428:
									monitor.wait();
									break;
								case 429:
									monitor.wait();
									break;
								case 430:
									monitor.wait();
									break;
								case 431:
									monitor.wait();
									break;
								case 432:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 427;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 433:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 431;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 434:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 429;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 435:
									monitor.wait();
									break;
								case 436:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 437;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 437:
									monitor.wait();
									break;
								case 438:
									monitor.wait();
									break;
								case 439:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 431;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 440:
									monitor.wait();
									break;
								case 441:
									monitor.wait();
									break;
								case 442:
									monitor.wait();
									break;
								case 443:
									monitor.wait();
									break;
								case 444:
									monitor.wait();
									break;
								case 445:
									monitor.wait();
									break;
								case 446:
									monitor.wait();
									break;
								case 447:
									monitor.wait();
									break;
								case 448:
									monitor.wait();
									break;
								case 449:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 443;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 450:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 448;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 451:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 445;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 452:
									monitor.wait();
									break;
								case 453:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 454;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 454:
									monitor.wait();
									break;
								case 455:
									monitor.wait();
									break;
								case 456:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 448;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 457:
									monitor.wait();
									break;
								case 458:
									monitor.wait();
									break;
								case 459:
									monitor.wait();
									break;
								case 460:
									monitor.wait();
									break;
								case 461:
									monitor.wait();
									break;
								case 462:
									monitor.wait();
									break;
								case 463:
									monitor.wait();
									break;
								case 464:
									monitor.wait();
									break;
								case 465:
									monitor.wait();
									break;
								case 466:
									monitor.wait();
									break;
								case 467:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 460;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 468:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 466;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 469:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 462;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 470:
									monitor.wait();
									break;
								case 471:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 472;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 472:
									monitor.wait();
									break;
								case 473:
									monitor.wait();
									break;
								case 474:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 466;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 475:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 481;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 476:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 501;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 477:
									monitor.wait();
									break;
								case 478:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 521;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 479:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 534;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 480:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 537;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 481:
									monitor.wait();
									break;
								case 482:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 485;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 483:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 496;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 484:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 499;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 485:
									monitor.wait();
									break;
								case 486:
									monitor.wait();
									break;
								case 487:
									monitor.wait();
									break;
								case 488:
									monitor.wait();
									break;
								case 489:
									monitor.wait();
									break;
								case 490:
									monitor.wait();
									break;
								case 491:
									monitor.wait();
									break;
								case 492:
									monitor.wait();
									break;
								case 493:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 488;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 494:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 492;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 495:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 490;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 496:
									monitor.wait();
									break;
								case 497:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 498;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 498:
									monitor.wait();
									break;
								case 499:
									monitor.wait();
									break;
								case 500:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 492;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 501:
									monitor.wait();
									break;
								case 502:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 505;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 503:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 516;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 504:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 519;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 505:
									monitor.wait();
									break;
								case 506:
									monitor.wait();
									break;
								case 507:
									monitor.wait();
									break;
								case 508:
									monitor.wait();
									break;
								case 509:
									monitor.wait();
									break;
								case 510:
									monitor.wait();
									break;
								case 511:
									monitor.wait();
									break;
								case 512:
									monitor.wait();
									break;
								case 513:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 508;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 514:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 512;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 515:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 510;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 516:
									monitor.wait();
									break;
								case 517:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 518;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 518:
									monitor.wait();
									break;
								case 519:
									monitor.wait();
									break;
								case 520:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 512;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 521:
									monitor.wait();
									break;
								case 522:
									monitor.wait();
									break;
								case 523:
									monitor.wait();
									break;
								case 524:
									monitor.wait();
									break;
								case 525:
									monitor.wait();
									break;
								case 526:
									monitor.wait();
									break;
								case 527:
									monitor.wait();
									break;
								case 528:
									monitor.wait();
									break;
								case 529:
									monitor.wait();
									break;
								case 530:
									monitor.wait();
									break;
								case 531:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 524;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 532:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 530;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 533:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 526;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 534:
									monitor.wait();
									break;
								case 535:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 536;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 536:
									monitor.wait();
									break;
								case 537:
									monitor.wait();
									break;
								case 538:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 530;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 539:
									monitor.wait();
									break;
								case 540:
									monitor.wait();
									break;
								case 541:
									monitor.wait();
									break;
								case 542:
									monitor.wait();
									break;
								case 543:
									monitor.wait();
									break;
								case 544:
									monitor.wait();
									break;
								case 545:
									monitor.wait();
									break;
								case 546:
									monitor.wait();
									break;
								case 547:
									monitor.wait();
									break;
								case 548:
									monitor.wait();
									break;
								case 549:
									monitor.wait();
									break;
								case 550:
									monitor.wait();
									break;
								case 551:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 542;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 552:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 550;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 553:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 544;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 554:
									monitor.wait();
									break;
								case 555:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 556;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 556:
									monitor.wait();
									break;
								case 557:
									monitor.wait();
									break;
								case 558:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 550;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 559:
									monitor.wait();
									break;
								case 560:
									monitor.wait();
									break;
								case 561:
									monitor.wait();
									break;
								case 562:
									monitor.wait();
									break;
								case 563:
									monitor.wait();
									break;
								case 564:
									monitor.wait();
									break;
								case 565:
									monitor.wait();
									break;
								case 566:
									monitor.wait();
									break;
								case 567:
									monitor.wait();
									break;
								case 568:
									monitor.wait();
									break;
								case 569:
									monitor.wait();
									break;
								case 570:
									monitor.wait();
									break;
								case 571:
									monitor.wait();
									break;
								case 572:
									monitor.wait();
									break;
								case 573:
									monitor.wait();
									break;
								case 574:
									monitor.wait();
									break;
								case 575:
									monitor.wait();
									break;
								case 576:
									monitor.wait();
									break;
								case 577:
									monitor.wait();
									break;
								case 578:
									monitor.wait();
									break;
								case 579:
									monitor.wait();
									break;
								case 580:
									monitor.wait();
									break;
								case 581:
									monitor.wait();
									break;
								case 582:
									monitor.wait();
									break;
								case 583:
									monitor.wait();
									break;
								case 584:
									monitor.wait();
									break;
								case 585:
									monitor.wait();
									break;
								case 586:
									monitor.wait();
									break;
								case 587:
									monitor.wait();
									break;
								case 588:
									monitor.wait();
									break;
								case 589:
									monitor.wait();
									break;
								case 590:
									monitor.wait();
									break;
								case 591:
									monitor.wait();
									break;
								case 592:
									monitor.wait();
									break;
								case 593:
									monitor.wait();
									break;
								case 594:
									monitor.wait();
									break;
								case 595:
									monitor.wait();
									break;
								case 596:
									monitor.wait();
									break;
								case 597:
									monitor.wait();
									break;
								case 598:
									monitor.wait();
									break;
								case 599:
									monitor.wait();
									break;
								case 600:
									monitor.wait();
									break;
								case 601:
									monitor.wait();
									break;
								case 602:
									monitor.wait();
									break;
								case 603:
									monitor.wait();
									break;
								case 604:
									monitor.wait();
									break;
								case 605:
									monitor.wait();
									break;
								case 606:
									monitor.wait();
									break;
								case 607:
									monitor.wait();
									break;
								case 608:
									monitor.wait();
									break;
								case 609:
									monitor.wait();
									break;
								case 610:
									monitor.wait();
									break;
								case 611:
									monitor.wait();
									break;
								case 612:
									monitor.wait();
									break;
								case 613:
									monitor.wait();
									break;
								case 614:
									monitor.wait();
									break;
								case 615:
									monitor.wait();
									break;
								case 616:
									monitor.wait();
									break;
								case 617:
									monitor.wait();
									break;
								case 618:
									monitor.wait();
									break;
								case 619:
									monitor.wait();
									break;
								case 620:
									monitor.wait();
									break;
								case 621:
									monitor.wait();
									break;
								case 622:
									monitor.wait();
									break;
								case 623:
									monitor.wait();
									break;
								case 624:
									monitor.wait();
									break;
								case 625:
									monitor.wait();
									break;
								case 626:
									monitor.wait();
									break;
								case 627:
									monitor.wait();
									break;
								case 628:
									monitor.wait();
									break;
								case 629:
									monitor.wait();
									break;
								case 630:
									monitor.wait();
									break;
								case 631:
									monitor.wait();
									break;
								case 632:
									monitor.wait();
									break;
								case 633:
									monitor.wait();
									break;
								case 634:
									monitor.wait();
									break;
								case 635:
									monitor.wait();
									break;
								case 636:
									monitor.wait();
									break;
								case 637:
									monitor.wait();
									break;
								case 638:
									monitor.wait();
									break;
								case 639:
									monitor.wait();
									break;
								case 640:
									monitor.wait();
									break;
								case 641:
									monitor.wait();
									break;
								case 642:
									monitor.wait();
									break;
								case 643:
									monitor.wait();
									break;
								case 644:
									monitor.wait();
									break;
								case 645:
									monitor.wait();
									break;
								case 646:
									monitor.wait();
									break;
								case 647:
									monitor.wait();
									break;
								case 648:
									monitor.wait();
									break;
								case 649:
									monitor.wait();
									break;
								case 650:
									monitor.wait();
									break;
								case 651:
									monitor.wait();
									break;
								case 652:
									monitor.wait();
									break;
								case 653:
									monitor.wait();
									break;
								case 654:
									monitor.wait();
									break;
								case 655:
									monitor.wait();
									break;
								case 656:
									monitor.wait();
									break;
								case 657:
									monitor.wait();
									break;
								case 658:
									monitor.wait();
									break;
								case 659:
									monitor.wait();
									break;
								case 660:
									monitor.wait();
									break;
								case 661:
									monitor.wait();
									break;
								case 662:
									monitor.wait();
									break;
								case 663:
									monitor.wait();
									break;
								case 664:
									monitor.wait();
									break;
								case 665:
									monitor.wait();
									break;
								case 666:
									monitor.wait();
									break;
								case 667:
									monitor.wait();
									break;
								case 668:
									monitor.wait();
									break;
								case 669:
									monitor.wait();
									break;
								case 670:
									monitor.wait();
									break;
								case 671:
									monitor.wait();
									break;
								case 672:
									monitor.wait();
									break;
								case 673:
									monitor.wait();
									break;
								case 674:
									monitor.wait();
									break;
								case 675:
									monitor.wait();
									break;
								case 676:
									monitor.wait();
									break;
								case 677:
									monitor.wait();
									break;
								case 678:
									monitor.wait();
									break;
								case 679:
									monitor.wait();
									break;
								case 680:
									monitor.wait();
									break;
								case 681:
									monitor.wait();
									break;
								case 682:
									monitor.wait();
									break;
								case 683:
									monitor.wait();
									break;
								case 684:
									monitor.wait();
									break;
								case 685:
									monitor.wait();
									break;
								case 686:
									monitor.wait();
									break;
								case 687:
									monitor.wait();
									break;
								case 688:
									monitor.wait();
									break;
								case 689:
									monitor.wait();
									break;
								case 690:
									monitor.wait();
									break;
								case 691:
									monitor.wait();
									break;
								case 692:
									monitor.wait();
									break;
								case 693:
									monitor.wait();
									break;
								case 694:
									monitor.wait();
									break;
								case 695:
									monitor.wait();
									break;
								case 696:
									monitor.wait();
									break;
								case 697:
									monitor.wait();
									break;
								case 698:
									monitor.wait();
									break;
								case 699:
									monitor.wait();
									break;
								case 700:
									monitor.wait();
									break;
								case 701:
									monitor.wait();
									break;
								case 702:
									monitor.wait();
									break;
								case 703:
									monitor.wait();
									break;
								case 704:
									monitor.wait();
									break;
								case 705:
									monitor.wait();
									break;
								case 706:
									monitor.wait();
									break;
								case 707:
									monitor.wait();
									break;
								case 708:
									monitor.wait();
									break;
								case 709:
									monitor.wait();
									break;
								case 710:
									monitor.wait();
									break;
								case 711:
									monitor.wait();
									break;
								case 712:
									monitor.wait();
									break;
								case 713:
									monitor.wait();
									break;
								case 714:
									monitor.wait();
									break;
								case 715:
									monitor.wait();
									break;
								case 716:
									monitor.wait();
									break;
								case 717:
									monitor.wait();
									break;
								case 718:
									monitor.wait();
									break;
								case 719:
									monitor.wait();
									break;
								case 720:
									monitor.wait();
									break;
								case 721:
									monitor.wait();
									break;
								case 722:
									monitor.wait();
									break;
								case 723:
									monitor.wait();
									break;
								case 724:
									monitor.wait();
									break;
								case 725:
									monitor.wait();
									break;
								case 726:
									monitor.wait();
									break;
								case 727:
									monitor.wait();
									break;
								case 728:
									monitor.wait();
									break;
								case 729:
									monitor.wait();
									break;
								case 730:
									monitor.wait();
									break;
								case 731:
									monitor.wait();
									break;
								case 732:
									monitor.wait();
									break;
								case 733:
									monitor.wait();
									break;
								case 734:
									monitor.wait();
									break;
								case 735:
									monitor.wait();
									break;
								case 736:
									monitor.wait();
									break;
								case 737:
									monitor.wait();
									break;
								case 738:
									monitor.wait();
									break;
								case 739:
									monitor.wait();
									break;
								case 740:
									monitor.wait();
									break;
								case 741:
									monitor.wait();
									break;
								case 742:
									monitor.wait();
									break;
								case 743:
									monitor.wait();
									break;
								case 744:
									monitor.wait();
									break;
								case 745:
									monitor.wait();
									break;
								case 746:
									monitor.wait();
									break;
								case 747:
									monitor.wait();
									break;
								case 748:
									monitor.wait();
									break;
								case 749:
									monitor.wait();
									break;
								case 750:
									monitor.wait();
									break;
								case 751:
									monitor.wait();
									break;
								case 752:
									monitor.wait();
									break;
								case 753:
									monitor.wait();
									break;
								case 754:
									monitor.wait();
									break;
								case 755:
									monitor.wait();
									break;
								case 756:
									monitor.wait();
									break;
								case 757:
									monitor.wait();
									break;
								case 758:
									monitor.wait();
									break;
								case 759:
									monitor.wait();
									break;
								case 760:
									monitor.wait();
									break;
								case 761:
									monitor.wait();
									break;
								case 762:
									monitor.wait();
									break;
								case 763:
									monitor.wait();
									break;
								case 764:
									monitor.wait();
									break;
								case 765:
									monitor.wait();
									break;
								case 766:
									monitor.wait();
									break;
								case 767:
									monitor.wait();
									break;
								case 768:
									monitor.wait();
									break;
								case 769:
									monitor.wait();
									break;
								case 770:
									monitor.wait();
									break;
								case 771:
									monitor.wait();
									break;
								case 772:
									monitor.wait();
									break;
								case 773:
									monitor.wait();
									break;
								case 774:
									monitor.wait();
									break;
								case 775:
									monitor.wait();
									break;
								case 776:
									monitor.wait();
									break;
								case 777:
									monitor.wait();
									break;
								case 778:
									monitor.wait();
									break;
								case 779:
									monitor.wait();
									break;
								case 780:
									monitor.wait();
									break;
								case 781:
									monitor.wait();
									break;
								case 782:
									monitor.wait();
									break;
								case 783:
									monitor.wait();
									break;
								case 784:
									monitor.wait();
									break;
								case 785:
									monitor.wait();
									break;
								case 786:
									monitor.wait();
									break;
								case 787:
									monitor.wait();
									break;
								case 788:
									monitor.wait();
									break;
								case 789:
									monitor.wait();
									break;
								case 790:
									monitor.wait();
									break;
								case 791:
									monitor.wait();
									break;
								case 792:
									monitor.wait();
									break;
								case 793:
									monitor.wait();
									break;
								case 794:
									monitor.wait();
									break;
								case 795:
									monitor.wait();
									break;
								case 796:
									monitor.wait();
									break;
								case 797:
									monitor.wait();
									break;
								case 798:
									monitor.wait();
									break;
								case 799:
									monitor.wait();
									break;
								case 800:
									monitor.wait();
									break;
								case 801:
									monitor.wait();
									break;
								case 802:
									monitor.wait();
									break;
								case 803:
									monitor.wait();
									break;
								case 804:
									monitor.wait();
									break;
								case 805:
									monitor.wait();
									break;
								case 806:
									monitor.wait();
									break;
								case 807:
									monitor.wait();
									break;
								case 808:
									monitor.wait();
									break;
								case 809:
									monitor.wait();
									break;
								case 810:
									monitor.wait();
									break;
								case 811:
									monitor.wait();
									break;
								case 812:
									monitor.wait();
									break;
								case 813:
									monitor.wait();
									break;
								case 814:
									monitor.wait();
									break;
								case 815:
									monitor.wait();
									break;
								case 816:
									monitor.wait();
									break;
								case 817:
									monitor.wait();
									break;
								case 818:
									monitor.wait();
									break;
								case 819:
									monitor.wait();
									break;
								case 820:
									monitor.wait();
									break;
								case 821:
									monitor.wait();
									break;
								case 822:
									monitor.wait();
									break;
								case 823:
									monitor.wait();
									break;
								case 824:
									monitor.wait();
									break;
								case 825:
									monitor.wait();
									break;
								case 826:
									monitor.wait();
									break;
								case 827:
									monitor.wait();
									break;
								case 828:
									monitor.wait();
									break;
								case 829:
									monitor.wait();
									break;
								case 830:
									monitor.wait();
									break;
								case 831:
									monitor.wait();
									break;
								case 832:
									monitor.wait();
									break;
								case 833:
									monitor.wait();
									break;
								case 834:
									monitor.wait();
									break;
								case 835:
									monitor.wait();
									break;
								case 836:
									monitor.wait();
									break;
								case 837:
									monitor.wait();
									break;
								case 838:
									monitor.wait();
									break;
								case 839:
									monitor.wait();
									break;
								case 840:
									monitor.wait();
									break;
								case 841:
									monitor.wait();
									break;
								case 842:
									monitor.wait();
									break;
								case 843:
									monitor.wait();
									break;
								case 844:
									monitor.wait();
									break;
								case 845:
									monitor.wait();
									break;
								case 846:
									monitor.wait();
									break;
								case 847:
									monitor.wait();
									break;
								case 848:
									monitor.wait();
									break;
								case 849:
									monitor.wait();
									break;
								case 850:
									monitor.wait();
									break;
								case 851:
									monitor.wait();
									break;
								case 852:
									monitor.wait();
									break;
								case 853:
									monitor.wait();
									break;
								case 854:
									monitor.wait();
									break;
								case 855:
									monitor.wait();
									break;
								case 856:
									monitor.wait();
									break;
								case 857:
									monitor.wait();
									break;
								case 858:
									monitor.wait();
									break;
								case 859:
									monitor.wait();
									break;
								case 860:
									monitor.wait();
									break;
								case 861:
									monitor.wait();
									break;
								case 862:
									monitor.wait();
									break;
								case 863:
									monitor.wait();
									break;
								case 864:
									monitor.wait();
									break;
								case 865:
									monitor.wait();
									break;
								case 866:
									monitor.wait();
									break;
								case 867:
									monitor.wait();
									break;
								case 868:
									monitor.wait();
									break;
								case 869:
									monitor.wait();
									break;
								case 870:
									monitor.wait();
									break;
								case 871:
									monitor.wait();
									break;
								case 872:
									monitor.wait();
									break;
								case 873:
									monitor.wait();
									break;
								case 874:
									monitor.wait();
									break;
								case 875:
									monitor.wait();
									break;
								case 876:
									monitor.wait();
									break;
								case 877:
									monitor.wait();
									break;
								case 878:
									monitor.wait();
									break;
								case 879:
									monitor.wait();
									break;
								case 880:
									monitor.wait();
									break;
								case 881:
									monitor.wait();
									break;
								case 882:
									monitor.wait();
									break;
								case 883:
									monitor.wait();
									break;
								case 884:
									monitor.wait();
									break;
								case 885:
									monitor.wait();
									break;
								case 886:
									monitor.wait();
									break;
								case 887:
									monitor.wait();
									break;
								case 888:
									monitor.wait();
									break;
								case 889:
									monitor.wait();
									break;
								case 890:
									monitor.wait();
									break;
								case 891:
									monitor.wait();
									break;
								case 892:
									monitor.wait();
									break;
								case 893:
									monitor.wait();
									break;
								case 894:
									monitor.wait();
									break;
								case 895:
									monitor.wait();
									break;
								case 896:
									monitor.wait();
									break;
								case 897:
									monitor.wait();
									break;
								case 898:
									monitor.wait();
									break;
								case 899:
									monitor.wait();
									break;
								case 900:
									monitor.wait();
									break;
								case 901:
									monitor.wait();
									break;
								case 902:
									monitor.wait();
									break;
								case 903:
									monitor.wait();
									break;
								case 904:
									monitor.wait();
									break;
								case 905:
									monitor.wait();
									break;
								case 906:
									monitor.wait();
									break;
								case 907:
									monitor.wait();
									break;
								case 908:
									monitor.wait();
									break;
								case 909:
									monitor.wait();
									break;
								case 910:
									monitor.wait();
									break;
								case 911:
									monitor.wait();
									break;
								case 912:
									monitor.wait();
									break;
								case 913:
									monitor.wait();
									break;
								case 914:
									monitor.wait();
									break;
								case 915:
									monitor.wait();
									break;
								case 916:
									monitor.wait();
									break;
								case 917:
									monitor.wait();
									break;
								case 918:
									monitor.wait();
									break;
								case 919:
									monitor.wait();
									break;
								case 920:
									monitor.wait();
									break;
								case 921:
									monitor.wait();
									break;
								case 922:
									monitor.wait();
									break;
								case 923:
									monitor.wait();
									break;
								case 924:
									monitor.wait();
									break;
								case 925:
									monitor.wait();
									break;
								case 926:
									monitor.wait();
									break;
								case 927:
									monitor.wait();
									break;
								case 928:
									monitor.wait();
									break;
								case 929:
									monitor.wait();
									break;
								case 930:
									monitor.wait();
									break;
								case 931:
									monitor.wait();
									break;
								case 932:
									monitor.wait();
									break;
								case 933:
									monitor.wait();
									break;
								case 934:
									monitor.wait();
									break;
								case 935:
									monitor.wait();
									break;
								case 936:
									monitor.wait();
									break;
								case 937:
									monitor.wait();
									break;
								case 938:
									monitor.wait();
									break;
								case 939:
									monitor.wait();
									break;
								case 940:
									monitor.wait();
									break;
								case 941:
									monitor.wait();
									break;
								case 942:
									monitor.wait();
									break;
								case 943:
									monitor.wait();
									break;
								case 944:
									monitor.wait();
									break;
								case 945:
									monitor.wait();
									break;
								case 946:
									monitor.wait();
									break;
								case 947:
									monitor.wait();
									break;
								case 948:
									monitor.wait();
									break;
								case 949:
									monitor.wait();
									break;
								case 950:
									monitor.wait();
									break;
								case 951:
									monitor.wait();
									break;
								case 952:
									monitor.wait();
									break;
								case 953:
									monitor.wait();
									break;
								case 954:
									monitor.wait();
									break;
								case 955:
									monitor.wait();
									break;
								case 956:
									monitor.wait();
									break;
								case 957:
									monitor.wait();
									break;
								case 958:
									monitor.wait();
									break;
								case 959:
									monitor.wait();
									break;
								case 960:
									monitor.wait();
									break;
								case 961:
									monitor.wait();
									break;
								case 962:
									monitor.wait();
									break;
								case 963:
									monitor.wait();
									break;
								case 964:
									monitor.wait();
									break;
								case 965:
									monitor.wait();
									break;
								case 966:
									monitor.wait();
									break;
								case 967:
									monitor.wait();
									break;
								case 968:
									monitor.wait();
									break;
								case 969:
									monitor.wait();
									break;
								case 970:
									monitor.wait();
									break;
								case 971:
									monitor.wait();
									break;
								case 972:
									monitor.wait();
									break;
								case 973:
									monitor.wait();
									break;
								case 974:
									monitor.wait();
									break;
								case 975:
									monitor.wait();
									break;
								case 976:
									monitor.wait();
									break;
								case 977:
									monitor.wait();
									break;
								case 978:
									monitor.wait();
									break;
								case 979:
									monitor.wait();
									break;
								case 980:
									monitor.wait();
									break;
								case 981:
									monitor.wait();
									break;
								case 982:
									monitor.wait();
									break;
								case 983:
									monitor.wait();
									break;
								case 984:
									monitor.wait();
									break;
								case 985:
									monitor.wait();
									break;
								case 986:
									monitor.wait();
									break;
								case 987:
									monitor.wait();
									break;
								case 988:
									monitor.wait();
									break;
								case 989:
									monitor.wait();
									break;
								case 990:
									monitor.wait();
									break;
								case 991:
									monitor.wait();
									break;
								case 992:
									monitor.wait();
									break;
								case 993:
									monitor.wait();
									break;
								case 994:
									monitor.wait();
									break;
								case 995:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 718;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 996:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 719;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 997:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 720;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 998:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 722;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 999:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 723;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1000:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 724;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1001:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1004;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1002:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 727;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1003:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 728;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1004:
									monitor.wait();
									break;
								case 1005:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 729;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1006:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 730;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1007:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 731;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1008:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 732;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1009:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 733;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1010:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 734;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1011:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1013;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1012:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 736;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1013:
									monitor.wait();
									break;
								case 1014:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 737;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1015:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 738;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1016:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 739;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1017:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1018;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1018:
									monitor.wait();
									break;
								case 1019:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 737;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1020:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 742;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1021:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 738;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1022:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 744;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1023:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 739;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1024:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 750;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1025:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 747;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1026:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 748;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1027:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 754;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1028:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 750;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1029:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 751;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1030:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 752;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1031:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 758;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1032:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 754;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1033:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 755;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1034:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 756;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1035:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1036;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1036:
									monitor.wait();
									break;
								case 1037:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 758;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1038:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 729;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1039:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 761;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1040:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 762;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1041:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 731;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1042:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 765;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1043:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 766;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1044:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 733;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1045:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 840;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1046:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 770;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1047:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 772;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1048:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 774;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1049:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 776;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1050:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 849;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1051:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 736;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1052:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 772;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1053:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 783;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1054:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 742;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1055:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 774;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1056:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 787;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1057:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 744;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1058:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 776;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1059:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 805;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1060:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 750;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1061:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 734;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1062:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 796;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1063:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 747;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1064:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 799;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1065:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 748;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1066:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 817;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1067:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 754;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1068:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 805;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1069:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 732;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1070:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 808;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1071:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 751;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1072:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 811;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1073:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 752;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1074:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 829;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1075:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 758;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1076:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 817;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1077:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 730;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1078:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 820;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1079:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 755;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1080:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 823;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1081:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 756;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1082:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 883;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1083:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1036;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1084:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 829;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1085:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 831;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1086:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 832;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1087:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 834;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1088:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 835;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1089:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 895;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1090:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 838;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1091:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 840;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1092:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 841;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1093:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 843;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1094:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 845;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1095:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 904;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1096:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 849;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1097:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 841;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1098:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 852;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1099:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 843;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1100:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 855;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1101:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 845;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1102:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 867;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1103:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 861;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1104:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 863;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1105:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 875;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1106:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 867;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1107:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 869;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1108:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 871;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1109:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 884;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1110:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 875;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1111:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 877;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1112:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 879;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1113:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 938;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1114:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 883;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1115:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 884;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1116:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 886;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1117:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 887;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1118:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 889;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1119:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 890;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1120:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 950;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1121:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 893;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1122:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 895;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1123:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 896;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1124:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 898;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1125:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 900;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1126:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 959;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1127:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 904;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1128:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 896;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1129:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 907;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1130:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 898;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1131:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 910;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1132:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 900;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1133:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 922;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1134:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 916;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1135:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 918;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1136:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 930;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1137:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 922;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1138:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 924;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1139:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 926;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1140:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 939;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1141:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 930;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1142:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 932;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1143:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 934;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1144:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 993;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1145:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 938;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1146:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 939;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1147:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 941;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1148:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 942;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1149:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 944;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1150:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 945;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1151:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1153;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1152:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 948;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1153:
									monitor.wait();
									break;
								case 1154:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 950;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1155:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 951;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1156:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 953;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1157:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 955;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1158:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1159;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1159:
									monitor.wait();
									break;
								case 1160:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 959;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1161:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 951;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1162:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 962;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1163:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 953;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1164:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 965;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1165:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 955;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1166:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 977;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1167:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 971;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1168:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 973;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1169:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 985;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1170:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 977;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1171:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 979;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1172:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 981;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1173:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 994;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1174:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 985;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1175:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 987;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1176:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 989;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1177:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1178;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1178:
									monitor.wait();
									break;
								case 1179:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 993;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1180:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 994;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1181:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 995;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1182:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 996;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1183:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 997;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1184:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 998;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1185:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 999;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1186:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1000;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1187:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1190;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1188:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1002;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1189:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1003;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1190:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1004;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1191:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1005;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1192:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1006;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1193:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1007;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1194:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1008;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1195:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1009;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1196:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1010;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1197:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1199;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1198:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1012;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1199:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1013;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1200:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1014;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1201:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1015;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1202:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1016;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1203:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1204;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1204:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1018;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1205:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1014;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1206:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1020;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1207:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1015;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1208:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1022;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1209:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1016;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1210:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1028;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1211:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1025;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1212:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1026;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1213:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1032;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1214:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1028;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1215:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1029;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1216:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1030;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1217:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1037;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1218:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1032;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1219:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1033;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1220:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1034;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1221:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1222;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1222:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1036;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1223:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1037;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1224:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1005;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1225:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1039;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1226:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1040;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1227:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1007;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1228:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1042;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1229:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1043;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1230:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1009;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1231:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1091;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1232:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1046;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1233:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1047;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1234:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1048;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1235:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1049;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1236:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1096;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1237:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1012;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1238:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1047;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1239:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1053;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1240:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1020;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1241:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1048;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1242:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1056;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1243:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1022;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1244:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1049;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1245:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1068;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1246:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1028;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1247:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1010;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1248:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1062;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1249:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1025;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1250:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1064;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1251:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1026;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1252:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1076;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1253:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1032;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1254:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1068;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1255:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1008;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1256:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1070;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1257:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1029;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1258:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1072;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1259:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1030;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1260:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1084;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1261:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1037;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1262:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1076;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1263:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1006;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1264:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1078;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1265:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1033;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1266:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1080;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1267:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1034;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1268:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1114;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1269:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1222;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1270:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1084;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1271:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1085;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1272:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1086;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1273:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1087;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1274:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1088;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1275:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1122;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1276:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1090;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1277:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1091;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1278:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1092;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1279:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1093;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1280:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1094;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1281:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1127;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1282:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1096;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1283:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1092;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1284:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1098;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1285:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1093;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1286:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1100;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1287:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1094;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1288:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1106;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1289:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1103;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1290:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1104;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1291:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1110;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1292:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1106;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1293:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1107;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1294:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1108;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1295:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1115;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1296:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1110;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1297:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1111;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1298:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1112;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1299:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1145;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1300:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1114;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1301:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1115;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1302:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1116;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1303:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1117;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1304:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1118;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1305:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1119;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1306:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1154;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1307:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1121;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1308:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1122;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1309:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1123;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1310:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1124;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1311:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1125;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1312:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1160;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1313:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1127;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1314:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1123;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1315:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1129;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1316:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1124;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1317:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1131;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1318:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1125;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1319:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1137;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1320:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1134;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1321:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1135;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1322:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1141;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1323:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1137;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1324:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1138;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1325:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1139;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1326:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1146;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1327:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1141;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1328:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1142;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1329:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1143;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1330:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1179;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1331:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1145;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1332:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1146;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1333:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1147;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1334:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1148;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1335:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1149;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1336:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1150;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1337:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1339;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1338:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1152;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1339:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1153;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1340:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1154;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1341:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1155;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1342:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1156;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1343:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1157;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1344:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1345;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1345:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1159;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1346:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1160;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1347:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1155;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1348:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1162;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1349:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1156;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1350:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1164;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1351:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1157;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1352:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1170;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1353:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1167;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1354:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1168;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1355:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1174;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1356:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1170;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1357:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1171;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1358:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1172;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1359:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1180;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1360:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1174;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1361:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1175;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1362:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1176;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1363:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1364;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1364:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1178;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1365:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1179;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1366:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1180;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1367:
									monitor.wait();
									break;
								case 1368:
									monitor.wait();
									break;
								case 1369:
									monitor.wait();
									break;
								case 1370:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1373;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1371:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1374;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1372:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1375;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1373:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1377;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1374:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1378;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1375:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1379;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1376:
									monitor.wait();
									break;
								case 1377:
									monitor.wait();
									break;
								case 1378:
									monitor.wait();
									break;
								case 1379:
									monitor.wait();
									break;
								case 1380:
									monitor.wait();
									break;
								case 1381:
									monitor.wait();
									break;
								case 1382:
									monitor.wait();
									break;
								case 1383:
									monitor.wait();
									break;
								case 1384:
									monitor.wait();
									break;
								case 1385:
									monitor.wait();
									break;
								case 1386:
									monitor.wait();
									break;
								case 1387:
									monitor.wait();
									break;
								case 1388:
									monitor.wait();
									break;
								case 1389:
									monitor.wait();
									break;
								case 1390:
									monitor.wait();
									break;
								case 1391:
									monitor.wait();
									break;
								case 1392:
									monitor.wait();
									break;
								case 1393:
									monitor.wait();
									break;
								case 1394:
									monitor.wait();
									break;
								case 1395:
									monitor.wait();
									break;
								case 1396:
									monitor.wait();
									break;
								case 1397:
									monitor.wait();
									break;
								case 1398:
									monitor.wait();
									break;
								case 1399:
									monitor.wait();
									break;
								case 1400:
									monitor.wait();
									break;
								case 1401:
									monitor.wait();
									break;
								case 1402:
									monitor.wait();
									break;
								case 1403:
									monitor.wait();
									break;
								case 1404:
									monitor.wait();
									break;
								case 1405:
									monitor.wait();
									break;
								case 1406:
									monitor.wait();
									break;
								case 1407:
									monitor.wait();
									break;
								case 1408:
									monitor.wait();
									break;
								case 1409:
									monitor.wait();
									break;
								case 1410:
									monitor.wait();
									break;
								case 1411:
									monitor.wait();
									break;
								case 1412:
									monitor.wait();
									break;
								case 1413:
									monitor.wait();
									break;
								case 1414:
									monitor.wait();
									break;
								case 1415:
									monitor.wait();
									break;
								case 1416:
									monitor.wait();
									break;
								case 1417:
									monitor.wait();
									break;
								case 1418:
									monitor.wait();
									break;
								case 1419:
									monitor.wait();
									break;
								case 1420:
									monitor.wait();
									break;
								case 1421:
									monitor.wait();
									break;
								case 1422:
									monitor.wait();
									break;
								case 1423:
									monitor.wait();
									break;
								case 1424:
									monitor.wait();
									break;
								case 1425:
									monitor.wait();
									break;
								case 1426:
									monitor.wait();
									break;
								case 1427:
									monitor.wait();
									break;
								case 1428:
									monitor.wait();
									break;
								case 1429:
									monitor.wait();
									break;
								case 1430:
									monitor.wait();
									break;
								case 1431:
									monitor.wait();
									break;
								case 1432:
									monitor.wait();
									break;
								case 1433:
									monitor.wait();
									break;
								case 1434:
									monitor.wait();
									break;
								case 1435:
									monitor.wait();
									break;
								case 1436:
									monitor.wait();
									break;
								case 1437:
									monitor.wait();
									break;
								case 1438:
									monitor.wait();
									break;
								case 1439:
									monitor.wait();
									break;
								case 1440:
									monitor.wait();
									break;
								case 1441:
									monitor.wait();
									break;
								case 1442:
									monitor.wait();
									break;
								case 1443:
									monitor.wait();
									break;
								case 1444:
									monitor.wait();
									break;
								case 1445:
									monitor.wait();
									break;
								case 1446:
									monitor.wait();
									break;
								case 1447:
									monitor.wait();
									break;
								case 1448:
									monitor.wait();
									break;
								case 1449:
									monitor.wait();
									break;
								case 1450:
									monitor.wait();
									break;
								case 1451:
									monitor.wait();
									break;
								case 1452:
									monitor.wait();
									break;
								case 1453:
									monitor.wait();
									break;
								case 1454:
									monitor.wait();
									break;
								case 1455:
									monitor.wait();
									break;
								case 1456:
									monitor.wait();
									break;
								case 1457:
									monitor.wait();
									break;
								case 1458:
									monitor.wait();
									break;
								case 1459:
									monitor.wait();
									break;
								case 1460:
									monitor.wait();
									break;
								case 1461:
									monitor.wait();
									break;
								case 1462:
									monitor.wait();
									break;
								case 1463:
									monitor.wait();
									break;
								case 1464:
									monitor.wait();
									break;
								case 1465:
									monitor.wait();
									break;
								case 1466:
									monitor.wait();
									break;
								case 1467:
									monitor.wait();
									break;
								case 1468:
									monitor.wait();
									break;
								case 1469:
									monitor.wait();
									break;
								case 1470:
									monitor.wait();
									break;
								case 1471:
									monitor.wait();
									break;
								case 1472:
									monitor.wait();
									break;
								case 1473:
									monitor.wait();
									break;
								case 1474:
									monitor.wait();
									break;
								case 1475:
									monitor.wait();
									break;
								case 1476:
									monitor.wait();
									break;
								case 1477:
									monitor.wait();
									break;
								case 1478:
									monitor.wait();
									break;
								case 1479:
									monitor.wait();
									break;
								case 1480:
									monitor.wait();
									break;
								case 1481:
									monitor.wait();
									break;
								case 1482:
									monitor.wait();
									break;
								case 1483:
									monitor.wait();
									break;
								case 1484:
									monitor.wait();
									break;
								case 1485:
									monitor.wait();
									break;
								case 1486:
									monitor.wait();
									break;
								case 1487:
									monitor.wait();
									break;
								case 1488:
									monitor.wait();
									break;
								case 1489:
									monitor.wait();
									break;
								case 1490:
									monitor.wait();
									break;
								case 1491:
									monitor.wait();
									break;
								case 1492:
									monitor.wait();
									break;
								case 1493:
									monitor.wait();
									break;
								case 1494:
									monitor.wait();
									break;
								case 1495:
									monitor.wait();
									break;
								case 1496:
									monitor.wait();
									break;
								case 1497:
									monitor.wait();
									break;
								case 1498:
									monitor.wait();
									break;
								case 1499:
									monitor.wait();
									break;
								case 1500:
									monitor.wait();
									break;
								case 1501:
									monitor.wait();
									break;
								case 1502:
									monitor.wait();
									break;
								case 1503:
									monitor.wait();
									break;
								case 1504:
									monitor.wait();
									break;
								case 1505:
									monitor.wait();
									break;
								case 1506:
									monitor.wait();
									break;
								case 1507:
									monitor.wait();
									break;
								case 1508:
									monitor.wait();
									break;
								case 1509:
									monitor.wait();
									break;
								case 1510:
									monitor.wait();
									break;
								case 1511:
									monitor.wait();
									break;
								case 1512:
									monitor.wait();
									break;
								case 1513:
									monitor.wait();
									break;
								case 1514:
									monitor.wait();
									break;
								case 1515:
									monitor.wait();
									break;
								case 1516:
									monitor.wait();
									break;
								case 1517:
									monitor.wait();
									break;
								case 1518:
									monitor.wait();
									break;
								case 1519:
									monitor.wait();
									break;
								case 1520:
									monitor.wait();
									break;
								case 1521:
									monitor.wait();
									break;
								case 1522:
									monitor.wait();
									break;
								case 1523:
									monitor.wait();
									break;
								case 1524:
									monitor.wait();
									break;
								case 1525:
									monitor.wait();
									break;
								case 1526:
									monitor.wait();
									break;
								case 1527:
									monitor.wait();
									break;
								case 1528:
									monitor.wait();
									break;
								case 1529:
									monitor.wait();
									break;
								case 1530:
									monitor.wait();
									break;
								case 1531:
									monitor.wait();
									break;
								case 1532:
									monitor.wait();
									break;
								case 1533:
									monitor.wait();
									break;
								case 1534:
									monitor.wait();
									break;
								case 1535:
									monitor.wait();
									break;
								case 1536:
									monitor.wait();
									break;
								case 1537:
									monitor.wait();
									break;
								case 1538:
									monitor.wait();
									break;
								case 1539:
									monitor.wait();
									break;
								case 1540:
									monitor.wait();
									break;
								case 1541:
									monitor.wait();
									break;
								case 1542:
									monitor.wait();
									break;
								case 1543:
									monitor.wait();
									break;
								case 1544:
									monitor.wait();
									break;
								case 1545:
									monitor.wait();
									break;
								case 1546:
									monitor.wait();
									break;
								case 1547:
									monitor.wait();
									break;
								case 1548:
									monitor.wait();
									break;
								case 1549:
									monitor.wait();
									break;
								case 1550:
									monitor.wait();
									break;
								case 1551:
									monitor.wait();
									break;
								case 1552:
									monitor.wait();
									break;
								case 1553:
									monitor.wait();
									break;
								case 1554:
									monitor.wait();
									break;
								case 1555:
									monitor.wait();
									break;
								case 1556:
									monitor.wait();
									break;
								case 1557:
									monitor.wait();
									break;
								case 1558:
									monitor.wait();
									break;
								case 1559:
									monitor.wait();
									break;
								case 1560:
									monitor.wait();
									break;
								case 1561:
									monitor.wait();
									break;
								case 1562:
									monitor.wait();
									break;
								case 1563:
									monitor.wait();
									break;
								case 1564:
									monitor.wait();
									break;
								case 1565:
									monitor.wait();
									break;
								case 1566:
									monitor.wait();
									break;
								case 1567:
									monitor.wait();
									break;
								case 1568:
									monitor.wait();
									break;
								case 1569:
									monitor.wait();
									break;
								case 1570:
									monitor.wait();
									break;
								case 1571:
									monitor.wait();
									break;
								case 1572:
									monitor.wait();
									break;
								case 1573:
									monitor.wait();
									break;
								case 1574:
									monitor.wait();
									break;
								case 1575:
									monitor.wait();
									break;
								case 1576:
									monitor.wait();
									break;
								case 1577:
									monitor.wait();
									break;
								case 1578:
									monitor.wait();
									break;
								case 1579:
									monitor.wait();
									break;
								case 1580:
									monitor.wait();
									break;
								case 1581:
									monitor.wait();
									break;
								case 1582:
									monitor.wait();
									break;
								case 1583:
									monitor.wait();
									break;
								case 1584:
									monitor.wait();
									break;
								case 1585:
									monitor.wait();
									break;
								case 1586:
									monitor.wait();
									break;
								case 1587:
									monitor.wait();
									break;
								case 1588:
									monitor.wait();
									break;
								case 1589:
									monitor.wait();
									break;
								case 1590:
									monitor.wait();
									break;
								case 1591:
									monitor.wait();
									break;
								case 1592:
									monitor.wait();
									break;
								case 1593:
									monitor.wait();
									break;
								case 1594:
									monitor.wait();
									break;
								case 1595:
									monitor.wait();
									break;
								case 1596:
									monitor.wait();
									break;
								case 1597:
									monitor.wait();
									break;
								case 1598:
									monitor.wait();
									break;
								case 1599:
									monitor.wait();
									break;
								case 1600:
									monitor.wait();
									break;
								case 1601:
									monitor.wait();
									break;
								case 1602:
									monitor.wait();
									break;
								case 1603:
									monitor.wait();
									break;
								case 1604:
									monitor.wait();
									break;
								case 1605:
									monitor.wait();
									break;
								case 1606:
									monitor.wait();
									break;
								case 1607:
									monitor.wait();
									break;
								case 1608:
									monitor.wait();
									break;
								case 1609:
									monitor.wait();
									break;
								case 1610:
									monitor.wait();
									break;
								case 1611:
									monitor.wait();
									break;
								case 1612:
									monitor.wait();
									break;
								case 1613:
									monitor.wait();
									break;
								case 1614:
									monitor.wait();
									break;
								case 1615:
									monitor.wait();
									break;
								case 1616:
									monitor.wait();
									break;
								case 1617:
									monitor.wait();
									break;
								case 1618:
									monitor.wait();
									break;
								case 1619:
									monitor.wait();
									break;
								case 1620:
									monitor.wait();
									break;
								case 1621:
									monitor.wait();
									break;
								case 1622:
									monitor.wait();
									break;
								case 1623:
									monitor.wait();
									break;
								case 1624:
									monitor.wait();
									break;
								case 1625:
									monitor.wait();
									break;
								case 1626:
									monitor.wait();
									break;
								case 1627:
									monitor.wait();
									break;
								case 1628:
									monitor.wait();
									break;
								case 1629:
									monitor.wait();
									break;
								case 1630:
									monitor.wait();
									break;
								case 1631:
									monitor.wait();
									break;
								case 1632:
									monitor.wait();
									break;
								case 1633:
									monitor.wait();
									break;
								case 1634:
									monitor.wait();
									break;
								case 1635:
									monitor.wait();
									break;
								case 1636:
									monitor.wait();
									break;
								case 1637:
									monitor.wait();
									break;
								case 1638:
									monitor.wait();
									break;
								case 1639:
									monitor.wait();
									break;
								case 1640:
									monitor.wait();
									break;
								case 1641:
									monitor.wait();
									break;
								case 1642:
									monitor.wait();
									break;
								case 1643:
									monitor.wait();
									break;
								case 1644:
									monitor.wait();
									break;
								case 1645:
									monitor.wait();
									break;
								case 1646:
									monitor.wait();
									break;
								case 1647:
									monitor.wait();
									break;
								case 1648:
									monitor.wait();
									break;
								case 1649:
									monitor.wait();
									break;
								case 1650:
									monitor.wait();
									break;
								case 1651:
									monitor.wait();
									break;
								case 1652:
									monitor.wait();
									break;
								case 1653:
									monitor.wait();
									break;
								case 1654:
									monitor.wait();
									break;
								case 1655:
									monitor.wait();
									break;
								case 1656:
									monitor.wait();
									break;
								case 1657:
									monitor.wait();
									break;
								case 1658:
									monitor.wait();
									break;
								case 1659:
									monitor.wait();
									break;
								case 1660:
									monitor.wait();
									break;
								case 1661:
									monitor.wait();
									break;
								case 1662:
									monitor.wait();
									break;
								case 1663:
									monitor.wait();
									break;
								case 1664:
									monitor.wait();
									break;
								case 1665:
									monitor.wait();
									break;
								case 1666:
									monitor.wait();
									break;
								case 1667:
									monitor.wait();
									break;
								case 1668:
									monitor.wait();
									break;
								case 1669:
									monitor.wait();
									break;
								case 1670:
									monitor.wait();
									break;
								case 1671:
									monitor.wait();
									break;
								case 1672:
									monitor.wait();
									break;
								case 1673:
									monitor.wait();
									break;
								case 1674:
									monitor.wait();
									break;
								case 1675:
									monitor.wait();
									break;
								case 1676:
									monitor.wait();
									break;
								case 1677:
									monitor.wait();
									break;
								case 1678:
									monitor.wait();
									break;
								case 1679:
									monitor.wait();
									break;
								case 1680:
									monitor.wait();
									break;
								case 1681:
									monitor.wait();
									break;
								case 1682:
									monitor.wait();
									break;
								case 1683:
									monitor.wait();
									break;
								case 1684:
									monitor.wait();
									break;
								case 1685:
									monitor.wait();
									break;
								case 1686:
									monitor.wait();
									break;
								case 1687:
									monitor.wait();
									break;
								case 1688:
									monitor.wait();
									break;
								case 1689:
									monitor.wait();
									break;
								case 1690:
									monitor.wait();
									break;
								case 1691:
									monitor.wait();
									break;
								case 1692:
									monitor.wait();
									break;
								case 1693:
									monitor.wait();
									break;
								case 1694:
									monitor.wait();
									break;
								case 1695:
									monitor.wait();
									break;
								case 1696:
									monitor.wait();
									break;
								case 1697:
									monitor.wait();
									break;
								case 1698:
									monitor.wait();
									break;
								case 1699:
									monitor.wait();
									break;
								case 1700:
									monitor.wait();
									break;
								case 1701:
									monitor.wait();
									break;
								case 1702:
									monitor.wait();
									break;
								case 1703:
									monitor.wait();
									break;
								case 1704:
									monitor.wait();
									break;
								case 1705:
									monitor.wait();
									break;
								case 1706:
									monitor.wait();
									break;
								case 1707:
									monitor.wait();
									break;
								case 1708:
									monitor.wait();
									break;
								case 1709:
									monitor.wait();
									break;
								case 1710:
									monitor.wait();
									break;
								case 1711:
									monitor.wait();
									break;
								case 1712:
									monitor.wait();
									break;
								case 1713:
									monitor.wait();
									break;
								case 1714:
									monitor.wait();
									break;
								case 1715:
									monitor.wait();
									break;
								case 1716:
									monitor.wait();
									break;
								case 1717:
									monitor.wait();
									break;
								case 1718:
									monitor.wait();
									break;
								case 1719:
									monitor.wait();
									break;
								case 1720:
									monitor.wait();
									break;
								case 1721:
									monitor.wait();
									break;
								case 1722:
									monitor.wait();
									break;
								case 1723:
									monitor.wait();
									break;
								case 1724:
									monitor.wait();
									break;
								case 1725:
									monitor.wait();
									break;
								case 1726:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1508;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1727:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1509;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1728:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1510;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1729:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1732;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1730:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1513;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1731:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1514;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1732:
									monitor.wait();
									break;
								case 1733:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1515;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1734:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1516;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1735:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1517;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1736:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1518;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1737:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1519;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1738:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1520;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1739:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1741;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1740:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1522;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1741:
									monitor.wait();
									break;
								case 1742:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1523;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1743:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1524;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1744:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1525;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1745:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1746;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1746:
									monitor.wait();
									break;
								case 1747:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1523;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1748:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1528;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1749:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1524;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1750:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1530;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1751:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1525;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1752:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1536;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1753:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1533;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1754:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1534;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1755:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1540;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1756:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1536;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1757:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1537;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1758:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1538;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1759:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1544;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1760:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1540;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1761:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1541;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1762:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1542;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1763:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1764;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1764:
									monitor.wait();
									break;
								case 1765:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1544;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1766:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1515;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1767:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1547;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1768:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1548;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1769:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1517;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1770:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1551;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1771:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1552;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1772:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1519;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1773:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1626;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1774:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1556;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1775:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1558;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1776:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1560;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1777:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1562;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1778:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1635;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1779:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1522;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1780:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1558;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1781:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1569;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1782:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1528;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1783:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1560;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1784:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1573;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1785:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1530;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1786:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1562;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1787:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1591;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1788:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1536;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1789:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1520;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1790:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1582;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1791:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1533;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1792:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1585;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1793:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1534;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1794:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1603;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1795:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1540;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1796:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1591;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1797:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1518;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1798:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1594;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1799:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1537;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1800:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1597;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1801:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1538;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1802:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1615;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1803:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1544;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1804:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1603;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1805:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1516;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1806:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1606;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1807:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1541;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1808:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1609;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1809:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1542;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1810:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1669;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1811:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1764;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1812:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1615;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1813:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1617;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1814:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1618;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1815:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1620;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1816:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1621;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1817:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1681;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1818:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1624;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1819:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1626;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1820:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1627;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1821:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1629;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1822:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1631;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1823:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1690;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1824:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1635;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1825:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1627;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1826:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1638;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1827:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1629;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1828:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1641;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1829:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1631;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1830:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1653;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1831:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1647;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1832:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1649;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1833:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1661;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1834:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1653;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1835:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1655;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1836:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1657;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1837:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1670;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1838:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1661;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1839:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1663;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1840:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1665;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1841:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1724;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1842:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1669;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1843:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1670;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1844:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1672;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1845:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1673;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1846:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1675;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1847:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1676;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1848:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1850;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1849:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1679;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1850:
									monitor.wait();
									break;
								case 1851:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1681;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1852:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1682;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1853:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1684;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1854:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1686;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1855:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1856;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1856:
									monitor.wait();
									break;
								case 1857:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1690;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1858:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1682;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1859:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1693;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1860:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1684;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1861:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1696;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1862:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1686;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1863:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1708;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1864:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1702;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1865:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1704;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1866:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1716;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1867:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1708;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1868:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1710;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1869:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1712;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1870:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1725;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1871:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1716;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1872:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1718;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1873:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1720;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1874:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1875;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1875:
									monitor.wait();
									break;
								case 1876:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1724;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1877:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1725;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1878:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1726;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1879:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1727;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1880:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1728;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1881:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1884;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1882:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1730;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1883:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1731;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1884:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1732;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1885:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1733;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1886:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1734;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1887:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1735;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1888:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1736;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1889:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1737;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1890:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1738;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1891:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1893;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1892:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1740;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1893:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1741;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1894:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1742;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1895:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1743;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1896:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1744;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1897:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1898;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1898:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1746;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1899:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1742;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1900:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1748;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1901:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1743;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1902:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1750;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1903:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1744;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1904:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1756;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1905:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1753;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1906:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1754;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1907:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1760;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1908:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1756;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1909:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1757;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1910:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1758;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1911:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1765;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1912:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1760;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1913:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1761;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1914:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1762;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1915:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1916;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1916:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1764;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1917:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1765;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1918:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1733;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1919:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1767;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1920:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1768;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1921:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1735;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1922:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1770;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1923:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1771;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1924:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1737;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1925:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1819;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1926:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1774;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1927:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1775;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1928:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1776;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1929:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1777;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1930:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1824;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1931:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1740;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1932:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1775;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1933:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1781;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1934:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1748;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1935:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1776;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1936:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1784;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1937:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1750;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1938:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1777;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1939:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1796;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1940:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1756;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1941:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1738;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1942:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1790;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1943:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1753;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1944:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1792;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1945:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1754;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1946:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1804;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1947:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1760;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1948:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1796;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1949:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1736;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1950:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1798;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1951:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1757;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1952:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1800;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1953:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1758;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1954:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1812;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1955:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1765;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1956:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1804;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1957:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1734;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1958:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1806;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1959:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1761;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1960:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1808;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1961:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1762;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1962:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1842;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1963:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1916;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1964:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1812;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1965:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1813;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1966:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1814;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1967:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1815;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1968:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1816;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1969:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1851;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1970:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1818;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1971:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1819;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1972:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1820;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1973:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1821;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1974:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1822;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1975:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1857;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1976:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1824;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1977:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1820;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1978:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1826;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1979:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1821;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1980:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1828;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1981:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1822;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1982:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1834;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1983:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1831;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1984:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1832;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1985:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1838;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1986:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1834;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1987:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1835;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1988:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1836;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1989:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1843;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1990:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1838;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1991:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1839;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1992:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1840;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1993:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1876;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1994:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1842;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1995:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1843;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1996:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1844;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1997:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1845;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1998:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1846;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 1999:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1847;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2000:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2002;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2001:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1849;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2002:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1850;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2003:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1851;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2004:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1852;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2005:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1853;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2006:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1854;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2007:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2008;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2008:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1856;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2009:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1857;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2010:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1852;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2011:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1859;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2012:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1853;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2013:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1861;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2014:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1854;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2015:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1867;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2016:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1864;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2017:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1865;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2018:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1871;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2019:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1867;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2020:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1868;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2021:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1869;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2022:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1877;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2023:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1871;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2024:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1872;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2025:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1873;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2026:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2027;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2027:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1875;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2028:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1876;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2029:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1877;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2030:
									monitor.wait();
									break;
								case 2031:
									monitor.wait();
									break;
								case 2032:
									monitor.wait();
									break;
								case 2033:
									monitor.wait();
									break;
								case 2034:
									monitor.wait();
									break;
								case 2035:
									monitor.wait();
									break;
								case 2036:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1884;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2037:
									monitor.wait();
									break;
								case 2038:
									monitor.wait();
									break;
								case 2039:
									monitor.wait();
									break;
								case 2040:
									monitor.wait();
									break;
								case 2041:
									monitor.wait();
									break;
								case 2042:
									monitor.wait();
									break;
								case 2043:
									monitor.wait();
									break;
								case 2044:
									monitor.wait();
									break;
								case 2045:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1893;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2046:
									monitor.wait();
									break;
								case 2047:
									monitor.wait();
									break;
								case 2048:
									monitor.wait();
									break;
								case 2049:
									monitor.wait();
									break;
								case 2050:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1898;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2051:
									monitor.wait();
									break;
								case 2052:
									monitor.wait();
									break;
								case 2053:
									monitor.wait();
									break;
								case 2054:
									monitor.wait();
									break;
								case 2055:
									monitor.wait();
									break;
								case 2056:
									monitor.wait();
									break;
								case 2057:
									monitor.wait();
									break;
								case 2058:
									monitor.wait();
									break;
								case 2059:
									monitor.wait();
									break;
								case 2060:
									monitor.wait();
									break;
								case 2061:
									monitor.wait();
									break;
								case 2062:
									monitor.wait();
									break;
								case 2063:
									monitor.wait();
									break;
								case 2064:
									monitor.wait();
									break;
								case 2065:
									monitor.wait();
									break;
								case 2066:
									monitor.wait();
									break;
								case 2067:
									monitor.wait();
									break;
								case 2068:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1916;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2069:
									monitor.wait();
									break;
								case 2070:
									monitor.wait();
									break;
								case 2071:
									monitor.wait();
									break;
								case 2072:
									monitor.wait();
									break;
								case 2073:
									monitor.wait();
									break;
								case 2074:
									monitor.wait();
									break;
								case 2075:
									monitor.wait();
									break;
								case 2076:
									monitor.wait();
									break;
								case 2077:
									monitor.wait();
									break;
								case 2078:
									monitor.wait();
									break;
								case 2079:
									monitor.wait();
									break;
								case 2080:
									monitor.wait();
									break;
								case 2081:
									monitor.wait();
									break;
								case 2082:
									monitor.wait();
									break;
								case 2083:
									monitor.wait();
									break;
								case 2084:
									monitor.wait();
									break;
								case 2085:
									monitor.wait();
									break;
								case 2086:
									monitor.wait();
									break;
								case 2087:
									monitor.wait();
									break;
								case 2088:
									monitor.wait();
									break;
								case 2089:
									monitor.wait();
									break;
								case 2090:
									monitor.wait();
									break;
								case 2091:
									monitor.wait();
									break;
								case 2092:
									monitor.wait();
									break;
								case 2093:
									monitor.wait();
									break;
								case 2094:
									monitor.wait();
									break;
								case 2095:
									monitor.wait();
									break;
								case 2096:
									monitor.wait();
									break;
								case 2097:
									monitor.wait();
									break;
								case 2098:
									monitor.wait();
									break;
								case 2099:
									monitor.wait();
									break;
								case 2100:
									monitor.wait();
									break;
								case 2101:
									monitor.wait();
									break;
								case 2102:
									monitor.wait();
									break;
								case 2103:
									monitor.wait();
									break;
								case 2104:
									monitor.wait();
									break;
								case 2105:
									monitor.wait();
									break;
								case 2106:
									monitor.wait();
									break;
								case 2107:
									monitor.wait();
									break;
								case 2108:
									monitor.wait();
									break;
								case 2109:
									monitor.wait();
									break;
								case 2110:
									monitor.wait();
									break;
								case 2111:
									monitor.wait();
									break;
								case 2112:
									monitor.wait();
									break;
								case 2113:
									monitor.wait();
									break;
								case 2114:
									monitor.wait();
									break;
								case 2115:
									monitor.wait();
									break;
								case 2116:
									monitor.wait();
									break;
								case 2117:
									monitor.wait();
									break;
								case 2118:
									monitor.wait();
									break;
								case 2119:
									monitor.wait();
									break;
								case 2120:
									monitor.wait();
									break;
								case 2121:
									monitor.wait();
									break;
								case 2122:
									monitor.wait();
									break;
								case 2123:
									monitor.wait();
									break;
								case 2124:
									monitor.wait();
									break;
								case 2125:
									monitor.wait();
									break;
								case 2126:
									monitor.wait();
									break;
								case 2127:
									monitor.wait();
									break;
								case 2128:
									monitor.wait();
									break;
								case 2129:
									monitor.wait();
									break;
								case 2130:
									monitor.wait();
									break;
								case 2131:
									monitor.wait();
									break;
								case 2132:
									monitor.wait();
									break;
								case 2133:
									monitor.wait();
									break;
								case 2134:
									monitor.wait();
									break;
								case 2135:
									monitor.wait();
									break;
								case 2136:
									monitor.wait();
									break;
								case 2137:
									monitor.wait();
									break;
								case 2138:
									monitor.wait();
									break;
								case 2139:
									monitor.wait();
									break;
								case 2140:
									monitor.wait();
									break;
								case 2141:
									monitor.wait();
									break;
								case 2142:
									monitor.wait();
									break;
								case 2143:
									monitor.wait();
									break;
								case 2144:
									monitor.wait();
									break;
								case 2145:
									monitor.wait();
									break;
								case 2146:
									monitor.wait();
									break;
								case 2147:
									monitor.wait();
									break;
								case 2148:
									monitor.wait();
									break;
								case 2149:
									monitor.wait();
									break;
								case 2150:
									monitor.wait();
									break;
								case 2151:
									monitor.wait();
									break;
								case 2152:
									monitor.wait();
									break;
								case 2153:
									monitor.wait();
									break;
								case 2154:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2002;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2155:
									monitor.wait();
									break;
								case 2156:
									monitor.wait();
									break;
								case 2157:
									monitor.wait();
									break;
								case 2158:
									monitor.wait();
									break;
								case 2159:
									monitor.wait();
									break;
								case 2160:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2008;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2161:
									monitor.wait();
									break;
								case 2162:
									monitor.wait();
									break;
								case 2163:
									monitor.wait();
									break;
								case 2164:
									monitor.wait();
									break;
								case 2165:
									monitor.wait();
									break;
								case 2166:
									monitor.wait();
									break;
								case 2167:
									monitor.wait();
									break;
								case 2168:
									monitor.wait();
									break;
								case 2169:
									monitor.wait();
									break;
								case 2170:
									monitor.wait();
									break;
								case 2171:
									monitor.wait();
									break;
								case 2172:
									monitor.wait();
									break;
								case 2173:
									monitor.wait();
									break;
								case 2174:
									monitor.wait();
									break;
								case 2175:
									monitor.wait();
									break;
								case 2176:
									monitor.wait();
									break;
								case 2177:
									monitor.wait();
									break;
								case 2178:
									monitor.wait();
									break;
								case 2179:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2027;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2180:
									monitor.wait();
									break;
								case 2181:
									monitor.wait();
									break;
								case 2182:
									monitor.wait();
									break;
								case 2183:
									monitor.wait();
									break;
								case 2184:
									monitor.wait();
									break;
								case 2185:
									monitor.wait();
									break;
								case 2186:
									monitor.wait();
									break;
								case 2187:
									monitor.wait();
									break;
								case 2188:
									monitor.wait();
									break;
								case 2189:
									monitor.wait();
									break;
								case 2190:
									monitor.wait();
									break;
								case 2191:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1190;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2192:
									monitor.wait();
									break;
								case 2193:
									monitor.wait();
									break;
								case 2194:
									monitor.wait();
									break;
								case 2195:
									monitor.wait();
									break;
								case 2196:
									monitor.wait();
									break;
								case 2197:
									monitor.wait();
									break;
								case 2198:
									monitor.wait();
									break;
								case 2199:
									monitor.wait();
									break;
								case 2200:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1199;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2201:
									monitor.wait();
									break;
								case 2202:
									monitor.wait();
									break;
								case 2203:
									monitor.wait();
									break;
								case 2204:
									monitor.wait();
									break;
								case 2205:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1204;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2206:
									monitor.wait();
									break;
								case 2207:
									monitor.wait();
									break;
								case 2208:
									monitor.wait();
									break;
								case 2209:
									monitor.wait();
									break;
								case 2210:
									monitor.wait();
									break;
								case 2211:
									monitor.wait();
									break;
								case 2212:
									monitor.wait();
									break;
								case 2213:
									monitor.wait();
									break;
								case 2214:
									monitor.wait();
									break;
								case 2215:
									monitor.wait();
									break;
								case 2216:
									monitor.wait();
									break;
								case 2217:
									monitor.wait();
									break;
								case 2218:
									monitor.wait();
									break;
								case 2219:
									monitor.wait();
									break;
								case 2220:
									monitor.wait();
									break;
								case 2221:
									monitor.wait();
									break;
								case 2222:
									monitor.wait();
									break;
								case 2223:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1222;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2224:
									monitor.wait();
									break;
								case 2225:
									monitor.wait();
									break;
								case 2226:
									monitor.wait();
									break;
								case 2227:
									monitor.wait();
									break;
								case 2228:
									monitor.wait();
									break;
								case 2229:
									monitor.wait();
									break;
								case 2230:
									monitor.wait();
									break;
								case 2231:
									monitor.wait();
									break;
								case 2232:
									monitor.wait();
									break;
								case 2233:
									monitor.wait();
									break;
								case 2234:
									monitor.wait();
									break;
								case 2235:
									monitor.wait();
									break;
								case 2236:
									monitor.wait();
									break;
								case 2237:
									monitor.wait();
									break;
								case 2238:
									monitor.wait();
									break;
								case 2239:
									monitor.wait();
									break;
								case 2240:
									monitor.wait();
									break;
								case 2241:
									monitor.wait();
									break;
								case 2242:
									monitor.wait();
									break;
								case 2243:
									monitor.wait();
									break;
								case 2244:
									monitor.wait();
									break;
								case 2245:
									monitor.wait();
									break;
								case 2246:
									monitor.wait();
									break;
								case 2247:
									monitor.wait();
									break;
								case 2248:
									monitor.wait();
									break;
								case 2249:
									monitor.wait();
									break;
								case 2250:
									monitor.wait();
									break;
								case 2251:
									monitor.wait();
									break;
								case 2252:
									monitor.wait();
									break;
								case 2253:
									monitor.wait();
									break;
								case 2254:
									monitor.wait();
									break;
								case 2255:
									monitor.wait();
									break;
								case 2256:
									monitor.wait();
									break;
								case 2257:
									monitor.wait();
									break;
								case 2258:
									monitor.wait();
									break;
								case 2259:
									monitor.wait();
									break;
								case 2260:
									monitor.wait();
									break;
								case 2261:
									monitor.wait();
									break;
								case 2262:
									monitor.wait();
									break;
								case 2263:
									monitor.wait();
									break;
								case 2264:
									monitor.wait();
									break;
								case 2265:
									monitor.wait();
									break;
								case 2266:
									monitor.wait();
									break;
								case 2267:
									monitor.wait();
									break;
								case 2268:
									monitor.wait();
									break;
								case 2269:
									monitor.wait();
									break;
								case 2270:
									monitor.wait();
									break;
								case 2271:
									monitor.wait();
									break;
								case 2272:
									monitor.wait();
									break;
								case 2273:
									monitor.wait();
									break;
								case 2274:
									monitor.wait();
									break;
								case 2275:
									monitor.wait();
									break;
								case 2276:
									monitor.wait();
									break;
								case 2277:
									monitor.wait();
									break;
								case 2278:
									monitor.wait();
									break;
								case 2279:
									monitor.wait();
									break;
								case 2280:
									monitor.wait();
									break;
								case 2281:
									monitor.wait();
									break;
								case 2282:
									monitor.wait();
									break;
								case 2283:
									monitor.wait();
									break;
								case 2284:
									monitor.wait();
									break;
								case 2285:
									monitor.wait();
									break;
								case 2286:
									monitor.wait();
									break;
								case 2287:
									monitor.wait();
									break;
								case 2288:
									monitor.wait();
									break;
								case 2289:
									monitor.wait();
									break;
								case 2290:
									monitor.wait();
									break;
								case 2291:
									monitor.wait();
									break;
								case 2292:
									monitor.wait();
									break;
								case 2293:
									monitor.wait();
									break;
								case 2294:
									monitor.wait();
									break;
								case 2295:
									monitor.wait();
									break;
								case 2296:
									monitor.wait();
									break;
								case 2297:
									monitor.wait();
									break;
								case 2298:
									monitor.wait();
									break;
								case 2299:
									monitor.wait();
									break;
								case 2300:
									monitor.wait();
									break;
								case 2301:
									monitor.wait();
									break;
								case 2302:
									monitor.wait();
									break;
								case 2303:
									monitor.wait();
									break;
								case 2304:
									monitor.wait();
									break;
								case 2305:
									monitor.wait();
									break;
								case 2306:
									monitor.wait();
									break;
								case 2307:
									monitor.wait();
									break;
								case 2308:
									monitor.wait();
									break;
								case 2309:
									monitor.wait();
									break;
								case 2310:
									monitor.wait();
									break;
								case 2311:
									monitor.wait();
									break;
								case 2312:
									monitor.wait();
									break;
								case 2313:
									monitor.wait();
									break;
								case 2314:
									monitor.wait();
									break;
								case 2315:
									monitor.wait();
									break;
								case 2316:
									monitor.wait();
									break;
								case 2317:
									monitor.wait();
									break;
								case 2318:
									monitor.wait();
									break;
								case 2319:
									monitor.wait();
									break;
								case 2320:
									monitor.wait();
									break;
								case 2321:
									monitor.wait();
									break;
								case 2322:
									monitor.wait();
									break;
								case 2323:
									monitor.wait();
									break;
								case 2324:
									monitor.wait();
									break;
								case 2325:
									monitor.wait();
									break;
								case 2326:
									monitor.wait();
									break;
								case 2327:
									monitor.wait();
									break;
								case 2328:
									monitor.wait();
									break;
								case 2329:
									monitor.wait();
									break;
								case 2330:
									monitor.wait();
									break;
								case 2331:
									monitor.wait();
									break;
								case 2332:
									monitor.wait();
									break;
								case 2333:
									monitor.wait();
									break;
								case 2334:
									monitor.wait();
									break;
								case 2335:
									monitor.wait();
									break;
								case 2336:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2338;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2337:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2339;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2338:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2341;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2339:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2342;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2340:
									monitor.wait();
									break;
								case 2341:
									monitor.wait();
									break;
								case 2342:
									monitor.wait();
									break;
								case 2343:
									monitor.wait();
									break;
								case 2344:
									monitor.wait();
									break;
								case 2345:
									monitor.wait();
									break;
								case 2346:
									monitor.wait();
									break;
								case 2347:
									monitor.wait();
									break;
								case 2348:
									monitor.wait();
									break;
								case 2349:
									monitor.wait();
									break;
								case 2350:
									monitor.wait();
									break;
								case 2351:
									monitor.wait();
									break;
								case 2352:
									monitor.wait();
									break;
								case 2353:
									monitor.wait();
									break;
								case 2354:
									monitor.wait();
									break;
								case 2355:
									monitor.wait();
									break;
								case 2356:
									monitor.wait();
									break;
								case 2357:
									monitor.wait();
									break;
								case 2358:
									monitor.wait();
									break;
								case 2359:
									monitor.wait();
									break;
								case 2360:
									monitor.wait();
									break;
								case 2361:
									monitor.wait();
									break;
								case 2362:
									monitor.wait();
									break;
								case 2363:
									monitor.wait();
									break;
								case 2364:
									monitor.wait();
									break;
								case 2365:
									monitor.wait();
									break;
								case 2366:
									monitor.wait();
									break;
								case 2367:
									monitor.wait();
									break;
								case 2368:
									monitor.wait();
									break;
								case 2369:
									monitor.wait();
									break;
								case 2370:
									monitor.wait();
									break;
								case 2371:
									monitor.wait();
									break;
								case 2372:
									monitor.wait();
									break;
								case 2373:
									monitor.wait();
									break;
								case 2374:
									monitor.wait();
									break;
								case 2375:
									monitor.wait();
									break;
								case 2376:
									monitor.wait();
									break;
								case 2377:
									monitor.wait();
									break;
								case 2378:
									monitor.wait();
									break;
								case 2379:
									monitor.wait();
									break;
								case 2380:
									monitor.wait();
									break;
								case 2381:
									monitor.wait();
									break;
								case 2382:
									monitor.wait();
									break;
								case 2383:
									monitor.wait();
									break;
								case 2384:
									monitor.wait();
									break;
								case 2385:
									monitor.wait();
									break;
								case 2386:
									monitor.wait();
									break;
								case 2387:
									monitor.wait();
									break;
								case 2388:
									monitor.wait();
									break;
								case 2389:
									monitor.wait();
									break;
								case 2390:
									monitor.wait();
									break;
								case 2391:
									monitor.wait();
									break;
								case 2392:
									monitor.wait();
									break;
								case 2393:
									monitor.wait();
									break;
								case 2394:
									monitor.wait();
									break;
								case 2395:
									monitor.wait();
									break;
								case 2396:
									monitor.wait();
									break;
								case 2397:
									monitor.wait();
									break;
								case 2398:
									monitor.wait();
									break;
								case 2399:
									monitor.wait();
									break;
								case 2400:
									monitor.wait();
									break;
								case 2401:
									monitor.wait();
									break;
								case 2402:
									monitor.wait();
									break;
								case 2403:
									monitor.wait();
									break;
								case 2404:
									monitor.wait();
									break;
								case 2405:
									monitor.wait();
									break;
								case 2406:
									monitor.wait();
									break;
								case 2407:
									monitor.wait();
									break;
								case 2408:
									monitor.wait();
									break;
								case 2409:
									monitor.wait();
									break;
								case 2410:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2370;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2411:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2371;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2412:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2414;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2413:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2374;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2414:
									monitor.wait();
									break;
								case 2415:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2376;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2416:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2378;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2417:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2380;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2418:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2419;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2419:
									monitor.wait();
									break;
								case 2420:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2376;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2421:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2386;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2422:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2378;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2423:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2389;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2424:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2380;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2425:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2401;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2426:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2395;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2427:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2397;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2428:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2409;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2429:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2401;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2430:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2403;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2431:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2405;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2432:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2433;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2433:
									monitor.wait();
									break;
								case 2434:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2409;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2435:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2410;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2436:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2411;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2437:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2439;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2438:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2413;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2439:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2414;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2440:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2415;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2441:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2416;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2442:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2417;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2443:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2444;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2444:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2419;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2445:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2415;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2446:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2421;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2447:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2416;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2448:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2423;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2449:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2417;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2450:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2429;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2451:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2426;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2452:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2427;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2453:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2434;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2454:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2429;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2455:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2430;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2456:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2431;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2457:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2458;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2458:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2433;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2459:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2434;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2460:
									monitor.wait();
									break;
								case 2461:
									monitor.wait();
									break;
								case 2462:
									monitor.wait();
									break;
								case 2463:
									monitor.wait();
									break;
								case 2464:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2439;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2465:
									monitor.wait();
									break;
								case 2466:
									monitor.wait();
									break;
								case 2467:
									monitor.wait();
									break;
								case 2468:
									monitor.wait();
									break;
								case 2469:
									monitor.wait();
									break;
								case 2470:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2444;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2471:
									monitor.wait();
									break;
								case 2472:
									monitor.wait();
									break;
								case 2473:
									monitor.wait();
									break;
								case 2474:
									monitor.wait();
									break;
								case 2475:
									monitor.wait();
									break;
								case 2476:
									monitor.wait();
									break;
								case 2477:
									monitor.wait();
									break;
								case 2478:
									monitor.wait();
									break;
								case 2479:
									monitor.wait();
									break;
								case 2480:
									monitor.wait();
									break;
								case 2481:
									monitor.wait();
									break;
								case 2482:
									monitor.wait();
									break;
								case 2483:
									monitor.wait();
									break;
								case 2484:
									monitor.wait();
									break;
								case 2485:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2458;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2486:
									monitor.wait();
									break;
								case 2487:
									monitor.wait();
									break;
								case 2488:
									monitor.wait();
									break;
								case 2489:
									monitor.wait();
									break;
								case 2490:
									monitor.wait();
									break;
								case 2491:
									monitor.wait();
									break;
								case 2492:
									monitor.wait();
									break;
								case 2493:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1339;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2494:
									monitor.wait();
									break;
								case 2495:
									monitor.wait();
									break;
								case 2496:
									monitor.wait();
									break;
								case 2497:
									monitor.wait();
									break;
								case 2498:
									monitor.wait();
									break;
								case 2499:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1345;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2500:
									monitor.wait();
									break;
								case 2501:
									monitor.wait();
									break;
								case 2502:
									monitor.wait();
									break;
								case 2503:
									monitor.wait();
									break;
								case 2504:
									monitor.wait();
									break;
								case 2505:
									monitor.wait();
									break;
								case 2506:
									monitor.wait();
									break;
								case 2507:
									monitor.wait();
									break;
								case 2508:
									monitor.wait();
									break;
								case 2509:
									monitor.wait();
									break;
								case 2510:
									monitor.wait();
									break;
								case 2511:
									monitor.wait();
									break;
								case 2512:
									monitor.wait();
									break;
								case 2513:
									monitor.wait();
									break;
								case 2514:
									monitor.wait();
									break;
								case 2515:
									monitor.wait();
									break;
								case 2516:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2517;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2517:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2519;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2518:
									monitor.wait();
									break;
								case 2519:
									monitor.wait();
									break;
								case 2520:
									monitor.wait();
									break;
								case 2521:
									monitor.wait();
									break;
								case 2522:
									monitor.wait();
									break;
								case 2523:
									monitor.wait();
									break;
								case 2524:
									monitor.wait();
									break;
								case 2525:
									monitor.wait();
									break;
								case 2526:
									monitor.wait();
									break;
								case 2527:
									monitor.wait();
									break;
								case 2528:
									monitor.wait();
									break;
								case 2529:
									monitor.wait();
									break;
								case 2530:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2526;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2531:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2532;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2532:
									monitor.wait();
									break;
								case 2533:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2530;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2534:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2535;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2535:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2532;
											queueFromworker_0_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2536:
									monitor.wait();
									break;
								case 2537:
									monitor.wait();
									break;
								case 2538:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 2535;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2539:
									monitor.wait();
									break;
								case 2540:
									monitor.wait();
									break;
								case 2541:
									monitor.wait();
									break;
								case 2542:
									monitor.wait();
									break;
								case 2543:
									monitor.wait();
									break;
								case 2544:
									if (queueFrommasterToworker_0_.peek() != null ) {
										monitor.notifyAll();
										state = 1364;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_0_.take());
									}
									monitor.wait();
									break;
								case 2545:
									monitor.wait();
									break;
								case 2546:
									monitor.wait();
									break;
								default: throw new Exception("State number out of bounds");
							}
						}
					}
					
				}
			};
			case "worker_1_": return new IEnvironment() {
				
				@Override
				public String getName(){
					return environmentName;
				}
				
				@Override
				public <Any, AnyInput> Optional<Any> exchange(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					synchronized (monitor){
						while (true){
							switch (state){
								case 0:
									monitor.wait();
									break;
								case 1:
									monitor.wait();
									break;
								case 2:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1367;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 3:
									monitor.wait();
									break;
								case 4:
									monitor.wait();
									break;
								case 5:
									monitor.wait();
									break;
								case 6:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2182;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 7:
									monitor.wait();
									break;
								case 8:
									monitor.wait();
									break;
								case 9:
									monitor.wait();
									break;
								case 10:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1370;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 11:
									monitor.wait();
									break;
								case 12:
									monitor.wait();
									break;
								case 13:
									monitor.wait();
									break;
								case 14:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1373;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 15:
									monitor.wait();
									break;
								case 16:
									monitor.wait();
									break;
								case 17:
									monitor.wait();
									break;
								case 18:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1377;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 19:
									monitor.wait();
									break;
								case 20:
									monitor.wait();
									break;
								case 21:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 24;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 22:
									monitor.wait();
									break;
								case 23:
									monitor.wait();
									break;
								case 24:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 27;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 25:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 28;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 26:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 29;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 27:
									monitor.wait();
									break;
								case 28:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 31;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 29:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 32;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 30:
									monitor.wait();
									break;
								case 31:
									monitor.wait();
									break;
								case 32:
									monitor.wait();
									break;
								case 33:
									monitor.wait();
									break;
								case 34:
									monitor.wait();
									break;
								case 35:
									monitor.wait();
									break;
								case 36:
									monitor.wait();
									break;
								case 37:
									monitor.wait();
									break;
								case 38:
									monitor.wait();
									break;
								case 39:
									monitor.wait();
									break;
								case 40:
									monitor.wait();
									break;
								case 41:
									monitor.wait();
									break;
								case 42:
									monitor.wait();
									break;
								case 43:
									monitor.wait();
									break;
								case 44:
									monitor.wait();
									break;
								case 45:
									monitor.wait();
									break;
								case 46:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1181;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 47:
									monitor.wait();
									break;
								case 48:
									monitor.wait();
									break;
								case 49:
									monitor.wait();
									break;
								case 50:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 995;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 51:
									monitor.wait();
									break;
								case 52:
									monitor.wait();
									break;
								case 53:
									monitor.wait();
									break;
								case 54:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 718;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 55:
									monitor.wait();
									break;
								case 56:
									monitor.wait();
									break;
								case 57:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 60;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 58:
									monitor.wait();
									break;
								case 59:
									monitor.wait();
									break;
								case 60:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 63;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 61:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 64;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 62:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 65;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 63:
									monitor.wait();
									break;
								case 64:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 67;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 65:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 68;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 66:
									monitor.wait();
									break;
								case 67:
									monitor.wait();
									break;
								case 68:
									monitor.wait();
									break;
								case 69:
									monitor.wait();
									break;
								case 70:
									monitor.wait();
									break;
								case 71:
									monitor.wait();
									break;
								case 72:
									monitor.wait();
									break;
								case 73:
									monitor.wait();
									break;
								case 74:
									monitor.wait();
									break;
								case 75:
									monitor.wait();
									break;
								case 76:
									monitor.wait();
									break;
								case 77:
									monitor.wait();
									break;
								case 78:
									monitor.wait();
									break;
								case 79:
									monitor.wait();
									break;
								case 80:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 86;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 81:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 93;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 82:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 306;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 83:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 392;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 84:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 478;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 85:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 539;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 86:
									monitor.wait();
									break;
								case 87:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 551;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 88:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 558;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 89:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 99;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 90:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 202;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 91:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 244;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 92:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 284;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 93:
									monitor.wait();
									break;
								case 94:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 295;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 95:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 302;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 96:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 104;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 97:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 163;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 98:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 182;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 99:
									monitor.wait();
									break;
								case 100:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 192;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 101:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 199;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 102:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 108;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 103:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 128;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 104:
									monitor.wait();
									break;
								case 105:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 144;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 106:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 159;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 107:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 111;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 108:
									monitor.wait();
									break;
								case 109:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 119;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 110:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 126;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 111:
									monitor.wait();
									break;
								case 112:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 114;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 113:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 118;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 114:
									monitor.wait();
									break;
								case 115:
									monitor.wait();
									break;
								case 116:
									monitor.wait();
									break;
								case 117:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 118:
									monitor.wait();
									break;
								case 119:
									monitor.wait();
									break;
								case 120:
									monitor.wait();
									break;
								case 121:
									monitor.wait();
									break;
								case 122:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 114;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 123:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 121;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 124:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 125:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 118;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 126:
									monitor.wait();
									break;
								case 127:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 111;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 128:
									monitor.wait();
									break;
								case 129:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 132;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 130:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 141;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 131:
									monitor.wait();
									break;
								case 132:
									monitor.wait();
									break;
								case 133:
									monitor.wait();
									break;
								case 134:
									monitor.wait();
									break;
								case 135:
									monitor.wait();
									break;
								case 136:
									monitor.wait();
									break;
								case 137:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 114;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 138:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 135;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 139:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 140:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 118;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 141:
									monitor.wait();
									break;
								case 142:
									monitor.wait();
									break;
								case 143:
									monitor.wait();
									break;
								case 144:
									monitor.wait();
									break;
								case 145:
									monitor.wait();
									break;
								case 146:
									monitor.wait();
									break;
								case 147:
									monitor.wait();
									break;
								case 148:
									monitor.wait();
									break;
								case 149:
									monitor.wait();
									break;
								case 150:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 119;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 151:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 132;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 152:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 147;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 153:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 114;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 154:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 121;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 155:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 135;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 156:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 157:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 126;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 158:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 141;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 159:
									monitor.wait();
									break;
								case 160:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 118;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 161:
									monitor.wait();
									break;
								case 162:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 166;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 163:
									monitor.wait();
									break;
								case 164:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 174;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 165:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 181;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 166:
									monitor.wait();
									break;
								case 167:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 169;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 168:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 173;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 169:
									monitor.wait();
									break;
								case 170:
									monitor.wait();
									break;
								case 171:
									monitor.wait();
									break;
								case 172:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 171;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 173:
									monitor.wait();
									break;
								case 174:
									monitor.wait();
									break;
								case 175:
									monitor.wait();
									break;
								case 176:
									monitor.wait();
									break;
								case 177:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 169;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 178:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 176;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 179:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 171;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 180:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 173;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 181:
									monitor.wait();
									break;
								case 182:
									monitor.wait();
									break;
								case 183:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 185;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 184:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 191;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 185:
									monitor.wait();
									break;
								case 186:
									monitor.wait();
									break;
								case 187:
									monitor.wait();
									break;
								case 188:
									monitor.wait();
									break;
								case 189:
									monitor.wait();
									break;
								case 190:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 187;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 191:
									monitor.wait();
									break;
								case 192:
									monitor.wait();
									break;
								case 193:
									monitor.wait();
									break;
								case 194:
									monitor.wait();
									break;
								case 195:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 185;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 196:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 194;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 197:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 187;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 198:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 191;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 199:
									monitor.wait();
									break;
								case 200:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 206;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 201:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 225;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 202:
									monitor.wait();
									break;
								case 203:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 234;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 204:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 241;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 205:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 209;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 206:
									monitor.wait();
									break;
								case 207:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 217;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 208:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 224;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 209:
									monitor.wait();
									break;
								case 210:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 212;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 211:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 216;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 212:
									monitor.wait();
									break;
								case 213:
									monitor.wait();
									break;
								case 214:
									monitor.wait();
									break;
								case 215:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 214;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 216:
									monitor.wait();
									break;
								case 217:
									monitor.wait();
									break;
								case 218:
									monitor.wait();
									break;
								case 219:
									monitor.wait();
									break;
								case 220:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 212;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 221:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 219;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 222:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 214;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 223:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 216;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 224:
									monitor.wait();
									break;
								case 225:
									monitor.wait();
									break;
								case 226:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 228;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 227:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 233;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 228:
									monitor.wait();
									break;
								case 229:
									monitor.wait();
									break;
								case 230:
									monitor.wait();
									break;
								case 231:
									monitor.wait();
									break;
								case 232:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 230;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 233:
									monitor.wait();
									break;
								case 234:
									monitor.wait();
									break;
								case 235:
									monitor.wait();
									break;
								case 236:
									monitor.wait();
									break;
								case 237:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 228;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 238:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 236;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 239:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 230;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 240:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 233;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 241:
									monitor.wait();
									break;
								case 242:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 248;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 243:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 267;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 244:
									monitor.wait();
									break;
								case 245:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 276;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 246:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 283;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 247:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 251;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 248:
									monitor.wait();
									break;
								case 249:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 259;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 250:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 266;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 251:
									monitor.wait();
									break;
								case 252:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 254;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 253:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 258;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 254:
									monitor.wait();
									break;
								case 255:
									monitor.wait();
									break;
								case 256:
									monitor.wait();
									break;
								case 257:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 256;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 258:
									monitor.wait();
									break;
								case 259:
									monitor.wait();
									break;
								case 260:
									monitor.wait();
									break;
								case 261:
									monitor.wait();
									break;
								case 262:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 254;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 263:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 261;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 264:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 256;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 265:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 258;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 266:
									monitor.wait();
									break;
								case 267:
									monitor.wait();
									break;
								case 268:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 270;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 269:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 275;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 270:
									monitor.wait();
									break;
								case 271:
									monitor.wait();
									break;
								case 272:
									monitor.wait();
									break;
								case 273:
									monitor.wait();
									break;
								case 274:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 272;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 275:
									monitor.wait();
									break;
								case 276:
									monitor.wait();
									break;
								case 277:
									monitor.wait();
									break;
								case 278:
									monitor.wait();
									break;
								case 279:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 270;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 280:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 278;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 281:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 272;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 282:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 275;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 283:
									monitor.wait();
									break;
								case 284:
									monitor.wait();
									break;
								case 285:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 287;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 286:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 294;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 287:
									monitor.wait();
									break;
								case 288:
									monitor.wait();
									break;
								case 289:
									monitor.wait();
									break;
								case 290:
									monitor.wait();
									break;
								case 291:
									monitor.wait();
									break;
								case 292:
									monitor.wait();
									break;
								case 293:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 289;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 294:
									monitor.wait();
									break;
								case 295:
									monitor.wait();
									break;
								case 296:
									monitor.wait();
									break;
								case 297:
									monitor.wait();
									break;
								case 298:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 287;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 299:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 297;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 300:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 289;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 301:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 294;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 302:
									monitor.wait();
									break;
								case 303:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 311;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 304:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 352;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 305:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 371;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 306:
									monitor.wait();
									break;
								case 307:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 381;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 308:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 388;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 309:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 315;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 310:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 334;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 311:
									monitor.wait();
									break;
								case 312:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 343;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 313:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 350;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 314:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 318;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 315:
									monitor.wait();
									break;
								case 316:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 326;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 317:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 333;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 318:
									monitor.wait();
									break;
								case 319:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 321;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 320:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 325;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 321:
									monitor.wait();
									break;
								case 322:
									monitor.wait();
									break;
								case 323:
									monitor.wait();
									break;
								case 324:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 323;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 325:
									monitor.wait();
									break;
								case 326:
									monitor.wait();
									break;
								case 327:
									monitor.wait();
									break;
								case 328:
									monitor.wait();
									break;
								case 329:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 321;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 330:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 328;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 331:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 323;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 332:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 325;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 333:
									monitor.wait();
									break;
								case 334:
									monitor.wait();
									break;
								case 335:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 337;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 336:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 342;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 337:
									monitor.wait();
									break;
								case 338:
									monitor.wait();
									break;
								case 339:
									monitor.wait();
									break;
								case 340:
									monitor.wait();
									break;
								case 341:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 339;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 342:
									monitor.wait();
									break;
								case 343:
									monitor.wait();
									break;
								case 344:
									monitor.wait();
									break;
								case 345:
									monitor.wait();
									break;
								case 346:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 337;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 347:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 345;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 348:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 339;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 349:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 342;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 350:
									monitor.wait();
									break;
								case 351:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 355;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 352:
									monitor.wait();
									break;
								case 353:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 363;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 354:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 370;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 355:
									monitor.wait();
									break;
								case 356:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 358;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 357:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 362;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 358:
									monitor.wait();
									break;
								case 359:
									monitor.wait();
									break;
								case 360:
									monitor.wait();
									break;
								case 361:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 360;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 362:
									monitor.wait();
									break;
								case 363:
									monitor.wait();
									break;
								case 364:
									monitor.wait();
									break;
								case 365:
									monitor.wait();
									break;
								case 366:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 358;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 367:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 365;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 368:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 360;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 369:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 362;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 370:
									monitor.wait();
									break;
								case 371:
									monitor.wait();
									break;
								case 372:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 374;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 373:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 380;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 374:
									monitor.wait();
									break;
								case 375:
									monitor.wait();
									break;
								case 376:
									monitor.wait();
									break;
								case 377:
									monitor.wait();
									break;
								case 378:
									monitor.wait();
									break;
								case 379:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 376;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 380:
									monitor.wait();
									break;
								case 381:
									monitor.wait();
									break;
								case 382:
									monitor.wait();
									break;
								case 383:
									monitor.wait();
									break;
								case 384:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 374;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 385:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 383;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 386:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 376;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 387:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 380;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 388:
									monitor.wait();
									break;
								case 389:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 396;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 390:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 417;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 391:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 457;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 392:
									monitor.wait();
									break;
								case 393:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 467;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 394:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 474;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 395:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 399;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 396:
									monitor.wait();
									break;
								case 397:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 407;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 398:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 414;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 399:
									monitor.wait();
									break;
								case 400:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 402;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 401:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 406;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 402:
									monitor.wait();
									break;
								case 403:
									monitor.wait();
									break;
								case 404:
									monitor.wait();
									break;
								case 405:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 404;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 406:
									monitor.wait();
									break;
								case 407:
									monitor.wait();
									break;
								case 408:
									monitor.wait();
									break;
								case 409:
									monitor.wait();
									break;
								case 410:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 402;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 411:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 409;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 412:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 404;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 413:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 406;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 414:
									monitor.wait();
									break;
								case 415:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 421;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 416:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 440;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 417:
									monitor.wait();
									break;
								case 418:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 449;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 419:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 456;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 420:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 424;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 421:
									monitor.wait();
									break;
								case 422:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 432;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 423:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 439;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 424:
									monitor.wait();
									break;
								case 425:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 427;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 426:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 431;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 427:
									monitor.wait();
									break;
								case 428:
									monitor.wait();
									break;
								case 429:
									monitor.wait();
									break;
								case 430:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 429;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 431:
									monitor.wait();
									break;
								case 432:
									monitor.wait();
									break;
								case 433:
									monitor.wait();
									break;
								case 434:
									monitor.wait();
									break;
								case 435:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 427;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 436:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 434;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 437:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 429;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 438:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 431;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 439:
									monitor.wait();
									break;
								case 440:
									monitor.wait();
									break;
								case 441:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 443;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 442:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 448;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 443:
									monitor.wait();
									break;
								case 444:
									monitor.wait();
									break;
								case 445:
									monitor.wait();
									break;
								case 446:
									monitor.wait();
									break;
								case 447:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 445;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 448:
									monitor.wait();
									break;
								case 449:
									monitor.wait();
									break;
								case 450:
									monitor.wait();
									break;
								case 451:
									monitor.wait();
									break;
								case 452:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 443;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 453:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 451;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 454:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 445;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 455:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 448;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 456:
									monitor.wait();
									break;
								case 457:
									monitor.wait();
									break;
								case 458:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 460;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 459:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 466;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 460:
									monitor.wait();
									break;
								case 461:
									monitor.wait();
									break;
								case 462:
									monitor.wait();
									break;
								case 463:
									monitor.wait();
									break;
								case 464:
									monitor.wait();
									break;
								case 465:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 462;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 466:
									monitor.wait();
									break;
								case 467:
									monitor.wait();
									break;
								case 468:
									monitor.wait();
									break;
								case 469:
									monitor.wait();
									break;
								case 470:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 460;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 471:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 469;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 472:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 462;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 473:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 466;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 474:
									monitor.wait();
									break;
								case 475:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 482;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 476:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 502;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 477:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 521;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 478:
									monitor.wait();
									break;
								case 479:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 531;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 480:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 538;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 481:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 485;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 482:
									monitor.wait();
									break;
								case 483:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 493;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 484:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 500;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 485:
									monitor.wait();
									break;
								case 486:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 488;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 487:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 492;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 488:
									monitor.wait();
									break;
								case 489:
									monitor.wait();
									break;
								case 490:
									monitor.wait();
									break;
								case 491:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 490;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 492:
									monitor.wait();
									break;
								case 493:
									monitor.wait();
									break;
								case 494:
									monitor.wait();
									break;
								case 495:
									monitor.wait();
									break;
								case 496:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 488;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 497:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 495;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 498:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 490;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 499:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 492;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 500:
									monitor.wait();
									break;
								case 501:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 505;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 502:
									monitor.wait();
									break;
								case 503:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 513;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 504:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 520;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 505:
									monitor.wait();
									break;
								case 506:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 508;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 507:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 512;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 508:
									monitor.wait();
									break;
								case 509:
									monitor.wait();
									break;
								case 510:
									monitor.wait();
									break;
								case 511:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 510;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 512:
									monitor.wait();
									break;
								case 513:
									monitor.wait();
									break;
								case 514:
									monitor.wait();
									break;
								case 515:
									monitor.wait();
									break;
								case 516:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 508;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 517:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 515;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 518:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 510;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 519:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 512;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 520:
									monitor.wait();
									break;
								case 521:
									monitor.wait();
									break;
								case 522:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 524;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 523:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 530;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 524:
									monitor.wait();
									break;
								case 525:
									monitor.wait();
									break;
								case 526:
									monitor.wait();
									break;
								case 527:
									monitor.wait();
									break;
								case 528:
									monitor.wait();
									break;
								case 529:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 526;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 530:
									monitor.wait();
									break;
								case 531:
									monitor.wait();
									break;
								case 532:
									monitor.wait();
									break;
								case 533:
									monitor.wait();
									break;
								case 534:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 524;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 535:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 533;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 536:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 526;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 537:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 530;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 538:
									monitor.wait();
									break;
								case 539:
									monitor.wait();
									break;
								case 540:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 542;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 541:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 550;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 542:
									monitor.wait();
									break;
								case 543:
									monitor.wait();
									break;
								case 544:
									monitor.wait();
									break;
								case 545:
									monitor.wait();
									break;
								case 546:
									monitor.wait();
									break;
								case 547:
									monitor.wait();
									break;
								case 548:
									monitor.wait();
									break;
								case 549:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 544;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 550:
									monitor.wait();
									break;
								case 551:
									monitor.wait();
									break;
								case 552:
									monitor.wait();
									break;
								case 553:
									monitor.wait();
									break;
								case 554:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 542;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 555:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 553;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 556:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 544;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 557:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 550;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 558:
									monitor.wait();
									break;
								case 559:
									monitor.wait();
									break;
								case 560:
									monitor.wait();
									break;
								case 561:
									monitor.wait();
									break;
								case 562:
									monitor.wait();
									break;
								case 563:
									monitor.wait();
									break;
								case 564:
									monitor.wait();
									break;
								case 565:
									monitor.wait();
									break;
								case 566:
									monitor.wait();
									break;
								case 567:
									monitor.wait();
									break;
								case 568:
									monitor.wait();
									break;
								case 569:
									monitor.wait();
									break;
								case 570:
									monitor.wait();
									break;
								case 571:
									monitor.wait();
									break;
								case 572:
									monitor.wait();
									break;
								case 573:
									monitor.wait();
									break;
								case 574:
									monitor.wait();
									break;
								case 575:
									monitor.wait();
									break;
								case 576:
									monitor.wait();
									break;
								case 577:
									monitor.wait();
									break;
								case 578:
									monitor.wait();
									break;
								case 579:
									monitor.wait();
									break;
								case 580:
									monitor.wait();
									break;
								case 581:
									monitor.wait();
									break;
								case 582:
									monitor.wait();
									break;
								case 583:
									monitor.wait();
									break;
								case 584:
									monitor.wait();
									break;
								case 585:
									monitor.wait();
									break;
								case 586:
									monitor.wait();
									break;
								case 587:
									monitor.wait();
									break;
								case 588:
									monitor.wait();
									break;
								case 589:
									monitor.wait();
									break;
								case 590:
									monitor.wait();
									break;
								case 591:
									monitor.wait();
									break;
								case 592:
									monitor.wait();
									break;
								case 593:
									monitor.wait();
									break;
								case 594:
									monitor.wait();
									break;
								case 595:
									monitor.wait();
									break;
								case 596:
									monitor.wait();
									break;
								case 597:
									monitor.wait();
									break;
								case 598:
									monitor.wait();
									break;
								case 599:
									monitor.wait();
									break;
								case 600:
									monitor.wait();
									break;
								case 601:
									monitor.wait();
									break;
								case 602:
									monitor.wait();
									break;
								case 603:
									monitor.wait();
									break;
								case 604:
									monitor.wait();
									break;
								case 605:
									monitor.wait();
									break;
								case 606:
									monitor.wait();
									break;
								case 607:
									monitor.wait();
									break;
								case 608:
									monitor.wait();
									break;
								case 609:
									monitor.wait();
									break;
								case 610:
									monitor.wait();
									break;
								case 611:
									monitor.wait();
									break;
								case 612:
									monitor.wait();
									break;
								case 613:
									monitor.wait();
									break;
								case 614:
									monitor.wait();
									break;
								case 615:
									monitor.wait();
									break;
								case 616:
									monitor.wait();
									break;
								case 617:
									monitor.wait();
									break;
								case 618:
									monitor.wait();
									break;
								case 619:
									monitor.wait();
									break;
								case 620:
									monitor.wait();
									break;
								case 621:
									monitor.wait();
									break;
								case 622:
									monitor.wait();
									break;
								case 623:
									monitor.wait();
									break;
								case 624:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 578;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 625:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 579;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 626:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 581;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 627:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 582;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 628:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 630;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 629:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 585;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 630:
									monitor.wait();
									break;
								case 631:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 586;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 632:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 587;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 633:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 588;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 634:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 635;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 635:
									monitor.wait();
									break;
								case 636:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 586;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 637:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 592;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 638:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 587;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 639:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 595;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 640:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 588;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 641:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 607;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 642:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 601;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 643:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 603;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 644:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 615;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 645:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 607;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 646:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 609;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 647:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 611;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 648:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 623;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 649:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 615;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 650:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 617;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 651:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 619;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 652:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 653;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 653:
									monitor.wait();
									break;
								case 654:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 623;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 655:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 624;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 656:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 625;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 657:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 626;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 658:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 627;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 659:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 661;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 660:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 629;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 661:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 630;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 662:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 631;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 663:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 632;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 664:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 633;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 665:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 666;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 666:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 635;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 667:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 631;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 668:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 637;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 669:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 632;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 670:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 639;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 671:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 633;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 672:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 645;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 673:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 642;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 674:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 643;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 675:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 649;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 676:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 645;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 677:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 646;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 678:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 647;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 679:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 654;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 680:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 649;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 681:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 650;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 682:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 651;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 683:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 684;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 684:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 653;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 685:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 654;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 686:
									monitor.wait();
									break;
								case 687:
									monitor.wait();
									break;
								case 688:
									monitor.wait();
									break;
								case 689:
									monitor.wait();
									break;
								case 690:
									monitor.wait();
									break;
								case 691:
									monitor.wait();
									break;
								case 692:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 661;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 693:
									monitor.wait();
									break;
								case 694:
									monitor.wait();
									break;
								case 695:
									monitor.wait();
									break;
								case 696:
									monitor.wait();
									break;
								case 697:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 666;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 698:
									monitor.wait();
									break;
								case 699:
									monitor.wait();
									break;
								case 700:
									monitor.wait();
									break;
								case 701:
									monitor.wait();
									break;
								case 702:
									monitor.wait();
									break;
								case 703:
									monitor.wait();
									break;
								case 704:
									monitor.wait();
									break;
								case 705:
									monitor.wait();
									break;
								case 706:
									monitor.wait();
									break;
								case 707:
									monitor.wait();
									break;
								case 708:
									monitor.wait();
									break;
								case 709:
									monitor.wait();
									break;
								case 710:
									monitor.wait();
									break;
								case 711:
									monitor.wait();
									break;
								case 712:
									monitor.wait();
									break;
								case 713:
									monitor.wait();
									break;
								case 714:
									monitor.wait();
									break;
								case 715:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 684;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 716:
									monitor.wait();
									break;
								case 717:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 60;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 718:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 722;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 719:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 723;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 720:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 724;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 721:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 63;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 722:
									monitor.wait();
									break;
								case 723:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 727;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 724:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 728;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 725:
									monitor.wait();
									break;
								case 726:
									monitor.wait();
									break;
								case 727:
									monitor.wait();
									break;
								case 728:
									monitor.wait();
									break;
								case 729:
									monitor.wait();
									break;
								case 730:
									monitor.wait();
									break;
								case 731:
									monitor.wait();
									break;
								case 732:
									monitor.wait();
									break;
								case 733:
									monitor.wait();
									break;
								case 734:
									monitor.wait();
									break;
								case 735:
									monitor.wait();
									break;
								case 736:
									monitor.wait();
									break;
								case 737:
									monitor.wait();
									break;
								case 738:
									monitor.wait();
									break;
								case 739:
									monitor.wait();
									break;
								case 740:
									monitor.wait();
									break;
								case 741:
									monitor.wait();
									break;
								case 742:
									monitor.wait();
									break;
								case 743:
									monitor.wait();
									break;
								case 744:
									monitor.wait();
									break;
								case 745:
									monitor.wait();
									break;
								case 746:
									monitor.wait();
									break;
								case 747:
									monitor.wait();
									break;
								case 748:
									monitor.wait();
									break;
								case 749:
									monitor.wait();
									break;
								case 750:
									monitor.wait();
									break;
								case 751:
									monitor.wait();
									break;
								case 752:
									monitor.wait();
									break;
								case 753:
									monitor.wait();
									break;
								case 754:
									monitor.wait();
									break;
								case 755:
									monitor.wait();
									break;
								case 756:
									monitor.wait();
									break;
								case 757:
									monitor.wait();
									break;
								case 758:
									monitor.wait();
									break;
								case 759:
									monitor.wait();
									break;
								case 760:
									monitor.wait();
									break;
								case 761:
									monitor.wait();
									break;
								case 762:
									monitor.wait();
									break;
								case 763:
									monitor.wait();
									break;
								case 764:
									monitor.wait();
									break;
								case 765:
									monitor.wait();
									break;
								case 766:
									monitor.wait();
									break;
								case 767:
									monitor.wait();
									break;
								case 768:
									monitor.wait();
									break;
								case 769:
									monitor.wait();
									break;
								case 770:
									monitor.wait();
									break;
								case 771:
									monitor.wait();
									break;
								case 772:
									monitor.wait();
									break;
								case 773:
									monitor.wait();
									break;
								case 774:
									monitor.wait();
									break;
								case 775:
									monitor.wait();
									break;
								case 776:
									monitor.wait();
									break;
								case 777:
									monitor.wait();
									break;
								case 778:
									monitor.wait();
									break;
								case 779:
									monitor.wait();
									break;
								case 780:
									monitor.wait();
									break;
								case 781:
									monitor.wait();
									break;
								case 782:
									monitor.wait();
									break;
								case 783:
									monitor.wait();
									break;
								case 784:
									monitor.wait();
									break;
								case 785:
									monitor.wait();
									break;
								case 786:
									monitor.wait();
									break;
								case 787:
									monitor.wait();
									break;
								case 788:
									monitor.wait();
									break;
								case 789:
									monitor.wait();
									break;
								case 790:
									monitor.wait();
									break;
								case 791:
									monitor.wait();
									break;
								case 792:
									monitor.wait();
									break;
								case 793:
									monitor.wait();
									break;
								case 794:
									monitor.wait();
									break;
								case 795:
									monitor.wait();
									break;
								case 796:
									monitor.wait();
									break;
								case 797:
									monitor.wait();
									break;
								case 798:
									monitor.wait();
									break;
								case 799:
									monitor.wait();
									break;
								case 800:
									monitor.wait();
									break;
								case 801:
									monitor.wait();
									break;
								case 802:
									monitor.wait();
									break;
								case 803:
									monitor.wait();
									break;
								case 804:
									monitor.wait();
									break;
								case 805:
									monitor.wait();
									break;
								case 806:
									monitor.wait();
									break;
								case 807:
									monitor.wait();
									break;
								case 808:
									monitor.wait();
									break;
								case 809:
									monitor.wait();
									break;
								case 810:
									monitor.wait();
									break;
								case 811:
									monitor.wait();
									break;
								case 812:
									monitor.wait();
									break;
								case 813:
									monitor.wait();
									break;
								case 814:
									monitor.wait();
									break;
								case 815:
									monitor.wait();
									break;
								case 816:
									monitor.wait();
									break;
								case 817:
									monitor.wait();
									break;
								case 818:
									monitor.wait();
									break;
								case 819:
									monitor.wait();
									break;
								case 820:
									monitor.wait();
									break;
								case 821:
									monitor.wait();
									break;
								case 822:
									monitor.wait();
									break;
								case 823:
									monitor.wait();
									break;
								case 824:
									monitor.wait();
									break;
								case 825:
									monitor.wait();
									break;
								case 826:
									monitor.wait();
									break;
								case 827:
									monitor.wait();
									break;
								case 828:
									monitor.wait();
									break;
								case 829:
									monitor.wait();
									break;
								case 830:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 67;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 831:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 761;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 832:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 762;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 833:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 578;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 834:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 765;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 835:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 766;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 836:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 581;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 837:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 840;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 838:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 770;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 839:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 630;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 840:
									monitor.wait();
									break;
								case 841:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 772;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 842:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 586;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 843:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 774;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 844:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 587;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 845:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 776;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 846:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 588;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 847:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 849;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 848:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 635;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 849:
									monitor.wait();
									break;
								case 850:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 585;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 851:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 772;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 852:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 783;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 853:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 592;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 854:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 774;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 855:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 787;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 856:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 595;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 857:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 776;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 858:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 805;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 859:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 607;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 860:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 582;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 861:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 796;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 862:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 601;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 863:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 799;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 864:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 603;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 865:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 817;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 866:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 615;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 867:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 805;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 868:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 579;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 869:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 808;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 870:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 609;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 871:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 811;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 872:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 611;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 873:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 829;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 874:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 623;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 875:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 817;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 876:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 68;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 877:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 820;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 878:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 617;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 879:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 823;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 880:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 619;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 881:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 883;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 882:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 653;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 883:
									monitor.wait();
									break;
								case 884:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 829;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 885:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 64;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 886:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 831;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 887:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 832;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 888:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 624;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 889:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 834;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 890:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 835;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 891:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 626;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 892:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 895;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 893:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 838;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 894:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 661;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 895:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 840;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 896:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 841;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 897:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 631;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 898:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 843;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 899:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 632;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 900:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 845;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 901:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 633;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 902:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 904;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 903:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 666;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 904:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 849;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 905:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 629;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 906:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 841;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 907:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 852;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 908:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 637;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 909:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 843;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 910:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 855;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 911:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 639;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 912:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 845;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 913:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 867;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 914:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 645;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 915:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 627;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 916:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 861;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 917:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 642;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 918:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 863;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 919:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 643;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 920:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 875;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 921:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 649;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 922:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 867;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 923:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 625;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 924:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 869;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 925:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 646;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 926:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 871;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 927:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 647;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 928:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 884;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 929:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 654;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 930:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 875;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 931:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 65;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 932:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 877;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 933:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 650;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 934:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 879;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 935:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 651;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 936:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 938;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 937:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 684;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 938:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 883;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 939:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 884;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 940:
									monitor.wait();
									break;
								case 941:
									monitor.wait();
									break;
								case 942:
									monitor.wait();
									break;
								case 943:
									monitor.wait();
									break;
								case 944:
									monitor.wait();
									break;
								case 945:
									monitor.wait();
									break;
								case 946:
									monitor.wait();
									break;
								case 947:
									monitor.wait();
									break;
								case 948:
									monitor.wait();
									break;
								case 949:
									monitor.wait();
									break;
								case 950:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 895;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 951:
									monitor.wait();
									break;
								case 952:
									monitor.wait();
									break;
								case 953:
									monitor.wait();
									break;
								case 954:
									monitor.wait();
									break;
								case 955:
									monitor.wait();
									break;
								case 956:
									monitor.wait();
									break;
								case 957:
									monitor.wait();
									break;
								case 958:
									monitor.wait();
									break;
								case 959:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 904;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 960:
									monitor.wait();
									break;
								case 961:
									monitor.wait();
									break;
								case 962:
									monitor.wait();
									break;
								case 963:
									monitor.wait();
									break;
								case 964:
									monitor.wait();
									break;
								case 965:
									monitor.wait();
									break;
								case 966:
									monitor.wait();
									break;
								case 967:
									monitor.wait();
									break;
								case 968:
									monitor.wait();
									break;
								case 969:
									monitor.wait();
									break;
								case 970:
									monitor.wait();
									break;
								case 971:
									monitor.wait();
									break;
								case 972:
									monitor.wait();
									break;
								case 973:
									monitor.wait();
									break;
								case 974:
									monitor.wait();
									break;
								case 975:
									monitor.wait();
									break;
								case 976:
									monitor.wait();
									break;
								case 977:
									monitor.wait();
									break;
								case 978:
									monitor.wait();
									break;
								case 979:
									monitor.wait();
									break;
								case 980:
									monitor.wait();
									break;
								case 981:
									monitor.wait();
									break;
								case 982:
									monitor.wait();
									break;
								case 983:
									monitor.wait();
									break;
								case 984:
									monitor.wait();
									break;
								case 985:
									monitor.wait();
									break;
								case 986:
									monitor.wait();
									break;
								case 987:
									monitor.wait();
									break;
								case 988:
									monitor.wait();
									break;
								case 989:
									monitor.wait();
									break;
								case 990:
									monitor.wait();
									break;
								case 991:
									monitor.wait();
									break;
								case 992:
									monitor.wait();
									break;
								case 993:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 938;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 994:
									monitor.wait();
									break;
								case 995:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 998;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 996:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 999;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 997:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1000;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 998:
									monitor.wait();
									break;
								case 999:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1002;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1000:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1003;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1001:
									monitor.wait();
									break;
								case 1002:
									monitor.wait();
									break;
								case 1003:
									monitor.wait();
									break;
								case 1004:
									monitor.wait();
									break;
								case 1005:
									monitor.wait();
									break;
								case 1006:
									monitor.wait();
									break;
								case 1007:
									monitor.wait();
									break;
								case 1008:
									monitor.wait();
									break;
								case 1009:
									monitor.wait();
									break;
								case 1010:
									monitor.wait();
									break;
								case 1011:
									monitor.wait();
									break;
								case 1012:
									monitor.wait();
									break;
								case 1013:
									monitor.wait();
									break;
								case 1014:
									monitor.wait();
									break;
								case 1015:
									monitor.wait();
									break;
								case 1016:
									monitor.wait();
									break;
								case 1017:
									monitor.wait();
									break;
								case 1018:
									monitor.wait();
									break;
								case 1019:
									monitor.wait();
									break;
								case 1020:
									monitor.wait();
									break;
								case 1021:
									monitor.wait();
									break;
								case 1022:
									monitor.wait();
									break;
								case 1023:
									monitor.wait();
									break;
								case 1024:
									monitor.wait();
									break;
								case 1025:
									monitor.wait();
									break;
								case 1026:
									monitor.wait();
									break;
								case 1027:
									monitor.wait();
									break;
								case 1028:
									monitor.wait();
									break;
								case 1029:
									monitor.wait();
									break;
								case 1030:
									monitor.wait();
									break;
								case 1031:
									monitor.wait();
									break;
								case 1032:
									monitor.wait();
									break;
								case 1033:
									monitor.wait();
									break;
								case 1034:
									monitor.wait();
									break;
								case 1035:
									monitor.wait();
									break;
								case 1036:
									monitor.wait();
									break;
								case 1037:
									monitor.wait();
									break;
								case 1038:
									monitor.wait();
									break;
								case 1039:
									monitor.wait();
									break;
								case 1040:
									monitor.wait();
									break;
								case 1041:
									monitor.wait();
									break;
								case 1042:
									monitor.wait();
									break;
								case 1043:
									monitor.wait();
									break;
								case 1044:
									monitor.wait();
									break;
								case 1045:
									monitor.wait();
									break;
								case 1046:
									monitor.wait();
									break;
								case 1047:
									monitor.wait();
									break;
								case 1048:
									monitor.wait();
									break;
								case 1049:
									monitor.wait();
									break;
								case 1050:
									monitor.wait();
									break;
								case 1051:
									monitor.wait();
									break;
								case 1052:
									monitor.wait();
									break;
								case 1053:
									monitor.wait();
									break;
								case 1054:
									monitor.wait();
									break;
								case 1055:
									monitor.wait();
									break;
								case 1056:
									monitor.wait();
									break;
								case 1057:
									monitor.wait();
									break;
								case 1058:
									monitor.wait();
									break;
								case 1059:
									monitor.wait();
									break;
								case 1060:
									monitor.wait();
									break;
								case 1061:
									monitor.wait();
									break;
								case 1062:
									monitor.wait();
									break;
								case 1063:
									monitor.wait();
									break;
								case 1064:
									monitor.wait();
									break;
								case 1065:
									monitor.wait();
									break;
								case 1066:
									monitor.wait();
									break;
								case 1067:
									monitor.wait();
									break;
								case 1068:
									monitor.wait();
									break;
								case 1069:
									monitor.wait();
									break;
								case 1070:
									monitor.wait();
									break;
								case 1071:
									monitor.wait();
									break;
								case 1072:
									monitor.wait();
									break;
								case 1073:
									monitor.wait();
									break;
								case 1074:
									monitor.wait();
									break;
								case 1075:
									monitor.wait();
									break;
								case 1076:
									monitor.wait();
									break;
								case 1077:
									monitor.wait();
									break;
								case 1078:
									monitor.wait();
									break;
								case 1079:
									monitor.wait();
									break;
								case 1080:
									monitor.wait();
									break;
								case 1081:
									monitor.wait();
									break;
								case 1082:
									monitor.wait();
									break;
								case 1083:
									monitor.wait();
									break;
								case 1084:
									monitor.wait();
									break;
								case 1085:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1039;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1086:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1040;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1087:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1042;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1088:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1043;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1089:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1091;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1090:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1046;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1091:
									monitor.wait();
									break;
								case 1092:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1047;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1093:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1048;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1094:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1049;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1095:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1096;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1096:
									monitor.wait();
									break;
								case 1097:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1047;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1098:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1053;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1099:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1048;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1100:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1056;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1101:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1049;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1102:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1068;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1103:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1062;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1104:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1064;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1105:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1076;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1106:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1068;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1107:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1070;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1108:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1072;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1109:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1084;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1110:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1076;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1111:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1078;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1112:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1080;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1113:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1114;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1114:
									monitor.wait();
									break;
								case 1115:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1084;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1116:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1085;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1117:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1086;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1118:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1087;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1119:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1088;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1120:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1122;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1121:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1090;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1122:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1091;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1123:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1092;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1124:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1093;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1125:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1094;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1126:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1127;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1127:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1096;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1128:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1092;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1129:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1098;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1130:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1093;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1131:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1100;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1132:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1094;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1133:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1106;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1134:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1103;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1135:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1104;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1136:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1110;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1137:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1106;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1138:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1107;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1139:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1108;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1140:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1115;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1141:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1110;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1142:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1111;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1143:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1112;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1144:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1145;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1145:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1114;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1146:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1115;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1147:
									monitor.wait();
									break;
								case 1148:
									monitor.wait();
									break;
								case 1149:
									monitor.wait();
									break;
								case 1150:
									monitor.wait();
									break;
								case 1151:
									monitor.wait();
									break;
								case 1152:
									monitor.wait();
									break;
								case 1153:
									monitor.wait();
									break;
								case 1154:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1122;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1155:
									monitor.wait();
									break;
								case 1156:
									monitor.wait();
									break;
								case 1157:
									monitor.wait();
									break;
								case 1158:
									monitor.wait();
									break;
								case 1159:
									monitor.wait();
									break;
								case 1160:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1127;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1161:
									monitor.wait();
									break;
								case 1162:
									monitor.wait();
									break;
								case 1163:
									monitor.wait();
									break;
								case 1164:
									monitor.wait();
									break;
								case 1165:
									monitor.wait();
									break;
								case 1166:
									monitor.wait();
									break;
								case 1167:
									monitor.wait();
									break;
								case 1168:
									monitor.wait();
									break;
								case 1169:
									monitor.wait();
									break;
								case 1170:
									monitor.wait();
									break;
								case 1171:
									monitor.wait();
									break;
								case 1172:
									monitor.wait();
									break;
								case 1173:
									monitor.wait();
									break;
								case 1174:
									monitor.wait();
									break;
								case 1175:
									monitor.wait();
									break;
								case 1176:
									monitor.wait();
									break;
								case 1177:
									monitor.wait();
									break;
								case 1178:
									monitor.wait();
									break;
								case 1179:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1145;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1180:
									monitor.wait();
									break;
								case 1181:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1184;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1182:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1185;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1183:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1186;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1184:
									monitor.wait();
									break;
								case 1185:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1188;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1186:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1189;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1187:
									monitor.wait();
									break;
								case 1188:
									monitor.wait();
									break;
								case 1189:
									monitor.wait();
									break;
								case 1190:
									monitor.wait();
									break;
								case 1191:
									monitor.wait();
									break;
								case 1192:
									monitor.wait();
									break;
								case 1193:
									monitor.wait();
									break;
								case 1194:
									monitor.wait();
									break;
								case 1195:
									monitor.wait();
									break;
								case 1196:
									monitor.wait();
									break;
								case 1197:
									monitor.wait();
									break;
								case 1198:
									monitor.wait();
									break;
								case 1199:
									monitor.wait();
									break;
								case 1200:
									monitor.wait();
									break;
								case 1201:
									monitor.wait();
									break;
								case 1202:
									monitor.wait();
									break;
								case 1203:
									monitor.wait();
									break;
								case 1204:
									monitor.wait();
									break;
								case 1205:
									monitor.wait();
									break;
								case 1206:
									monitor.wait();
									break;
								case 1207:
									monitor.wait();
									break;
								case 1208:
									monitor.wait();
									break;
								case 1209:
									monitor.wait();
									break;
								case 1210:
									monitor.wait();
									break;
								case 1211:
									monitor.wait();
									break;
								case 1212:
									monitor.wait();
									break;
								case 1213:
									monitor.wait();
									break;
								case 1214:
									monitor.wait();
									break;
								case 1215:
									monitor.wait();
									break;
								case 1216:
									monitor.wait();
									break;
								case 1217:
									monitor.wait();
									break;
								case 1218:
									monitor.wait();
									break;
								case 1219:
									monitor.wait();
									break;
								case 1220:
									monitor.wait();
									break;
								case 1221:
									monitor.wait();
									break;
								case 1222:
									monitor.wait();
									break;
								case 1223:
									monitor.wait();
									break;
								case 1224:
									monitor.wait();
									break;
								case 1225:
									monitor.wait();
									break;
								case 1226:
									monitor.wait();
									break;
								case 1227:
									monitor.wait();
									break;
								case 1228:
									monitor.wait();
									break;
								case 1229:
									monitor.wait();
									break;
								case 1230:
									monitor.wait();
									break;
								case 1231:
									monitor.wait();
									break;
								case 1232:
									monitor.wait();
									break;
								case 1233:
									monitor.wait();
									break;
								case 1234:
									monitor.wait();
									break;
								case 1235:
									monitor.wait();
									break;
								case 1236:
									monitor.wait();
									break;
								case 1237:
									monitor.wait();
									break;
								case 1238:
									monitor.wait();
									break;
								case 1239:
									monitor.wait();
									break;
								case 1240:
									monitor.wait();
									break;
								case 1241:
									monitor.wait();
									break;
								case 1242:
									monitor.wait();
									break;
								case 1243:
									monitor.wait();
									break;
								case 1244:
									monitor.wait();
									break;
								case 1245:
									monitor.wait();
									break;
								case 1246:
									monitor.wait();
									break;
								case 1247:
									monitor.wait();
									break;
								case 1248:
									monitor.wait();
									break;
								case 1249:
									monitor.wait();
									break;
								case 1250:
									monitor.wait();
									break;
								case 1251:
									monitor.wait();
									break;
								case 1252:
									monitor.wait();
									break;
								case 1253:
									monitor.wait();
									break;
								case 1254:
									monitor.wait();
									break;
								case 1255:
									monitor.wait();
									break;
								case 1256:
									monitor.wait();
									break;
								case 1257:
									monitor.wait();
									break;
								case 1258:
									monitor.wait();
									break;
								case 1259:
									monitor.wait();
									break;
								case 1260:
									monitor.wait();
									break;
								case 1261:
									monitor.wait();
									break;
								case 1262:
									monitor.wait();
									break;
								case 1263:
									monitor.wait();
									break;
								case 1264:
									monitor.wait();
									break;
								case 1265:
									monitor.wait();
									break;
								case 1266:
									monitor.wait();
									break;
								case 1267:
									monitor.wait();
									break;
								case 1268:
									monitor.wait();
									break;
								case 1269:
									monitor.wait();
									break;
								case 1270:
									monitor.wait();
									break;
								case 1271:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1225;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1272:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1226;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1273:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1228;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1274:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1229;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1275:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1277;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1276:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1232;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1277:
									monitor.wait();
									break;
								case 1278:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1233;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1279:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1234;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1280:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1235;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1281:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1282;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1282:
									monitor.wait();
									break;
								case 1283:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1233;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1284:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1239;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1285:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1234;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1286:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1242;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1287:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1235;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1288:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1254;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1289:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1248;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1290:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1250;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1291:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1262;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1292:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1254;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1293:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1256;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1294:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1258;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1295:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1270;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1296:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1262;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1297:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1264;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1298:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1266;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1299:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1300;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1300:
									monitor.wait();
									break;
								case 1301:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1270;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1302:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1271;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1303:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1272;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1304:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1273;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1305:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1274;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1306:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1308;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1307:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1276;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1308:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1277;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1309:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1278;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1310:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1279;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1311:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1280;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1312:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1313;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1313:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1282;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1314:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1278;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1315:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1284;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1316:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1279;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1317:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1286;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1318:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1280;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1319:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1292;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1320:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1289;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1321:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1290;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1322:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1296;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1323:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1292;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1324:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1293;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1325:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1294;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1326:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1301;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1327:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1296;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1328:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1297;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1329:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1298;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1330:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1331;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1331:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1300;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1332:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1301;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1333:
									monitor.wait();
									break;
								case 1334:
									monitor.wait();
									break;
								case 1335:
									monitor.wait();
									break;
								case 1336:
									monitor.wait();
									break;
								case 1337:
									monitor.wait();
									break;
								case 1338:
									monitor.wait();
									break;
								case 1339:
									monitor.wait();
									break;
								case 1340:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1308;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1341:
									monitor.wait();
									break;
								case 1342:
									monitor.wait();
									break;
								case 1343:
									monitor.wait();
									break;
								case 1344:
									monitor.wait();
									break;
								case 1345:
									monitor.wait();
									break;
								case 1346:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1313;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1347:
									monitor.wait();
									break;
								case 1348:
									monitor.wait();
									break;
								case 1349:
									monitor.wait();
									break;
								case 1350:
									monitor.wait();
									break;
								case 1351:
									monitor.wait();
									break;
								case 1352:
									monitor.wait();
									break;
								case 1353:
									monitor.wait();
									break;
								case 1354:
									monitor.wait();
									break;
								case 1355:
									monitor.wait();
									break;
								case 1356:
									monitor.wait();
									break;
								case 1357:
									monitor.wait();
									break;
								case 1358:
									monitor.wait();
									break;
								case 1359:
									monitor.wait();
									break;
								case 1360:
									monitor.wait();
									break;
								case 1361:
									monitor.wait();
									break;
								case 1362:
									monitor.wait();
									break;
								case 1363:
									monitor.wait();
									break;
								case 1364:
									monitor.wait();
									break;
								case 1365:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1331;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1366:
									monitor.wait();
									break;
								case 1367:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2030;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1368:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2031;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1369:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2032;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1370:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1878;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1371:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1879;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1372:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1880;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1373:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1726;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1374:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1727;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1375:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1728;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1376:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 24;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1377:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1508;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1378:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1509;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1379:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1510;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1380:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1382;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1381:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1383;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1382:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1385;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1383:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1386;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1384:
									monitor.wait();
									break;
								case 1385:
									monitor.wait();
									break;
								case 1386:
									monitor.wait();
									break;
								case 1387:
									monitor.wait();
									break;
								case 1388:
									monitor.wait();
									break;
								case 1389:
									monitor.wait();
									break;
								case 1390:
									monitor.wait();
									break;
								case 1391:
									monitor.wait();
									break;
								case 1392:
									monitor.wait();
									break;
								case 1393:
									monitor.wait();
									break;
								case 1394:
									monitor.wait();
									break;
								case 1395:
									monitor.wait();
									break;
								case 1396:
									monitor.wait();
									break;
								case 1397:
									monitor.wait();
									break;
								case 1398:
									monitor.wait();
									break;
								case 1399:
									monitor.wait();
									break;
								case 1400:
									monitor.wait();
									break;
								case 1401:
									monitor.wait();
									break;
								case 1402:
									monitor.wait();
									break;
								case 1403:
									monitor.wait();
									break;
								case 1404:
									monitor.wait();
									break;
								case 1405:
									monitor.wait();
									break;
								case 1406:
									monitor.wait();
									break;
								case 1407:
									monitor.wait();
									break;
								case 1408:
									monitor.wait();
									break;
								case 1409:
									monitor.wait();
									break;
								case 1410:
									monitor.wait();
									break;
								case 1411:
									monitor.wait();
									break;
								case 1412:
									monitor.wait();
									break;
								case 1413:
									monitor.wait();
									break;
								case 1414:
									monitor.wait();
									break;
								case 1415:
									monitor.wait();
									break;
								case 1416:
									monitor.wait();
									break;
								case 1417:
									monitor.wait();
									break;
								case 1418:
									monitor.wait();
									break;
								case 1419:
									monitor.wait();
									break;
								case 1420:
									monitor.wait();
									break;
								case 1421:
									monitor.wait();
									break;
								case 1422:
									monitor.wait();
									break;
								case 1423:
									monitor.wait();
									break;
								case 1424:
									monitor.wait();
									break;
								case 1425:
									monitor.wait();
									break;
								case 1426:
									monitor.wait();
									break;
								case 1427:
									monitor.wait();
									break;
								case 1428:
									monitor.wait();
									break;
								case 1429:
									monitor.wait();
									break;
								case 1430:
									monitor.wait();
									break;
								case 1431:
									monitor.wait();
									break;
								case 1432:
									monitor.wait();
									break;
								case 1433:
									monitor.wait();
									break;
								case 1434:
									monitor.wait();
									break;
								case 1435:
									monitor.wait();
									break;
								case 1436:
									monitor.wait();
									break;
								case 1437:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1402;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1438:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1403;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1439:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1441;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1440:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1406;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1441:
									monitor.wait();
									break;
								case 1442:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1407;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1443:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1408;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1444:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1409;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1445:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1446;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1446:
									monitor.wait();
									break;
								case 1447:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1407;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1448:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1413;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1449:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1408;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1450:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1416;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1451:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1409;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1452:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1428;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1453:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1422;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1454:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1424;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1455:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1436;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1456:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1428;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1457:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1430;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1458:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1432;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1459:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1460;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1460:
									monitor.wait();
									break;
								case 1461:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1436;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1462:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1437;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1463:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1438;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1464:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1466;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1465:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1440;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1466:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1441;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1467:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1442;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1468:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1443;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1469:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1444;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1470:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1471;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1471:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1446;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1472:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1442;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1473:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1448;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1474:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1443;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1475:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1450;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1476:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1444;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1477:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1456;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1478:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1453;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1479:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1454;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1480:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1461;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1481:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1456;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1482:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1457;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1483:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1458;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1484:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1485;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1485:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1460;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1486:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1461;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1487:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1488;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1488:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1490;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1489:
									monitor.wait();
									break;
								case 1490:
									monitor.wait();
									break;
								case 1491:
									monitor.wait();
									break;
								case 1492:
									monitor.wait();
									break;
								case 1493:
									monitor.wait();
									break;
								case 1494:
									monitor.wait();
									break;
								case 1495:
									monitor.wait();
									break;
								case 1496:
									monitor.wait();
									break;
								case 1497:
									monitor.wait();
									break;
								case 1498:
									monitor.wait();
									break;
								case 1499:
									monitor.wait();
									break;
								case 1500:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1496;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1501:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1502;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1502:
									monitor.wait();
									break;
								case 1503:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1500;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1504:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1505;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1505:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1502;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1506:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1485;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1507:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 27;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1508:
									monitor.wait();
									break;
								case 1509:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1513;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1510:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1514;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1511:
									monitor.wait();
									break;
								case 1512:
									monitor.wait();
									break;
								case 1513:
									monitor.wait();
									break;
								case 1514:
									monitor.wait();
									break;
								case 1515:
									monitor.wait();
									break;
								case 1516:
									monitor.wait();
									break;
								case 1517:
									monitor.wait();
									break;
								case 1518:
									monitor.wait();
									break;
								case 1519:
									monitor.wait();
									break;
								case 1520:
									monitor.wait();
									break;
								case 1521:
									monitor.wait();
									break;
								case 1522:
									monitor.wait();
									break;
								case 1523:
									monitor.wait();
									break;
								case 1524:
									monitor.wait();
									break;
								case 1525:
									monitor.wait();
									break;
								case 1526:
									monitor.wait();
									break;
								case 1527:
									monitor.wait();
									break;
								case 1528:
									monitor.wait();
									break;
								case 1529:
									monitor.wait();
									break;
								case 1530:
									monitor.wait();
									break;
								case 1531:
									monitor.wait();
									break;
								case 1532:
									monitor.wait();
									break;
								case 1533:
									monitor.wait();
									break;
								case 1534:
									monitor.wait();
									break;
								case 1535:
									monitor.wait();
									break;
								case 1536:
									monitor.wait();
									break;
								case 1537:
									monitor.wait();
									break;
								case 1538:
									monitor.wait();
									break;
								case 1539:
									monitor.wait();
									break;
								case 1540:
									monitor.wait();
									break;
								case 1541:
									monitor.wait();
									break;
								case 1542:
									monitor.wait();
									break;
								case 1543:
									monitor.wait();
									break;
								case 1544:
									monitor.wait();
									break;
								case 1545:
									monitor.wait();
									break;
								case 1546:
									monitor.wait();
									break;
								case 1547:
									monitor.wait();
									break;
								case 1548:
									monitor.wait();
									break;
								case 1549:
									monitor.wait();
									break;
								case 1550:
									monitor.wait();
									break;
								case 1551:
									monitor.wait();
									break;
								case 1552:
									monitor.wait();
									break;
								case 1553:
									monitor.wait();
									break;
								case 1554:
									monitor.wait();
									break;
								case 1555:
									monitor.wait();
									break;
								case 1556:
									monitor.wait();
									break;
								case 1557:
									monitor.wait();
									break;
								case 1558:
									monitor.wait();
									break;
								case 1559:
									monitor.wait();
									break;
								case 1560:
									monitor.wait();
									break;
								case 1561:
									monitor.wait();
									break;
								case 1562:
									monitor.wait();
									break;
								case 1563:
									monitor.wait();
									break;
								case 1564:
									monitor.wait();
									break;
								case 1565:
									monitor.wait();
									break;
								case 1566:
									monitor.wait();
									break;
								case 1567:
									monitor.wait();
									break;
								case 1568:
									monitor.wait();
									break;
								case 1569:
									monitor.wait();
									break;
								case 1570:
									monitor.wait();
									break;
								case 1571:
									monitor.wait();
									break;
								case 1572:
									monitor.wait();
									break;
								case 1573:
									monitor.wait();
									break;
								case 1574:
									monitor.wait();
									break;
								case 1575:
									monitor.wait();
									break;
								case 1576:
									monitor.wait();
									break;
								case 1577:
									monitor.wait();
									break;
								case 1578:
									monitor.wait();
									break;
								case 1579:
									monitor.wait();
									break;
								case 1580:
									monitor.wait();
									break;
								case 1581:
									monitor.wait();
									break;
								case 1582:
									monitor.wait();
									break;
								case 1583:
									monitor.wait();
									break;
								case 1584:
									monitor.wait();
									break;
								case 1585:
									monitor.wait();
									break;
								case 1586:
									monitor.wait();
									break;
								case 1587:
									monitor.wait();
									break;
								case 1588:
									monitor.wait();
									break;
								case 1589:
									monitor.wait();
									break;
								case 1590:
									monitor.wait();
									break;
								case 1591:
									monitor.wait();
									break;
								case 1592:
									monitor.wait();
									break;
								case 1593:
									monitor.wait();
									break;
								case 1594:
									monitor.wait();
									break;
								case 1595:
									monitor.wait();
									break;
								case 1596:
									monitor.wait();
									break;
								case 1597:
									monitor.wait();
									break;
								case 1598:
									monitor.wait();
									break;
								case 1599:
									monitor.wait();
									break;
								case 1600:
									monitor.wait();
									break;
								case 1601:
									monitor.wait();
									break;
								case 1602:
									monitor.wait();
									break;
								case 1603:
									monitor.wait();
									break;
								case 1604:
									monitor.wait();
									break;
								case 1605:
									monitor.wait();
									break;
								case 1606:
									monitor.wait();
									break;
								case 1607:
									monitor.wait();
									break;
								case 1608:
									monitor.wait();
									break;
								case 1609:
									monitor.wait();
									break;
								case 1610:
									monitor.wait();
									break;
								case 1611:
									monitor.wait();
									break;
								case 1612:
									monitor.wait();
									break;
								case 1613:
									monitor.wait();
									break;
								case 1614:
									monitor.wait();
									break;
								case 1615:
									monitor.wait();
									break;
								case 1616:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 31;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1617:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1547;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1618:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1548;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1619:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1385;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1620:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1551;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1621:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1552;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1622:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1402;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1623:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1626;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1624:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1556;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1625:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1441;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1626:
									monitor.wait();
									break;
								case 1627:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1558;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1628:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1407;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1629:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1560;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1630:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1408;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1631:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1562;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1632:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1409;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1633:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1635;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1634:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1446;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1635:
									monitor.wait();
									break;
								case 1636:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1406;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1637:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1558;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1638:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1569;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1639:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1413;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1640:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1560;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1641:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1573;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1642:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1416;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1643:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1562;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1644:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1591;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1645:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1428;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1646:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1403;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1647:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1582;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1648:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1422;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1649:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1585;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1650:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1424;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1651:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1603;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1652:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1436;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1653:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1591;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1654:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1386;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1655:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1594;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1656:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1430;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1657:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1597;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1658:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1432;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1659:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1615;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1660:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1460;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1661:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1603;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1662:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 32;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1663:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1606;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1664:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1490;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1665:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1609;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1666:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1496;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1667:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1669;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1668:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1502;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1669:
									monitor.wait();
									break;
								case 1670:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1615;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1671:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 28;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1672:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1617;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1673:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1618;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1674:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1382;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1675:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1620;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1676:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1621;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1677:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1437;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1678:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1681;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1679:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1624;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1680:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1466;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1681:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1626;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1682:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1627;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1683:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1442;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1684:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1629;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1685:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1443;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1686:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1631;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1687:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1444;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1688:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1690;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1689:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1471;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1690:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1635;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1691:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1440;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1692:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1627;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1693:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1638;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1694:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1448;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1695:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1629;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1696:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1641;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1697:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1450;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1698:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1631;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1699:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1653;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1700:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1456;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1701:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1438;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1702:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1647;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1703:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1453;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1704:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1649;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1705:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1454;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1706:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1661;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1707:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1461;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1708:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1653;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1709:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1383;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1710:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1655;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1711:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1457;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1712:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1657;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1713:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1458;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1714:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1670;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1715:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1485;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1716:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1661;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1717:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 29;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1718:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1663;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1719:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1488;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1720:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1665;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1721:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1500;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1722:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1724;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1723:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1505;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1724:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1669;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1725:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1670;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1726:
									monitor.wait();
									break;
								case 1727:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1730;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1728:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1731;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1729:
									monitor.wait();
									break;
								case 1730:
									monitor.wait();
									break;
								case 1731:
									monitor.wait();
									break;
								case 1732:
									monitor.wait();
									break;
								case 1733:
									monitor.wait();
									break;
								case 1734:
									monitor.wait();
									break;
								case 1735:
									monitor.wait();
									break;
								case 1736:
									monitor.wait();
									break;
								case 1737:
									monitor.wait();
									break;
								case 1738:
									monitor.wait();
									break;
								case 1739:
									monitor.wait();
									break;
								case 1740:
									monitor.wait();
									break;
								case 1741:
									monitor.wait();
									break;
								case 1742:
									monitor.wait();
									break;
								case 1743:
									monitor.wait();
									break;
								case 1744:
									monitor.wait();
									break;
								case 1745:
									monitor.wait();
									break;
								case 1746:
									monitor.wait();
									break;
								case 1747:
									monitor.wait();
									break;
								case 1748:
									monitor.wait();
									break;
								case 1749:
									monitor.wait();
									break;
								case 1750:
									monitor.wait();
									break;
								case 1751:
									monitor.wait();
									break;
								case 1752:
									monitor.wait();
									break;
								case 1753:
									monitor.wait();
									break;
								case 1754:
									monitor.wait();
									break;
								case 1755:
									monitor.wait();
									break;
								case 1756:
									monitor.wait();
									break;
								case 1757:
									monitor.wait();
									break;
								case 1758:
									monitor.wait();
									break;
								case 1759:
									monitor.wait();
									break;
								case 1760:
									monitor.wait();
									break;
								case 1761:
									monitor.wait();
									break;
								case 1762:
									monitor.wait();
									break;
								case 1763:
									monitor.wait();
									break;
								case 1764:
									monitor.wait();
									break;
								case 1765:
									monitor.wait();
									break;
								case 1766:
									monitor.wait();
									break;
								case 1767:
									monitor.wait();
									break;
								case 1768:
									monitor.wait();
									break;
								case 1769:
									monitor.wait();
									break;
								case 1770:
									monitor.wait();
									break;
								case 1771:
									monitor.wait();
									break;
								case 1772:
									monitor.wait();
									break;
								case 1773:
									monitor.wait();
									break;
								case 1774:
									monitor.wait();
									break;
								case 1775:
									monitor.wait();
									break;
								case 1776:
									monitor.wait();
									break;
								case 1777:
									monitor.wait();
									break;
								case 1778:
									monitor.wait();
									break;
								case 1779:
									monitor.wait();
									break;
								case 1780:
									monitor.wait();
									break;
								case 1781:
									monitor.wait();
									break;
								case 1782:
									monitor.wait();
									break;
								case 1783:
									monitor.wait();
									break;
								case 1784:
									monitor.wait();
									break;
								case 1785:
									monitor.wait();
									break;
								case 1786:
									monitor.wait();
									break;
								case 1787:
									monitor.wait();
									break;
								case 1788:
									monitor.wait();
									break;
								case 1789:
									monitor.wait();
									break;
								case 1790:
									monitor.wait();
									break;
								case 1791:
									monitor.wait();
									break;
								case 1792:
									monitor.wait();
									break;
								case 1793:
									monitor.wait();
									break;
								case 1794:
									monitor.wait();
									break;
								case 1795:
									monitor.wait();
									break;
								case 1796:
									monitor.wait();
									break;
								case 1797:
									monitor.wait();
									break;
								case 1798:
									monitor.wait();
									break;
								case 1799:
									monitor.wait();
									break;
								case 1800:
									monitor.wait();
									break;
								case 1801:
									monitor.wait();
									break;
								case 1802:
									monitor.wait();
									break;
								case 1803:
									monitor.wait();
									break;
								case 1804:
									monitor.wait();
									break;
								case 1805:
									monitor.wait();
									break;
								case 1806:
									monitor.wait();
									break;
								case 1807:
									monitor.wait();
									break;
								case 1808:
									monitor.wait();
									break;
								case 1809:
									monitor.wait();
									break;
								case 1810:
									monitor.wait();
									break;
								case 1811:
									monitor.wait();
									break;
								case 1812:
									monitor.wait();
									break;
								case 1813:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1767;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1814:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1768;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1815:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1770;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1816:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1771;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1817:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1819;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1818:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1774;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1819:
									monitor.wait();
									break;
								case 1820:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1775;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1821:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1776;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1822:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1777;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1823:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1824;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1824:
									monitor.wait();
									break;
								case 1825:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1775;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1826:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1781;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1827:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1776;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1828:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1784;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1829:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1777;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1830:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1796;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1831:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1790;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1832:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1792;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1833:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1804;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1834:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1796;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1835:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1798;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1836:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1800;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1837:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1812;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1838:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1804;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1839:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1806;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1840:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1808;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1841:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1842;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1842:
									monitor.wait();
									break;
								case 1843:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1812;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1844:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1813;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1845:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1814;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1846:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1815;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1847:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1816;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1848:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1851;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1849:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1818;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1850:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1681;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1851:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1819;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1852:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1820;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1853:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1821;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1854:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1822;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1855:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1857;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1856:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1690;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1857:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1824;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1858:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1820;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1859:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1826;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1860:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1821;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1861:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1828;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1862:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1822;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1863:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1834;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1864:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1831;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1865:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1832;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1866:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1838;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1867:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1834;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1868:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1835;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1869:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1836;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1870:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1843;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1871:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1838;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1872:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1839;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1873:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1840;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1874:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1876;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1875:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1724;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1876:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1842;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1877:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1843;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1878:
									monitor.wait();
									break;
								case 1879:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1882;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1880:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1883;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1881:
									monitor.wait();
									break;
								case 1882:
									monitor.wait();
									break;
								case 1883:
									monitor.wait();
									break;
								case 1884:
									monitor.wait();
									break;
								case 1885:
									monitor.wait();
									break;
								case 1886:
									monitor.wait();
									break;
								case 1887:
									monitor.wait();
									break;
								case 1888:
									monitor.wait();
									break;
								case 1889:
									monitor.wait();
									break;
								case 1890:
									monitor.wait();
									break;
								case 1891:
									monitor.wait();
									break;
								case 1892:
									monitor.wait();
									break;
								case 1893:
									monitor.wait();
									break;
								case 1894:
									monitor.wait();
									break;
								case 1895:
									monitor.wait();
									break;
								case 1896:
									monitor.wait();
									break;
								case 1897:
									monitor.wait();
									break;
								case 1898:
									monitor.wait();
									break;
								case 1899:
									monitor.wait();
									break;
								case 1900:
									monitor.wait();
									break;
								case 1901:
									monitor.wait();
									break;
								case 1902:
									monitor.wait();
									break;
								case 1903:
									monitor.wait();
									break;
								case 1904:
									monitor.wait();
									break;
								case 1905:
									monitor.wait();
									break;
								case 1906:
									monitor.wait();
									break;
								case 1907:
									monitor.wait();
									break;
								case 1908:
									monitor.wait();
									break;
								case 1909:
									monitor.wait();
									break;
								case 1910:
									monitor.wait();
									break;
								case 1911:
									monitor.wait();
									break;
								case 1912:
									monitor.wait();
									break;
								case 1913:
									monitor.wait();
									break;
								case 1914:
									monitor.wait();
									break;
								case 1915:
									monitor.wait();
									break;
								case 1916:
									monitor.wait();
									break;
								case 1917:
									monitor.wait();
									break;
								case 1918:
									monitor.wait();
									break;
								case 1919:
									monitor.wait();
									break;
								case 1920:
									monitor.wait();
									break;
								case 1921:
									monitor.wait();
									break;
								case 1922:
									monitor.wait();
									break;
								case 1923:
									monitor.wait();
									break;
								case 1924:
									monitor.wait();
									break;
								case 1925:
									monitor.wait();
									break;
								case 1926:
									monitor.wait();
									break;
								case 1927:
									monitor.wait();
									break;
								case 1928:
									monitor.wait();
									break;
								case 1929:
									monitor.wait();
									break;
								case 1930:
									monitor.wait();
									break;
								case 1931:
									monitor.wait();
									break;
								case 1932:
									monitor.wait();
									break;
								case 1933:
									monitor.wait();
									break;
								case 1934:
									monitor.wait();
									break;
								case 1935:
									monitor.wait();
									break;
								case 1936:
									monitor.wait();
									break;
								case 1937:
									monitor.wait();
									break;
								case 1938:
									monitor.wait();
									break;
								case 1939:
									monitor.wait();
									break;
								case 1940:
									monitor.wait();
									break;
								case 1941:
									monitor.wait();
									break;
								case 1942:
									monitor.wait();
									break;
								case 1943:
									monitor.wait();
									break;
								case 1944:
									monitor.wait();
									break;
								case 1945:
									monitor.wait();
									break;
								case 1946:
									monitor.wait();
									break;
								case 1947:
									monitor.wait();
									break;
								case 1948:
									monitor.wait();
									break;
								case 1949:
									monitor.wait();
									break;
								case 1950:
									monitor.wait();
									break;
								case 1951:
									monitor.wait();
									break;
								case 1952:
									monitor.wait();
									break;
								case 1953:
									monitor.wait();
									break;
								case 1954:
									monitor.wait();
									break;
								case 1955:
									monitor.wait();
									break;
								case 1956:
									monitor.wait();
									break;
								case 1957:
									monitor.wait();
									break;
								case 1958:
									monitor.wait();
									break;
								case 1959:
									monitor.wait();
									break;
								case 1960:
									monitor.wait();
									break;
								case 1961:
									monitor.wait();
									break;
								case 1962:
									monitor.wait();
									break;
								case 1963:
									monitor.wait();
									break;
								case 1964:
									monitor.wait();
									break;
								case 1965:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1919;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1966:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1920;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1967:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1922;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1968:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1923;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1969:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1971;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1970:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1926;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1971:
									monitor.wait();
									break;
								case 1972:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1927;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1973:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1928;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1974:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1929;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1975:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1976;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1976:
									monitor.wait();
									break;
								case 1977:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1927;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1978:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1933;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1979:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1928;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1980:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1936;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1981:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1929;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1982:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1948;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1983:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1942;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1984:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1944;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1985:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1956;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1986:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1948;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1987:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1950;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1988:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1952;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1989:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1964;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1990:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1956;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1991:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1958;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1992:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1960;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1993:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1994;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1994:
									monitor.wait();
									break;
								case 1995:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1964;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1996:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1965;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1997:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1966;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1998:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1967;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 1999:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1968;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2000:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2003;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2001:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1970;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2002:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1851;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2003:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1971;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2004:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1972;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2005:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1973;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2006:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1974;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2007:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2009;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2008:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1857;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2009:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1976;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2010:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1972;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2011:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1978;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2012:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1973;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2013:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1980;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2014:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1974;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2015:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1986;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2016:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1983;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2017:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1984;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2018:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1990;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2019:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1986;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2020:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1987;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2021:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1988;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2022:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1995;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2023:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1990;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2024:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1991;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2025:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1992;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2026:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2028;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2027:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1876;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2028:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1994;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2029:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1995;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2030:
									monitor.wait();
									break;
								case 2031:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2034;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2032:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2035;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2033:
									monitor.wait();
									break;
								case 2034:
									monitor.wait();
									break;
								case 2035:
									monitor.wait();
									break;
								case 2036:
									monitor.wait();
									break;
								case 2037:
									monitor.wait();
									break;
								case 2038:
									monitor.wait();
									break;
								case 2039:
									monitor.wait();
									break;
								case 2040:
									monitor.wait();
									break;
								case 2041:
									monitor.wait();
									break;
								case 2042:
									monitor.wait();
									break;
								case 2043:
									monitor.wait();
									break;
								case 2044:
									monitor.wait();
									break;
								case 2045:
									monitor.wait();
									break;
								case 2046:
									monitor.wait();
									break;
								case 2047:
									monitor.wait();
									break;
								case 2048:
									monitor.wait();
									break;
								case 2049:
									monitor.wait();
									break;
								case 2050:
									monitor.wait();
									break;
								case 2051:
									monitor.wait();
									break;
								case 2052:
									monitor.wait();
									break;
								case 2053:
									monitor.wait();
									break;
								case 2054:
									monitor.wait();
									break;
								case 2055:
									monitor.wait();
									break;
								case 2056:
									monitor.wait();
									break;
								case 2057:
									monitor.wait();
									break;
								case 2058:
									monitor.wait();
									break;
								case 2059:
									monitor.wait();
									break;
								case 2060:
									monitor.wait();
									break;
								case 2061:
									monitor.wait();
									break;
								case 2062:
									monitor.wait();
									break;
								case 2063:
									monitor.wait();
									break;
								case 2064:
									monitor.wait();
									break;
								case 2065:
									monitor.wait();
									break;
								case 2066:
									monitor.wait();
									break;
								case 2067:
									monitor.wait();
									break;
								case 2068:
									monitor.wait();
									break;
								case 2069:
									monitor.wait();
									break;
								case 2070:
									monitor.wait();
									break;
								case 2071:
									monitor.wait();
									break;
								case 2072:
									monitor.wait();
									break;
								case 2073:
									monitor.wait();
									break;
								case 2074:
									monitor.wait();
									break;
								case 2075:
									monitor.wait();
									break;
								case 2076:
									monitor.wait();
									break;
								case 2077:
									monitor.wait();
									break;
								case 2078:
									monitor.wait();
									break;
								case 2079:
									monitor.wait();
									break;
								case 2080:
									monitor.wait();
									break;
								case 2081:
									monitor.wait();
									break;
								case 2082:
									monitor.wait();
									break;
								case 2083:
									monitor.wait();
									break;
								case 2084:
									monitor.wait();
									break;
								case 2085:
									monitor.wait();
									break;
								case 2086:
									monitor.wait();
									break;
								case 2087:
									monitor.wait();
									break;
								case 2088:
									monitor.wait();
									break;
								case 2089:
									monitor.wait();
									break;
								case 2090:
									monitor.wait();
									break;
								case 2091:
									monitor.wait();
									break;
								case 2092:
									monitor.wait();
									break;
								case 2093:
									monitor.wait();
									break;
								case 2094:
									monitor.wait();
									break;
								case 2095:
									monitor.wait();
									break;
								case 2096:
									monitor.wait();
									break;
								case 2097:
									monitor.wait();
									break;
								case 2098:
									monitor.wait();
									break;
								case 2099:
									monitor.wait();
									break;
								case 2100:
									monitor.wait();
									break;
								case 2101:
									monitor.wait();
									break;
								case 2102:
									monitor.wait();
									break;
								case 2103:
									monitor.wait();
									break;
								case 2104:
									monitor.wait();
									break;
								case 2105:
									monitor.wait();
									break;
								case 2106:
									monitor.wait();
									break;
								case 2107:
									monitor.wait();
									break;
								case 2108:
									monitor.wait();
									break;
								case 2109:
									monitor.wait();
									break;
								case 2110:
									monitor.wait();
									break;
								case 2111:
									monitor.wait();
									break;
								case 2112:
									monitor.wait();
									break;
								case 2113:
									monitor.wait();
									break;
								case 2114:
									monitor.wait();
									break;
								case 2115:
									monitor.wait();
									break;
								case 2116:
									monitor.wait();
									break;
								case 2117:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2071;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2118:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2072;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2119:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2074;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2120:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2075;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2121:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2123;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2122:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2078;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2123:
									monitor.wait();
									break;
								case 2124:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2079;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2125:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2080;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2126:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2081;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2127:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2128;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2128:
									monitor.wait();
									break;
								case 2129:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2079;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2130:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2085;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2131:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2080;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2132:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2088;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2133:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2081;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2134:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2100;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2135:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2094;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2136:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2096;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2137:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2108;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2138:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2100;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2139:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2102;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2140:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2104;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2141:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2116;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2142:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2108;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2143:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2110;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2144:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2112;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2145:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2146;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2146:
									monitor.wait();
									break;
								case 2147:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2116;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2148:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2117;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2149:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2118;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2150:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2119;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2151:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2120;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2152:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2155;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2153:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2122;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2154:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2003;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2155:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2123;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2156:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2124;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2157:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2125;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2158:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2126;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2159:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2161;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2160:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2009;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2161:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2128;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2162:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2124;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2163:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2130;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2164:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2125;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2165:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2132;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2166:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2126;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2167:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2138;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2168:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2135;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2169:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2136;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2170:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2142;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2171:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2138;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2172:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2139;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2173:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2140;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2174:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2147;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2175:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2142;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2176:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2143;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2177:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2144;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2178:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2180;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2179:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2028;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2180:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2146;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2181:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2147;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2182:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2185;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2183:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2186;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2184:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2187;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2185:
									monitor.wait();
									break;
								case 2186:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2189;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2187:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2190;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2188:
									monitor.wait();
									break;
								case 2189:
									monitor.wait();
									break;
								case 2190:
									monitor.wait();
									break;
								case 2191:
									monitor.wait();
									break;
								case 2192:
									monitor.wait();
									break;
								case 2193:
									monitor.wait();
									break;
								case 2194:
									monitor.wait();
									break;
								case 2195:
									monitor.wait();
									break;
								case 2196:
									monitor.wait();
									break;
								case 2197:
									monitor.wait();
									break;
								case 2198:
									monitor.wait();
									break;
								case 2199:
									monitor.wait();
									break;
								case 2200:
									monitor.wait();
									break;
								case 2201:
									monitor.wait();
									break;
								case 2202:
									monitor.wait();
									break;
								case 2203:
									monitor.wait();
									break;
								case 2204:
									monitor.wait();
									break;
								case 2205:
									monitor.wait();
									break;
								case 2206:
									monitor.wait();
									break;
								case 2207:
									monitor.wait();
									break;
								case 2208:
									monitor.wait();
									break;
								case 2209:
									monitor.wait();
									break;
								case 2210:
									monitor.wait();
									break;
								case 2211:
									monitor.wait();
									break;
								case 2212:
									monitor.wait();
									break;
								case 2213:
									monitor.wait();
									break;
								case 2214:
									monitor.wait();
									break;
								case 2215:
									monitor.wait();
									break;
								case 2216:
									monitor.wait();
									break;
								case 2217:
									monitor.wait();
									break;
								case 2218:
									monitor.wait();
									break;
								case 2219:
									monitor.wait();
									break;
								case 2220:
									monitor.wait();
									break;
								case 2221:
									monitor.wait();
									break;
								case 2222:
									monitor.wait();
									break;
								case 2223:
									monitor.wait();
									break;
								case 2224:
									monitor.wait();
									break;
								case 2225:
									monitor.wait();
									break;
								case 2226:
									monitor.wait();
									break;
								case 2227:
									monitor.wait();
									break;
								case 2228:
									monitor.wait();
									break;
								case 2229:
									monitor.wait();
									break;
								case 2230:
									monitor.wait();
									break;
								case 2231:
									monitor.wait();
									break;
								case 2232:
									monitor.wait();
									break;
								case 2233:
									monitor.wait();
									break;
								case 2234:
									monitor.wait();
									break;
								case 2235:
									monitor.wait();
									break;
								case 2236:
									monitor.wait();
									break;
								case 2237:
									monitor.wait();
									break;
								case 2238:
									monitor.wait();
									break;
								case 2239:
									monitor.wait();
									break;
								case 2240:
									monitor.wait();
									break;
								case 2241:
									monitor.wait();
									break;
								case 2242:
									monitor.wait();
									break;
								case 2243:
									monitor.wait();
									break;
								case 2244:
									monitor.wait();
									break;
								case 2245:
									monitor.wait();
									break;
								case 2246:
									monitor.wait();
									break;
								case 2247:
									monitor.wait();
									break;
								case 2248:
									monitor.wait();
									break;
								case 2249:
									monitor.wait();
									break;
								case 2250:
									monitor.wait();
									break;
								case 2251:
									monitor.wait();
									break;
								case 2252:
									monitor.wait();
									break;
								case 2253:
									monitor.wait();
									break;
								case 2254:
									monitor.wait();
									break;
								case 2255:
									monitor.wait();
									break;
								case 2256:
									monitor.wait();
									break;
								case 2257:
									monitor.wait();
									break;
								case 2258:
									monitor.wait();
									break;
								case 2259:
									monitor.wait();
									break;
								case 2260:
									monitor.wait();
									break;
								case 2261:
									monitor.wait();
									break;
								case 2262:
									monitor.wait();
									break;
								case 2263:
									monitor.wait();
									break;
								case 2264:
									monitor.wait();
									break;
								case 2265:
									monitor.wait();
									break;
								case 2266:
									monitor.wait();
									break;
								case 2267:
									monitor.wait();
									break;
								case 2268:
									monitor.wait();
									break;
								case 2269:
									monitor.wait();
									break;
								case 2270:
									monitor.wait();
									break;
								case 2271:
									monitor.wait();
									break;
								case 2272:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2226;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2273:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2227;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2274:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2229;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2275:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2230;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2276:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2278;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2277:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2233;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2278:
									monitor.wait();
									break;
								case 2279:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2234;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2280:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2235;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2281:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2236;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2282:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2283;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2283:
									monitor.wait();
									break;
								case 2284:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2234;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2285:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2240;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2286:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2235;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2287:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2243;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2288:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2236;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2289:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2255;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2290:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2249;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2291:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2251;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2292:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2263;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2293:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2255;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2294:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2257;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2295:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2259;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2296:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2271;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2297:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2263;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2298:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2265;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2299:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2267;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2300:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2301;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2301:
									monitor.wait();
									break;
								case 2302:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2271;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2303:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2272;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2304:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2273;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2305:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2274;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2306:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2275;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2307:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2309;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2308:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2277;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2309:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2278;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2310:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2279;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2311:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2280;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2312:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2281;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2313:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2314;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2314:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2283;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2315:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2279;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2316:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2285;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2317:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2280;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2318:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2287;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2319:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2281;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2320:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2293;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2321:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2290;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2322:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2291;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2323:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2297;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2324:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2293;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2325:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2294;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2326:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2295;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2327:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2302;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2328:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2297;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2329:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2298;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2330:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2299;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2331:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2332;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2332:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2301;
											queueFromworker_1_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2333:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2302;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2334:
									monitor.wait();
									break;
								case 2335:
									monitor.wait();
									break;
								case 2336:
									monitor.wait();
									break;
								case 2337:
									monitor.wait();
									break;
								case 2338:
									monitor.wait();
									break;
								case 2339:
									monitor.wait();
									break;
								case 2340:
									monitor.wait();
									break;
								case 2341:
									monitor.wait();
									break;
								case 2342:
									monitor.wait();
									break;
								case 2343:
									monitor.wait();
									break;
								case 2344:
									monitor.wait();
									break;
								case 2345:
									monitor.wait();
									break;
								case 2346:
									monitor.wait();
									break;
								case 2347:
									monitor.wait();
									break;
								case 2348:
									monitor.wait();
									break;
								case 2349:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1466;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2350:
									monitor.wait();
									break;
								case 2351:
									monitor.wait();
									break;
								case 2352:
									monitor.wait();
									break;
								case 2353:
									monitor.wait();
									break;
								case 2354:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1471;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2355:
									monitor.wait();
									break;
								case 2356:
									monitor.wait();
									break;
								case 2357:
									monitor.wait();
									break;
								case 2358:
									monitor.wait();
									break;
								case 2359:
									monitor.wait();
									break;
								case 2360:
									monitor.wait();
									break;
								case 2361:
									monitor.wait();
									break;
								case 2362:
									monitor.wait();
									break;
								case 2363:
									monitor.wait();
									break;
								case 2364:
									monitor.wait();
									break;
								case 2365:
									monitor.wait();
									break;
								case 2366:
									monitor.wait();
									break;
								case 2367:
									monitor.wait();
									break;
								case 2368:
									monitor.wait();
									break;
								case 2369:
									monitor.wait();
									break;
								case 2370:
									monitor.wait();
									break;
								case 2371:
									monitor.wait();
									break;
								case 2372:
									monitor.wait();
									break;
								case 2373:
									monitor.wait();
									break;
								case 2374:
									monitor.wait();
									break;
								case 2375:
									monitor.wait();
									break;
								case 2376:
									monitor.wait();
									break;
								case 2377:
									monitor.wait();
									break;
								case 2378:
									monitor.wait();
									break;
								case 2379:
									monitor.wait();
									break;
								case 2380:
									monitor.wait();
									break;
								case 2381:
									monitor.wait();
									break;
								case 2382:
									monitor.wait();
									break;
								case 2383:
									monitor.wait();
									break;
								case 2384:
									monitor.wait();
									break;
								case 2385:
									monitor.wait();
									break;
								case 2386:
									monitor.wait();
									break;
								case 2387:
									monitor.wait();
									break;
								case 2388:
									monitor.wait();
									break;
								case 2389:
									monitor.wait();
									break;
								case 2390:
									monitor.wait();
									break;
								case 2391:
									monitor.wait();
									break;
								case 2392:
									monitor.wait();
									break;
								case 2393:
									monitor.wait();
									break;
								case 2394:
									monitor.wait();
									break;
								case 2395:
									monitor.wait();
									break;
								case 2396:
									monitor.wait();
									break;
								case 2397:
									monitor.wait();
									break;
								case 2398:
									monitor.wait();
									break;
								case 2399:
									monitor.wait();
									break;
								case 2400:
									monitor.wait();
									break;
								case 2401:
									monitor.wait();
									break;
								case 2402:
									monitor.wait();
									break;
								case 2403:
									monitor.wait();
									break;
								case 2404:
									monitor.wait();
									break;
								case 2405:
									monitor.wait();
									break;
								case 2406:
									monitor.wait();
									break;
								case 2407:
									monitor.wait();
									break;
								case 2408:
									monitor.wait();
									break;
								case 2409:
									monitor.wait();
									break;
								case 2410:
									monitor.wait();
									break;
								case 2411:
									monitor.wait();
									break;
								case 2412:
									monitor.wait();
									break;
								case 2413:
									monitor.wait();
									break;
								case 2414:
									monitor.wait();
									break;
								case 2415:
									monitor.wait();
									break;
								case 2416:
									monitor.wait();
									break;
								case 2417:
									monitor.wait();
									break;
								case 2418:
									monitor.wait();
									break;
								case 2419:
									monitor.wait();
									break;
								case 2420:
									monitor.wait();
									break;
								case 2421:
									monitor.wait();
									break;
								case 2422:
									monitor.wait();
									break;
								case 2423:
									monitor.wait();
									break;
								case 2424:
									monitor.wait();
									break;
								case 2425:
									monitor.wait();
									break;
								case 2426:
									monitor.wait();
									break;
								case 2427:
									monitor.wait();
									break;
								case 2428:
									monitor.wait();
									break;
								case 2429:
									monitor.wait();
									break;
								case 2430:
									monitor.wait();
									break;
								case 2431:
									monitor.wait();
									break;
								case 2432:
									monitor.wait();
									break;
								case 2433:
									monitor.wait();
									break;
								case 2434:
									monitor.wait();
									break;
								case 2435:
									monitor.wait();
									break;
								case 2436:
									monitor.wait();
									break;
								case 2437:
									monitor.wait();
									break;
								case 2438:
									monitor.wait();
									break;
								case 2439:
									monitor.wait();
									break;
								case 2440:
									monitor.wait();
									break;
								case 2441:
									monitor.wait();
									break;
								case 2442:
									monitor.wait();
									break;
								case 2443:
									monitor.wait();
									break;
								case 2444:
									monitor.wait();
									break;
								case 2445:
									monitor.wait();
									break;
								case 2446:
									monitor.wait();
									break;
								case 2447:
									monitor.wait();
									break;
								case 2448:
									monitor.wait();
									break;
								case 2449:
									monitor.wait();
									break;
								case 2450:
									monitor.wait();
									break;
								case 2451:
									monitor.wait();
									break;
								case 2452:
									monitor.wait();
									break;
								case 2453:
									monitor.wait();
									break;
								case 2454:
									monitor.wait();
									break;
								case 2455:
									monitor.wait();
									break;
								case 2456:
									monitor.wait();
									break;
								case 2457:
									monitor.wait();
									break;
								case 2458:
									monitor.wait();
									break;
								case 2459:
									monitor.wait();
									break;
								case 2460:
									monitor.wait();
									break;
								case 2461:
									monitor.wait();
									break;
								case 2462:
									monitor.wait();
									break;
								case 2463:
									monitor.wait();
									break;
								case 2464:
									monitor.wait();
									break;
								case 2465:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2155;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2466:
									monitor.wait();
									break;
								case 2467:
									monitor.wait();
									break;
								case 2468:
									monitor.wait();
									break;
								case 2469:
									monitor.wait();
									break;
								case 2470:
									monitor.wait();
									break;
								case 2471:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2161;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2472:
									monitor.wait();
									break;
								case 2473:
									monitor.wait();
									break;
								case 2474:
									monitor.wait();
									break;
								case 2475:
									monitor.wait();
									break;
								case 2476:
									monitor.wait();
									break;
								case 2477:
									monitor.wait();
									break;
								case 2478:
									monitor.wait();
									break;
								case 2479:
									monitor.wait();
									break;
								case 2480:
									monitor.wait();
									break;
								case 2481:
									monitor.wait();
									break;
								case 2482:
									monitor.wait();
									break;
								case 2483:
									monitor.wait();
									break;
								case 2484:
									monitor.wait();
									break;
								case 2485:
									monitor.wait();
									break;
								case 2486:
									monitor.wait();
									break;
								case 2487:
									monitor.wait();
									break;
								case 2488:
									monitor.wait();
									break;
								case 2489:
									monitor.wait();
									break;
								case 2490:
									monitor.wait();
									break;
								case 2491:
									monitor.wait();
									break;
								case 2492:
									monitor.wait();
									break;
								case 2493:
									monitor.wait();
									break;
								case 2494:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2309;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2495:
									monitor.wait();
									break;
								case 2496:
									monitor.wait();
									break;
								case 2497:
									monitor.wait();
									break;
								case 2498:
									monitor.wait();
									break;
								case 2499:
									monitor.wait();
									break;
								case 2500:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2314;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2501:
									monitor.wait();
									break;
								case 2502:
									monitor.wait();
									break;
								case 2503:
									monitor.wait();
									break;
								case 2504:
									monitor.wait();
									break;
								case 2505:
									monitor.wait();
									break;
								case 2506:
									monitor.wait();
									break;
								case 2507:
									monitor.wait();
									break;
								case 2508:
									monitor.wait();
									break;
								case 2509:
									monitor.wait();
									break;
								case 2510:
									monitor.wait();
									break;
								case 2511:
									monitor.wait();
									break;
								case 2512:
									monitor.wait();
									break;
								case 2513:
									monitor.wait();
									break;
								case 2514:
									monitor.wait();
									break;
								case 2515:
									monitor.wait();
									break;
								case 2516:
									monitor.wait();
									break;
								case 2517:
									monitor.wait();
									break;
								case 2518:
									monitor.wait();
									break;
								case 2519:
									monitor.wait();
									break;
								case 2520:
									monitor.wait();
									break;
								case 2521:
									monitor.wait();
									break;
								case 2522:
									monitor.wait();
									break;
								case 2523:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 1505;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2524:
									monitor.wait();
									break;
								case 2525:
									monitor.wait();
									break;
								case 2526:
									monitor.wait();
									break;
								case 2527:
									monitor.wait();
									break;
								case 2528:
									monitor.wait();
									break;
								case 2529:
									monitor.wait();
									break;
								case 2530:
									monitor.wait();
									break;
								case 2531:
									monitor.wait();
									break;
								case 2532:
									monitor.wait();
									break;
								case 2533:
									monitor.wait();
									break;
								case 2534:
									monitor.wait();
									break;
								case 2535:
									monitor.wait();
									break;
								case 2536:
									monitor.wait();
									break;
								case 2537:
									monitor.wait();
									break;
								case 2538:
									monitor.wait();
									break;
								case 2539:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2180;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2540:
									monitor.wait();
									break;
								case 2541:
									monitor.wait();
									break;
								case 2542:
									monitor.wait();
									break;
								case 2543:
									monitor.wait();
									break;
								case 2544:
									monitor.wait();
									break;
								case 2545:
									if (queueFrommasterToworker_1_.peek() != null ) {
										monitor.notifyAll();
										state = 2332;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_1_.take());
									}
									monitor.wait();
									break;
								case 2546:
									monitor.wait();
									break;
								default: throw new Exception("State number out of bounds");
							}
						}
					}
					
				}
			};
			case "worker_2_": return new IEnvironment() {
				
				@Override
				public String getName(){
					return environmentName;
				}
				
				@Override
				public <Any, AnyInput> Optional<Any> exchange(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					synchronized (monitor){
						while (true){
							switch (state){
								case 0:
									monitor.wait();
									break;
								case 1:
									monitor.wait();
									break;
								case 2:
									monitor.wait();
									break;
								case 3:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2334;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 4:
									monitor.wait();
									break;
								case 5:
									monitor.wait();
									break;
								case 6:
									monitor.wait();
									break;
								case 7:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2487;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 8:
									monitor.wait();
									break;
								case 9:
									monitor.wait();
									break;
								case 10:
									monitor.wait();
									break;
								case 11:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2336;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 12:
									monitor.wait();
									break;
								case 13:
									monitor.wait();
									break;
								case 14:
									monitor.wait();
									break;
								case 15:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2338;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 16:
									monitor.wait();
									break;
								case 17:
									monitor.wait();
									break;
								case 18:
									monitor.wait();
									break;
								case 19:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2341;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 20:
									monitor.wait();
									break;
								case 21:
									monitor.wait();
									break;
								case 22:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2343;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 23:
									monitor.wait();
									break;
								case 24:
									monitor.wait();
									break;
								case 25:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1380;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 26:
									monitor.wait();
									break;
								case 27:
									monitor.wait();
									break;
								case 28:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1382;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 29:
									monitor.wait();
									break;
								case 30:
									monitor.wait();
									break;
								case 31:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1385;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 32:
									monitor.wait();
									break;
								case 33:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 35;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 34:
									monitor.wait();
									break;
								case 35:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 37;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 36:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 38;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 37:
									monitor.wait();
									break;
								case 38:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 40;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 39:
									monitor.wait();
									break;
								case 40:
									monitor.wait();
									break;
								case 41:
									monitor.wait();
									break;
								case 42:
									monitor.wait();
									break;
								case 43:
									monitor.wait();
									break;
								case 44:
									monitor.wait();
									break;
								case 45:
									monitor.wait();
									break;
								case 46:
									monitor.wait();
									break;
								case 47:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1333;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 48:
									monitor.wait();
									break;
								case 49:
									monitor.wait();
									break;
								case 50:
									monitor.wait();
									break;
								case 51:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1147;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 52:
									monitor.wait();
									break;
								case 53:
									monitor.wait();
									break;
								case 54:
									monitor.wait();
									break;
								case 55:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 941;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 56:
									monitor.wait();
									break;
								case 57:
									monitor.wait();
									break;
								case 58:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 686;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 59:
									monitor.wait();
									break;
								case 60:
									monitor.wait();
									break;
								case 61:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 655;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 62:
									monitor.wait();
									break;
								case 63:
									monitor.wait();
									break;
								case 64:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 624;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 65:
									monitor.wait();
									break;
								case 66:
									monitor.wait();
									break;
								case 67:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 578;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 68:
									monitor.wait();
									break;
								case 69:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 71;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 70:
									monitor.wait();
									break;
								case 71:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 73;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 72:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 74;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 73:
									monitor.wait();
									break;
								case 74:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 76;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 75:
									monitor.wait();
									break;
								case 76:
									monitor.wait();
									break;
								case 77:
									monitor.wait();
									break;
								case 78:
									monitor.wait();
									break;
								case 79:
									monitor.wait();
									break;
								case 80:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 87;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 81:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 94;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 82:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 307;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 83:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 393;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 84:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 479;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 85:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 540;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 86:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 551;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 87:
									monitor.wait();
									break;
								case 88:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 555;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 89:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 100;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 90:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 203;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 91:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 245;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 92:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 285;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 93:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 295;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 94:
									monitor.wait();
									break;
								case 95:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 299;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 96:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 105;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 97:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 164;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 98:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 183;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 99:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 192;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 100:
									monitor.wait();
									break;
								case 101:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 196;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 102:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 109;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 103:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 129;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 104:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 144;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 105:
									monitor.wait();
									break;
								case 106:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 152;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 107:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 112;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 108:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 119;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 109:
									monitor.wait();
									break;
								case 110:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 123;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 111:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 114;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 112:
									monitor.wait();
									break;
								case 113:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 117;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 114:
									monitor.wait();
									break;
								case 115:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 116:
									monitor.wait();
									break;
								case 117:
									monitor.wait();
									break;
								case 118:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 119:
									monitor.wait();
									break;
								case 120:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 121;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 121:
									monitor.wait();
									break;
								case 122:
									monitor.wait();
									break;
								case 123:
									monitor.wait();
									break;
								case 124:
									monitor.wait();
									break;
								case 125:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 117;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 126:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 121;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 127:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 112;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 128:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 132;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 129:
									monitor.wait();
									break;
								case 130:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 138;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 131:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 114;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 132:
									monitor.wait();
									break;
								case 133:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 135;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 134:
									monitor.wait();
									break;
								case 135:
									monitor.wait();
									break;
								case 136:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 137:
									monitor.wait();
									break;
								case 138:
									monitor.wait();
									break;
								case 139:
									monitor.wait();
									break;
								case 140:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 117;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 141:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 135;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 142:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 143:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 119;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 144:
									monitor.wait();
									break;
								case 145:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 147;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 146:
									monitor.wait();
									break;
								case 147:
									monitor.wait();
									break;
								case 148:
									monitor.wait();
									break;
								case 149:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 121;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 150:
									monitor.wait();
									break;
								case 151:
									monitor.wait();
									break;
								case 152:
									monitor.wait();
									break;
								case 153:
									monitor.wait();
									break;
								case 154:
									monitor.wait();
									break;
								case 155:
									monitor.wait();
									break;
								case 156:
									monitor.wait();
									break;
								case 157:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 123;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 158:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 138;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 159:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 147;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 160:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 117;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 161:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 121;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 162:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 167;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 163:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 174;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 164:
									monitor.wait();
									break;
								case 165:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 178;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 166:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 169;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 167:
									monitor.wait();
									break;
								case 168:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 172;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 169:
									monitor.wait();
									break;
								case 170:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 171;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 171:
									monitor.wait();
									break;
								case 172:
									monitor.wait();
									break;
								case 173:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 171;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 174:
									monitor.wait();
									break;
								case 175:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 176;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 176:
									monitor.wait();
									break;
								case 177:
									monitor.wait();
									break;
								case 178:
									monitor.wait();
									break;
								case 179:
									monitor.wait();
									break;
								case 180:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 172;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 181:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 176;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 182:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 185;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 183:
									monitor.wait();
									break;
								case 184:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 190;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 185:
									monitor.wait();
									break;
								case 186:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 187;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 187:
									monitor.wait();
									break;
								case 188:
									monitor.wait();
									break;
								case 189:
									monitor.wait();
									break;
								case 190:
									monitor.wait();
									break;
								case 191:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 187;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 192:
									monitor.wait();
									break;
								case 193:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 194;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 194:
									monitor.wait();
									break;
								case 195:
									monitor.wait();
									break;
								case 196:
									monitor.wait();
									break;
								case 197:
									monitor.wait();
									break;
								case 198:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 190;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 199:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 194;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 200:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 207;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 201:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 226;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 202:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 234;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 203:
									monitor.wait();
									break;
								case 204:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 238;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 205:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 210;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 206:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 217;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 207:
									monitor.wait();
									break;
								case 208:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 221;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 209:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 212;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 210:
									monitor.wait();
									break;
								case 211:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 215;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 212:
									monitor.wait();
									break;
								case 213:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 214;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 214:
									monitor.wait();
									break;
								case 215:
									monitor.wait();
									break;
								case 216:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 214;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 217:
									monitor.wait();
									break;
								case 218:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 219;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 219:
									monitor.wait();
									break;
								case 220:
									monitor.wait();
									break;
								case 221:
									monitor.wait();
									break;
								case 222:
									monitor.wait();
									break;
								case 223:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 215;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 224:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 219;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 225:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 228;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 226:
									monitor.wait();
									break;
								case 227:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 232;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 228:
									monitor.wait();
									break;
								case 229:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 230;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 230:
									monitor.wait();
									break;
								case 231:
									monitor.wait();
									break;
								case 232:
									monitor.wait();
									break;
								case 233:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 230;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 234:
									monitor.wait();
									break;
								case 235:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 236;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 236:
									monitor.wait();
									break;
								case 237:
									monitor.wait();
									break;
								case 238:
									monitor.wait();
									break;
								case 239:
									monitor.wait();
									break;
								case 240:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 232;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 241:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 236;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 242:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 249;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 243:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 268;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 244:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 276;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 245:
									monitor.wait();
									break;
								case 246:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 280;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 247:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 252;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 248:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 259;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 249:
									monitor.wait();
									break;
								case 250:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 263;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 251:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 254;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 252:
									monitor.wait();
									break;
								case 253:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 257;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 254:
									monitor.wait();
									break;
								case 255:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 256;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 256:
									monitor.wait();
									break;
								case 257:
									monitor.wait();
									break;
								case 258:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 256;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 259:
									monitor.wait();
									break;
								case 260:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 261;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 261:
									monitor.wait();
									break;
								case 262:
									monitor.wait();
									break;
								case 263:
									monitor.wait();
									break;
								case 264:
									monitor.wait();
									break;
								case 265:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 257;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 266:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 261;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 267:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 270;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 268:
									monitor.wait();
									break;
								case 269:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 274;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 270:
									monitor.wait();
									break;
								case 271:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 272;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 272:
									monitor.wait();
									break;
								case 273:
									monitor.wait();
									break;
								case 274:
									monitor.wait();
									break;
								case 275:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 272;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 276:
									monitor.wait();
									break;
								case 277:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 278;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 278:
									monitor.wait();
									break;
								case 279:
									monitor.wait();
									break;
								case 280:
									monitor.wait();
									break;
								case 281:
									monitor.wait();
									break;
								case 282:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 274;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 283:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 278;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 284:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 287;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 285:
									monitor.wait();
									break;
								case 286:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 293;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 287:
									monitor.wait();
									break;
								case 288:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 289;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 289:
									monitor.wait();
									break;
								case 290:
									monitor.wait();
									break;
								case 291:
									monitor.wait();
									break;
								case 292:
									monitor.wait();
									break;
								case 293:
									monitor.wait();
									break;
								case 294:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 289;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 295:
									monitor.wait();
									break;
								case 296:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 297;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 297:
									monitor.wait();
									break;
								case 298:
									monitor.wait();
									break;
								case 299:
									monitor.wait();
									break;
								case 300:
									monitor.wait();
									break;
								case 301:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 293;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 302:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 297;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 303:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 312;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 304:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 353;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 305:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 372;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 306:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 381;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 307:
									monitor.wait();
									break;
								case 308:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 385;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 309:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 316;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 310:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 335;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 311:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 343;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 312:
									monitor.wait();
									break;
								case 313:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 347;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 314:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 319;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 315:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 326;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 316:
									monitor.wait();
									break;
								case 317:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 330;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 318:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 321;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 319:
									monitor.wait();
									break;
								case 320:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 324;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 321:
									monitor.wait();
									break;
								case 322:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 323;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 323:
									monitor.wait();
									break;
								case 324:
									monitor.wait();
									break;
								case 325:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 323;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 326:
									monitor.wait();
									break;
								case 327:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 328;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 328:
									monitor.wait();
									break;
								case 329:
									monitor.wait();
									break;
								case 330:
									monitor.wait();
									break;
								case 331:
									monitor.wait();
									break;
								case 332:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 324;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 333:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 328;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 334:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 337;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 335:
									monitor.wait();
									break;
								case 336:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 341;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 337:
									monitor.wait();
									break;
								case 338:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 339;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 339:
									monitor.wait();
									break;
								case 340:
									monitor.wait();
									break;
								case 341:
									monitor.wait();
									break;
								case 342:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 339;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 343:
									monitor.wait();
									break;
								case 344:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 345;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 345:
									monitor.wait();
									break;
								case 346:
									monitor.wait();
									break;
								case 347:
									monitor.wait();
									break;
								case 348:
									monitor.wait();
									break;
								case 349:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 341;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 350:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 345;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 351:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 356;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 352:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 363;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 353:
									monitor.wait();
									break;
								case 354:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 367;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 355:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 358;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 356:
									monitor.wait();
									break;
								case 357:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 361;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 358:
									monitor.wait();
									break;
								case 359:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 360;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 360:
									monitor.wait();
									break;
								case 361:
									monitor.wait();
									break;
								case 362:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 360;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 363:
									monitor.wait();
									break;
								case 364:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 365;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 365:
									monitor.wait();
									break;
								case 366:
									monitor.wait();
									break;
								case 367:
									monitor.wait();
									break;
								case 368:
									monitor.wait();
									break;
								case 369:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 361;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 370:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 365;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 371:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 374;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 372:
									monitor.wait();
									break;
								case 373:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 379;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 374:
									monitor.wait();
									break;
								case 375:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 376;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 376:
									monitor.wait();
									break;
								case 377:
									monitor.wait();
									break;
								case 378:
									monitor.wait();
									break;
								case 379:
									monitor.wait();
									break;
								case 380:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 376;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 381:
									monitor.wait();
									break;
								case 382:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 383;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 383:
									monitor.wait();
									break;
								case 384:
									monitor.wait();
									break;
								case 385:
									monitor.wait();
									break;
								case 386:
									monitor.wait();
									break;
								case 387:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 379;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 388:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 383;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 389:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 397;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 390:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 418;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 391:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 458;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 392:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 467;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 393:
									monitor.wait();
									break;
								case 394:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 471;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 395:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 400;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 396:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 407;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 397:
									monitor.wait();
									break;
								case 398:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 411;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 399:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 402;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 400:
									monitor.wait();
									break;
								case 401:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 405;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 402:
									monitor.wait();
									break;
								case 403:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 404;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 404:
									monitor.wait();
									break;
								case 405:
									monitor.wait();
									break;
								case 406:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 404;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 407:
									monitor.wait();
									break;
								case 408:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 409;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 409:
									monitor.wait();
									break;
								case 410:
									monitor.wait();
									break;
								case 411:
									monitor.wait();
									break;
								case 412:
									monitor.wait();
									break;
								case 413:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 405;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 414:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 409;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 415:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 422;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 416:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 441;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 417:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 449;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 418:
									monitor.wait();
									break;
								case 419:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 453;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 420:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 425;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 421:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 432;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 422:
									monitor.wait();
									break;
								case 423:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 436;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 424:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 427;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 425:
									monitor.wait();
									break;
								case 426:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 430;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 427:
									monitor.wait();
									break;
								case 428:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 429;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 429:
									monitor.wait();
									break;
								case 430:
									monitor.wait();
									break;
								case 431:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 429;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 432:
									monitor.wait();
									break;
								case 433:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 434;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 434:
									monitor.wait();
									break;
								case 435:
									monitor.wait();
									break;
								case 436:
									monitor.wait();
									break;
								case 437:
									monitor.wait();
									break;
								case 438:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 430;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 439:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 434;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 440:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 443;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 441:
									monitor.wait();
									break;
								case 442:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 447;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 443:
									monitor.wait();
									break;
								case 444:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 445;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 445:
									monitor.wait();
									break;
								case 446:
									monitor.wait();
									break;
								case 447:
									monitor.wait();
									break;
								case 448:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 445;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 449:
									monitor.wait();
									break;
								case 450:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 451;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 451:
									monitor.wait();
									break;
								case 452:
									monitor.wait();
									break;
								case 453:
									monitor.wait();
									break;
								case 454:
									monitor.wait();
									break;
								case 455:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 447;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 456:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 451;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 457:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 460;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 458:
									monitor.wait();
									break;
								case 459:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 465;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 460:
									monitor.wait();
									break;
								case 461:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 462;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 462:
									monitor.wait();
									break;
								case 463:
									monitor.wait();
									break;
								case 464:
									monitor.wait();
									break;
								case 465:
									monitor.wait();
									break;
								case 466:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 462;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 467:
									monitor.wait();
									break;
								case 468:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 469;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 469:
									monitor.wait();
									break;
								case 470:
									monitor.wait();
									break;
								case 471:
									monitor.wait();
									break;
								case 472:
									monitor.wait();
									break;
								case 473:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 465;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 474:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 469;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 475:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 483;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 476:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 503;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 477:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 522;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 478:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 531;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 479:
									monitor.wait();
									break;
								case 480:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 535;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 481:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 486;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 482:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 493;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 483:
									monitor.wait();
									break;
								case 484:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 497;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 485:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 488;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 486:
									monitor.wait();
									break;
								case 487:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 491;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 488:
									monitor.wait();
									break;
								case 489:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 490;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 490:
									monitor.wait();
									break;
								case 491:
									monitor.wait();
									break;
								case 492:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 490;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 493:
									monitor.wait();
									break;
								case 494:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 495;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 495:
									monitor.wait();
									break;
								case 496:
									monitor.wait();
									break;
								case 497:
									monitor.wait();
									break;
								case 498:
									monitor.wait();
									break;
								case 499:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 491;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 500:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 495;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 501:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 506;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 502:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 513;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 503:
									monitor.wait();
									break;
								case 504:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 517;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 505:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 508;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 506:
									monitor.wait();
									break;
								case 507:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 511;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 508:
									monitor.wait();
									break;
								case 509:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 510;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 510:
									monitor.wait();
									break;
								case 511:
									monitor.wait();
									break;
								case 512:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 510;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 513:
									monitor.wait();
									break;
								case 514:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 515;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 515:
									monitor.wait();
									break;
								case 516:
									monitor.wait();
									break;
								case 517:
									monitor.wait();
									break;
								case 518:
									monitor.wait();
									break;
								case 519:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 511;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 520:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 515;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 521:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 524;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 522:
									monitor.wait();
									break;
								case 523:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 529;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 524:
									monitor.wait();
									break;
								case 525:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 526;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 526:
									monitor.wait();
									break;
								case 527:
									monitor.wait();
									break;
								case 528:
									monitor.wait();
									break;
								case 529:
									monitor.wait();
									break;
								case 530:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 526;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 531:
									monitor.wait();
									break;
								case 532:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 533;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 533:
									monitor.wait();
									break;
								case 534:
									monitor.wait();
									break;
								case 535:
									monitor.wait();
									break;
								case 536:
									monitor.wait();
									break;
								case 537:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 529;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 538:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 533;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 539:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 542;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 540:
									monitor.wait();
									break;
								case 541:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 549;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 542:
									monitor.wait();
									break;
								case 543:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 544;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 544:
									monitor.wait();
									break;
								case 545:
									monitor.wait();
									break;
								case 546:
									monitor.wait();
									break;
								case 547:
									monitor.wait();
									break;
								case 548:
									monitor.wait();
									break;
								case 549:
									monitor.wait();
									break;
								case 550:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 544;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 551:
									monitor.wait();
									break;
								case 552:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 553;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 553:
									monitor.wait();
									break;
								case 554:
									monitor.wait();
									break;
								case 555:
									monitor.wait();
									break;
								case 556:
									monitor.wait();
									break;
								case 557:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 549;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 558:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 553;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 559:
									monitor.wait();
									break;
								case 560:
									monitor.wait();
									break;
								case 561:
									monitor.wait();
									break;
								case 562:
									monitor.wait();
									break;
								case 563:
									monitor.wait();
									break;
								case 564:
									monitor.wait();
									break;
								case 565:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 560;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 566:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 562;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 567:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 568;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 568:
									monitor.wait();
									break;
								case 569:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 565;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 570:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 566;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 571:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 572;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 572:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 568;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 573:
									monitor.wait();
									break;
								case 574:
									monitor.wait();
									break;
								case 575:
									monitor.wait();
									break;
								case 576:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 572;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 577:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 71;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 578:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 581;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 579:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 582;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 580:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 73;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 581:
									monitor.wait();
									break;
								case 582:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 585;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 583:
									monitor.wait();
									break;
								case 584:
									monitor.wait();
									break;
								case 585:
									monitor.wait();
									break;
								case 586:
									monitor.wait();
									break;
								case 587:
									monitor.wait();
									break;
								case 588:
									monitor.wait();
									break;
								case 589:
									monitor.wait();
									break;
								case 590:
									monitor.wait();
									break;
								case 591:
									monitor.wait();
									break;
								case 592:
									monitor.wait();
									break;
								case 593:
									monitor.wait();
									break;
								case 594:
									monitor.wait();
									break;
								case 595:
									monitor.wait();
									break;
								case 596:
									monitor.wait();
									break;
								case 597:
									monitor.wait();
									break;
								case 598:
									monitor.wait();
									break;
								case 599:
									monitor.wait();
									break;
								case 600:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 76;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 601:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 592;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 602:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 560;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 603:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 595;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 604:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 562;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 605:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 607;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 606:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 568;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 607:
									monitor.wait();
									break;
								case 608:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 74;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 609:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 601;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 610:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 565;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 611:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 603;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 612:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 566;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 613:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 615;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 614:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 572;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 615:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 607;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 616:
									monitor.wait();
									break;
								case 617:
									monitor.wait();
									break;
								case 618:
									monitor.wait();
									break;
								case 619:
									monitor.wait();
									break;
								case 620:
									monitor.wait();
									break;
								case 621:
									monitor.wait();
									break;
								case 622:
									monitor.wait();
									break;
								case 623:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 615;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 624:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 626;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 625:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 627;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 626:
									monitor.wait();
									break;
								case 627:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 629;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 628:
									monitor.wait();
									break;
								case 629:
									monitor.wait();
									break;
								case 630:
									monitor.wait();
									break;
								case 631:
									monitor.wait();
									break;
								case 632:
									monitor.wait();
									break;
								case 633:
									monitor.wait();
									break;
								case 634:
									monitor.wait();
									break;
								case 635:
									monitor.wait();
									break;
								case 636:
									monitor.wait();
									break;
								case 637:
									monitor.wait();
									break;
								case 638:
									monitor.wait();
									break;
								case 639:
									monitor.wait();
									break;
								case 640:
									monitor.wait();
									break;
								case 641:
									monitor.wait();
									break;
								case 642:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 637;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 643:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 639;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 644:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 645;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 645:
									monitor.wait();
									break;
								case 646:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 642;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 647:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 643;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 648:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 649;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 649:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 645;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 650:
									monitor.wait();
									break;
								case 651:
									monitor.wait();
									break;
								case 652:
									monitor.wait();
									break;
								case 653:
									monitor.wait();
									break;
								case 654:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 649;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 655:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 657;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 656:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 658;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 657:
									monitor.wait();
									break;
								case 658:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 660;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 659:
									monitor.wait();
									break;
								case 660:
									monitor.wait();
									break;
								case 661:
									monitor.wait();
									break;
								case 662:
									monitor.wait();
									break;
								case 663:
									monitor.wait();
									break;
								case 664:
									monitor.wait();
									break;
								case 665:
									monitor.wait();
									break;
								case 666:
									monitor.wait();
									break;
								case 667:
									monitor.wait();
									break;
								case 668:
									monitor.wait();
									break;
								case 669:
									monitor.wait();
									break;
								case 670:
									monitor.wait();
									break;
								case 671:
									monitor.wait();
									break;
								case 672:
									monitor.wait();
									break;
								case 673:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 668;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 674:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 670;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 675:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 676;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 676:
									monitor.wait();
									break;
								case 677:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 673;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 678:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 674;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 679:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 680;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 680:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 676;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 681:
									monitor.wait();
									break;
								case 682:
									monitor.wait();
									break;
								case 683:
									monitor.wait();
									break;
								case 684:
									monitor.wait();
									break;
								case 685:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 680;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 686:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 688;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 687:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 689;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 688:
									monitor.wait();
									break;
								case 689:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 691;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 690:
									monitor.wait();
									break;
								case 691:
									monitor.wait();
									break;
								case 692:
									monitor.wait();
									break;
								case 693:
									monitor.wait();
									break;
								case 694:
									monitor.wait();
									break;
								case 695:
									monitor.wait();
									break;
								case 696:
									monitor.wait();
									break;
								case 697:
									monitor.wait();
									break;
								case 698:
									monitor.wait();
									break;
								case 699:
									monitor.wait();
									break;
								case 700:
									monitor.wait();
									break;
								case 701:
									monitor.wait();
									break;
								case 702:
									monitor.wait();
									break;
								case 703:
									monitor.wait();
									break;
								case 704:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 699;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 705:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 701;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 706:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 707;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 707:
									monitor.wait();
									break;
								case 708:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 704;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 709:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 705;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 710:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 711;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 711:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 707;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 712:
									monitor.wait();
									break;
								case 713:
									monitor.wait();
									break;
								case 714:
									monitor.wait();
									break;
								case 715:
									monitor.wait();
									break;
								case 716:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 711;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 717:
									monitor.wait();
									break;
								case 718:
									monitor.wait();
									break;
								case 719:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 886;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 720:
									monitor.wait();
									break;
								case 721:
									monitor.wait();
									break;
								case 722:
									monitor.wait();
									break;
								case 723:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 831;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 724:
									monitor.wait();
									break;
								case 725:
									monitor.wait();
									break;
								case 726:
									monitor.wait();
									break;
								case 727:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 761;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 728:
									monitor.wait();
									break;
								case 729:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 731;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 730:
									monitor.wait();
									break;
								case 731:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 733;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 732:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 734;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 733:
									monitor.wait();
									break;
								case 734:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 736;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 735:
									monitor.wait();
									break;
								case 736:
									monitor.wait();
									break;
								case 737:
									monitor.wait();
									break;
								case 738:
									monitor.wait();
									break;
								case 739:
									monitor.wait();
									break;
								case 740:
									monitor.wait();
									break;
								case 741:
									monitor.wait();
									break;
								case 742:
									monitor.wait();
									break;
								case 743:
									monitor.wait();
									break;
								case 744:
									monitor.wait();
									break;
								case 745:
									monitor.wait();
									break;
								case 746:
									monitor.wait();
									break;
								case 747:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 742;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 748:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 744;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 749:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 750;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 750:
									monitor.wait();
									break;
								case 751:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 747;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 752:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 748;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 753:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 754;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 754:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 750;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 755:
									monitor.wait();
									break;
								case 756:
									monitor.wait();
									break;
								case 757:
									monitor.wait();
									break;
								case 758:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 754;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 759:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 578;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 760:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 731;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 761:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 765;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 762:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 766;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 763:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 581;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 764:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 733;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 765:
									monitor.wait();
									break;
								case 766:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 770;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 767:
									monitor.wait();
									break;
								case 768:
									monitor.wait();
									break;
								case 769:
									monitor.wait();
									break;
								case 770:
									monitor.wait();
									break;
								case 771:
									monitor.wait();
									break;
								case 772:
									monitor.wait();
									break;
								case 773:
									monitor.wait();
									break;
								case 774:
									monitor.wait();
									break;
								case 775:
									monitor.wait();
									break;
								case 776:
									monitor.wait();
									break;
								case 777:
									monitor.wait();
									break;
								case 778:
									monitor.wait();
									break;
								case 779:
									monitor.wait();
									break;
								case 780:
									monitor.wait();
									break;
								case 781:
									monitor.wait();
									break;
								case 782:
									monitor.wait();
									break;
								case 783:
									monitor.wait();
									break;
								case 784:
									monitor.wait();
									break;
								case 785:
									monitor.wait();
									break;
								case 786:
									monitor.wait();
									break;
								case 787:
									monitor.wait();
									break;
								case 788:
									monitor.wait();
									break;
								case 789:
									monitor.wait();
									break;
								case 790:
									monitor.wait();
									break;
								case 791:
									monitor.wait();
									break;
								case 792:
									monitor.wait();
									break;
								case 793:
									monitor.wait();
									break;
								case 794:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 585;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 795:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 736;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 796:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 783;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 797:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 592;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 798:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 742;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 799:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 787;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 800:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 595;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 801:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 744;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 802:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 805;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 803:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 607;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 804:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 750;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 805:
									monitor.wait();
									break;
								case 806:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 582;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 807:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 734;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 808:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 796;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 809:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 601;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 810:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 747;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 811:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 799;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 812:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 603;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 813:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 748;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 814:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 817;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 815:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 615;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 816:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 754;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 817:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 805;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 818:
									monitor.wait();
									break;
								case 819:
									monitor.wait();
									break;
								case 820:
									monitor.wait();
									break;
								case 821:
									monitor.wait();
									break;
								case 822:
									monitor.wait();
									break;
								case 823:
									monitor.wait();
									break;
								case 824:
									monitor.wait();
									break;
								case 825:
									monitor.wait();
									break;
								case 826:
									monitor.wait();
									break;
								case 827:
									monitor.wait();
									break;
								case 828:
									monitor.wait();
									break;
								case 829:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 817;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 830:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 624;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 831:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 834;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 832:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 835;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 833:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 626;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 834:
									monitor.wait();
									break;
								case 835:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 838;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 836:
									monitor.wait();
									break;
								case 837:
									monitor.wait();
									break;
								case 838:
									monitor.wait();
									break;
								case 839:
									monitor.wait();
									break;
								case 840:
									monitor.wait();
									break;
								case 841:
									monitor.wait();
									break;
								case 842:
									monitor.wait();
									break;
								case 843:
									monitor.wait();
									break;
								case 844:
									monitor.wait();
									break;
								case 845:
									monitor.wait();
									break;
								case 846:
									monitor.wait();
									break;
								case 847:
									monitor.wait();
									break;
								case 848:
									monitor.wait();
									break;
								case 849:
									monitor.wait();
									break;
								case 850:
									monitor.wait();
									break;
								case 851:
									monitor.wait();
									break;
								case 852:
									monitor.wait();
									break;
								case 853:
									monitor.wait();
									break;
								case 854:
									monitor.wait();
									break;
								case 855:
									monitor.wait();
									break;
								case 856:
									monitor.wait();
									break;
								case 857:
									monitor.wait();
									break;
								case 858:
									monitor.wait();
									break;
								case 859:
									monitor.wait();
									break;
								case 860:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 629;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 861:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 852;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 862:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 637;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 863:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 855;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 864:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 639;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 865:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 867;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 866:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 645;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 867:
									monitor.wait();
									break;
								case 868:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 627;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 869:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 861;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 870:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 642;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 871:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 863;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 872:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 643;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 873:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 875;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 874:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 649;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 875:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 867;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 876:
									monitor.wait();
									break;
								case 877:
									monitor.wait();
									break;
								case 878:
									monitor.wait();
									break;
								case 879:
									monitor.wait();
									break;
								case 880:
									monitor.wait();
									break;
								case 881:
									monitor.wait();
									break;
								case 882:
									monitor.wait();
									break;
								case 883:
									monitor.wait();
									break;
								case 884:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 875;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 885:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 655;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 886:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 889;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 887:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 890;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 888:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 657;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 889:
									monitor.wait();
									break;
								case 890:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 893;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 891:
									monitor.wait();
									break;
								case 892:
									monitor.wait();
									break;
								case 893:
									monitor.wait();
									break;
								case 894:
									monitor.wait();
									break;
								case 895:
									monitor.wait();
									break;
								case 896:
									monitor.wait();
									break;
								case 897:
									monitor.wait();
									break;
								case 898:
									monitor.wait();
									break;
								case 899:
									monitor.wait();
									break;
								case 900:
									monitor.wait();
									break;
								case 901:
									monitor.wait();
									break;
								case 902:
									monitor.wait();
									break;
								case 903:
									monitor.wait();
									break;
								case 904:
									monitor.wait();
									break;
								case 905:
									monitor.wait();
									break;
								case 906:
									monitor.wait();
									break;
								case 907:
									monitor.wait();
									break;
								case 908:
									monitor.wait();
									break;
								case 909:
									monitor.wait();
									break;
								case 910:
									monitor.wait();
									break;
								case 911:
									monitor.wait();
									break;
								case 912:
									monitor.wait();
									break;
								case 913:
									monitor.wait();
									break;
								case 914:
									monitor.wait();
									break;
								case 915:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 660;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 916:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 907;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 917:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 668;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 918:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 910;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 919:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 670;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 920:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 922;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 921:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 676;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 922:
									monitor.wait();
									break;
								case 923:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 658;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 924:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 916;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 925:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 673;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 926:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 918;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 927:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 674;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 928:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 930;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 929:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 680;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 930:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 922;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 931:
									monitor.wait();
									break;
								case 932:
									monitor.wait();
									break;
								case 933:
									monitor.wait();
									break;
								case 934:
									monitor.wait();
									break;
								case 935:
									monitor.wait();
									break;
								case 936:
									monitor.wait();
									break;
								case 937:
									monitor.wait();
									break;
								case 938:
									monitor.wait();
									break;
								case 939:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 930;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 940:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 686;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 941:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 944;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 942:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 945;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 943:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 688;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 944:
									monitor.wait();
									break;
								case 945:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 948;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 946:
									monitor.wait();
									break;
								case 947:
									monitor.wait();
									break;
								case 948:
									monitor.wait();
									break;
								case 949:
									monitor.wait();
									break;
								case 950:
									monitor.wait();
									break;
								case 951:
									monitor.wait();
									break;
								case 952:
									monitor.wait();
									break;
								case 953:
									monitor.wait();
									break;
								case 954:
									monitor.wait();
									break;
								case 955:
									monitor.wait();
									break;
								case 956:
									monitor.wait();
									break;
								case 957:
									monitor.wait();
									break;
								case 958:
									monitor.wait();
									break;
								case 959:
									monitor.wait();
									break;
								case 960:
									monitor.wait();
									break;
								case 961:
									monitor.wait();
									break;
								case 962:
									monitor.wait();
									break;
								case 963:
									monitor.wait();
									break;
								case 964:
									monitor.wait();
									break;
								case 965:
									monitor.wait();
									break;
								case 966:
									monitor.wait();
									break;
								case 967:
									monitor.wait();
									break;
								case 968:
									monitor.wait();
									break;
								case 969:
									monitor.wait();
									break;
								case 970:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 691;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 971:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 962;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 972:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 699;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 973:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 965;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 974:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 701;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 975:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 977;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 976:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 707;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 977:
									monitor.wait();
									break;
								case 978:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 689;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 979:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 971;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 980:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 704;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 981:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 973;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 982:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 705;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 983:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 985;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 984:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 711;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 985:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 977;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 986:
									monitor.wait();
									break;
								case 987:
									monitor.wait();
									break;
								case 988:
									monitor.wait();
									break;
								case 989:
									monitor.wait();
									break;
								case 990:
									monitor.wait();
									break;
								case 991:
									monitor.wait();
									break;
								case 992:
									monitor.wait();
									break;
								case 993:
									monitor.wait();
									break;
								case 994:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 985;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 995:
									monitor.wait();
									break;
								case 996:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1116;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 997:
									monitor.wait();
									break;
								case 998:
									monitor.wait();
									break;
								case 999:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1085;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1000:
									monitor.wait();
									break;
								case 1001:
									monitor.wait();
									break;
								case 1002:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1039;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1003:
									monitor.wait();
									break;
								case 1004:
									monitor.wait();
									break;
								case 1005:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1007;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1006:
									monitor.wait();
									break;
								case 1007:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1009;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1008:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1010;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1009:
									monitor.wait();
									break;
								case 1010:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1012;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1011:
									monitor.wait();
									break;
								case 1012:
									monitor.wait();
									break;
								case 1013:
									monitor.wait();
									break;
								case 1014:
									monitor.wait();
									break;
								case 1015:
									monitor.wait();
									break;
								case 1016:
									monitor.wait();
									break;
								case 1017:
									monitor.wait();
									break;
								case 1018:
									monitor.wait();
									break;
								case 1019:
									monitor.wait();
									break;
								case 1020:
									monitor.wait();
									break;
								case 1021:
									monitor.wait();
									break;
								case 1022:
									monitor.wait();
									break;
								case 1023:
									monitor.wait();
									break;
								case 1024:
									monitor.wait();
									break;
								case 1025:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1020;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1026:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1022;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1027:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1028;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1028:
									monitor.wait();
									break;
								case 1029:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1025;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1030:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1026;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1031:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1032;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1032:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1028;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1033:
									monitor.wait();
									break;
								case 1034:
									monitor.wait();
									break;
								case 1035:
									monitor.wait();
									break;
								case 1036:
									monitor.wait();
									break;
								case 1037:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1032;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1038:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1007;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1039:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1042;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1040:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1043;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1041:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1009;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1042:
									monitor.wait();
									break;
								case 1043:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1046;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1044:
									monitor.wait();
									break;
								case 1045:
									monitor.wait();
									break;
								case 1046:
									monitor.wait();
									break;
								case 1047:
									monitor.wait();
									break;
								case 1048:
									monitor.wait();
									break;
								case 1049:
									monitor.wait();
									break;
								case 1050:
									monitor.wait();
									break;
								case 1051:
									monitor.wait();
									break;
								case 1052:
									monitor.wait();
									break;
								case 1053:
									monitor.wait();
									break;
								case 1054:
									monitor.wait();
									break;
								case 1055:
									monitor.wait();
									break;
								case 1056:
									monitor.wait();
									break;
								case 1057:
									monitor.wait();
									break;
								case 1058:
									monitor.wait();
									break;
								case 1059:
									monitor.wait();
									break;
								case 1060:
									monitor.wait();
									break;
								case 1061:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1012;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1062:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1053;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1063:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1020;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1064:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1056;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1065:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1022;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1066:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1068;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1067:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1028;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1068:
									monitor.wait();
									break;
								case 1069:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1010;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1070:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1062;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1071:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1025;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1072:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1064;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1073:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1026;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1074:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1076;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1075:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1032;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1076:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1068;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1077:
									monitor.wait();
									break;
								case 1078:
									monitor.wait();
									break;
								case 1079:
									monitor.wait();
									break;
								case 1080:
									monitor.wait();
									break;
								case 1081:
									monitor.wait();
									break;
								case 1082:
									monitor.wait();
									break;
								case 1083:
									monitor.wait();
									break;
								case 1084:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1076;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1085:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1087;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1086:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1088;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1087:
									monitor.wait();
									break;
								case 1088:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1090;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1089:
									monitor.wait();
									break;
								case 1090:
									monitor.wait();
									break;
								case 1091:
									monitor.wait();
									break;
								case 1092:
									monitor.wait();
									break;
								case 1093:
									monitor.wait();
									break;
								case 1094:
									monitor.wait();
									break;
								case 1095:
									monitor.wait();
									break;
								case 1096:
									monitor.wait();
									break;
								case 1097:
									monitor.wait();
									break;
								case 1098:
									monitor.wait();
									break;
								case 1099:
									monitor.wait();
									break;
								case 1100:
									monitor.wait();
									break;
								case 1101:
									monitor.wait();
									break;
								case 1102:
									monitor.wait();
									break;
								case 1103:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1098;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1104:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1100;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1105:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1106;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1106:
									monitor.wait();
									break;
								case 1107:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1103;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1108:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1104;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1109:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1110;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1110:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1106;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1111:
									monitor.wait();
									break;
								case 1112:
									monitor.wait();
									break;
								case 1113:
									monitor.wait();
									break;
								case 1114:
									monitor.wait();
									break;
								case 1115:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1110;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1116:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1118;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1117:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1119;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1118:
									monitor.wait();
									break;
								case 1119:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1121;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1120:
									monitor.wait();
									break;
								case 1121:
									monitor.wait();
									break;
								case 1122:
									monitor.wait();
									break;
								case 1123:
									monitor.wait();
									break;
								case 1124:
									monitor.wait();
									break;
								case 1125:
									monitor.wait();
									break;
								case 1126:
									monitor.wait();
									break;
								case 1127:
									monitor.wait();
									break;
								case 1128:
									monitor.wait();
									break;
								case 1129:
									monitor.wait();
									break;
								case 1130:
									monitor.wait();
									break;
								case 1131:
									monitor.wait();
									break;
								case 1132:
									monitor.wait();
									break;
								case 1133:
									monitor.wait();
									break;
								case 1134:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1129;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1135:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1131;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1136:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1137;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1137:
									monitor.wait();
									break;
								case 1138:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1134;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1139:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1135;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1140:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1141;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1141:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1137;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1142:
									monitor.wait();
									break;
								case 1143:
									monitor.wait();
									break;
								case 1144:
									monitor.wait();
									break;
								case 1145:
									monitor.wait();
									break;
								case 1146:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1141;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1147:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1149;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1148:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1150;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1149:
									monitor.wait();
									break;
								case 1150:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1152;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1151:
									monitor.wait();
									break;
								case 1152:
									monitor.wait();
									break;
								case 1153:
									monitor.wait();
									break;
								case 1154:
									monitor.wait();
									break;
								case 1155:
									monitor.wait();
									break;
								case 1156:
									monitor.wait();
									break;
								case 1157:
									monitor.wait();
									break;
								case 1158:
									monitor.wait();
									break;
								case 1159:
									monitor.wait();
									break;
								case 1160:
									monitor.wait();
									break;
								case 1161:
									monitor.wait();
									break;
								case 1162:
									monitor.wait();
									break;
								case 1163:
									monitor.wait();
									break;
								case 1164:
									monitor.wait();
									break;
								case 1165:
									monitor.wait();
									break;
								case 1166:
									monitor.wait();
									break;
								case 1167:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1162;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1168:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1164;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1169:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1170;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1170:
									monitor.wait();
									break;
								case 1171:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1167;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1172:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1168;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1173:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1174;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1174:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1170;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1175:
									monitor.wait();
									break;
								case 1176:
									monitor.wait();
									break;
								case 1177:
									monitor.wait();
									break;
								case 1178:
									monitor.wait();
									break;
								case 1179:
									monitor.wait();
									break;
								case 1180:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1174;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1181:
									monitor.wait();
									break;
								case 1182:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1302;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1183:
									monitor.wait();
									break;
								case 1184:
									monitor.wait();
									break;
								case 1185:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1271;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1186:
									monitor.wait();
									break;
								case 1187:
									monitor.wait();
									break;
								case 1188:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1225;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1189:
									monitor.wait();
									break;
								case 1190:
									monitor.wait();
									break;
								case 1191:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1193;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1192:
									monitor.wait();
									break;
								case 1193:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1195;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1194:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1196;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1195:
									monitor.wait();
									break;
								case 1196:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1198;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1197:
									monitor.wait();
									break;
								case 1198:
									monitor.wait();
									break;
								case 1199:
									monitor.wait();
									break;
								case 1200:
									monitor.wait();
									break;
								case 1201:
									monitor.wait();
									break;
								case 1202:
									monitor.wait();
									break;
								case 1203:
									monitor.wait();
									break;
								case 1204:
									monitor.wait();
									break;
								case 1205:
									monitor.wait();
									break;
								case 1206:
									monitor.wait();
									break;
								case 1207:
									monitor.wait();
									break;
								case 1208:
									monitor.wait();
									break;
								case 1209:
									monitor.wait();
									break;
								case 1210:
									monitor.wait();
									break;
								case 1211:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1206;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1212:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1208;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1213:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1214;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1214:
									monitor.wait();
									break;
								case 1215:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1211;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1216:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1212;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1217:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1218;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1218:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1214;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1219:
									monitor.wait();
									break;
								case 1220:
									monitor.wait();
									break;
								case 1221:
									monitor.wait();
									break;
								case 1222:
									monitor.wait();
									break;
								case 1223:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1218;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1224:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1193;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1225:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1228;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1226:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1229;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1227:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1195;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1228:
									monitor.wait();
									break;
								case 1229:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1232;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1230:
									monitor.wait();
									break;
								case 1231:
									monitor.wait();
									break;
								case 1232:
									monitor.wait();
									break;
								case 1233:
									monitor.wait();
									break;
								case 1234:
									monitor.wait();
									break;
								case 1235:
									monitor.wait();
									break;
								case 1236:
									monitor.wait();
									break;
								case 1237:
									monitor.wait();
									break;
								case 1238:
									monitor.wait();
									break;
								case 1239:
									monitor.wait();
									break;
								case 1240:
									monitor.wait();
									break;
								case 1241:
									monitor.wait();
									break;
								case 1242:
									monitor.wait();
									break;
								case 1243:
									monitor.wait();
									break;
								case 1244:
									monitor.wait();
									break;
								case 1245:
									monitor.wait();
									break;
								case 1246:
									monitor.wait();
									break;
								case 1247:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1198;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1248:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1239;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1249:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1206;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1250:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1242;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1251:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1208;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1252:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1254;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1253:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1214;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1254:
									monitor.wait();
									break;
								case 1255:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1196;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1256:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1248;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1257:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1211;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1258:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1250;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1259:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1212;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1260:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1262;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1261:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1218;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1262:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1254;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1263:
									monitor.wait();
									break;
								case 1264:
									monitor.wait();
									break;
								case 1265:
									monitor.wait();
									break;
								case 1266:
									monitor.wait();
									break;
								case 1267:
									monitor.wait();
									break;
								case 1268:
									monitor.wait();
									break;
								case 1269:
									monitor.wait();
									break;
								case 1270:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1262;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1271:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1273;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1272:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1274;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1273:
									monitor.wait();
									break;
								case 1274:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1276;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1275:
									monitor.wait();
									break;
								case 1276:
									monitor.wait();
									break;
								case 1277:
									monitor.wait();
									break;
								case 1278:
									monitor.wait();
									break;
								case 1279:
									monitor.wait();
									break;
								case 1280:
									monitor.wait();
									break;
								case 1281:
									monitor.wait();
									break;
								case 1282:
									monitor.wait();
									break;
								case 1283:
									monitor.wait();
									break;
								case 1284:
									monitor.wait();
									break;
								case 1285:
									monitor.wait();
									break;
								case 1286:
									monitor.wait();
									break;
								case 1287:
									monitor.wait();
									break;
								case 1288:
									monitor.wait();
									break;
								case 1289:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1284;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1290:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1286;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1291:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1292;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1292:
									monitor.wait();
									break;
								case 1293:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1289;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1294:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1290;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1295:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1296;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1296:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1292;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1297:
									monitor.wait();
									break;
								case 1298:
									monitor.wait();
									break;
								case 1299:
									monitor.wait();
									break;
								case 1300:
									monitor.wait();
									break;
								case 1301:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1296;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1302:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1304;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1303:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1305;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1304:
									monitor.wait();
									break;
								case 1305:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1307;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1306:
									monitor.wait();
									break;
								case 1307:
									monitor.wait();
									break;
								case 1308:
									monitor.wait();
									break;
								case 1309:
									monitor.wait();
									break;
								case 1310:
									monitor.wait();
									break;
								case 1311:
									monitor.wait();
									break;
								case 1312:
									monitor.wait();
									break;
								case 1313:
									monitor.wait();
									break;
								case 1314:
									monitor.wait();
									break;
								case 1315:
									monitor.wait();
									break;
								case 1316:
									monitor.wait();
									break;
								case 1317:
									monitor.wait();
									break;
								case 1318:
									monitor.wait();
									break;
								case 1319:
									monitor.wait();
									break;
								case 1320:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1315;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1321:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1317;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1322:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1323;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1323:
									monitor.wait();
									break;
								case 1324:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1320;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1325:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1321;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1326:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1327;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1327:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1323;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1328:
									monitor.wait();
									break;
								case 1329:
									monitor.wait();
									break;
								case 1330:
									monitor.wait();
									break;
								case 1331:
									monitor.wait();
									break;
								case 1332:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1327;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1333:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1335;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1334:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1336;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1335:
									monitor.wait();
									break;
								case 1336:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1338;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1337:
									monitor.wait();
									break;
								case 1338:
									monitor.wait();
									break;
								case 1339:
									monitor.wait();
									break;
								case 1340:
									monitor.wait();
									break;
								case 1341:
									monitor.wait();
									break;
								case 1342:
									monitor.wait();
									break;
								case 1343:
									monitor.wait();
									break;
								case 1344:
									monitor.wait();
									break;
								case 1345:
									monitor.wait();
									break;
								case 1346:
									monitor.wait();
									break;
								case 1347:
									monitor.wait();
									break;
								case 1348:
									monitor.wait();
									break;
								case 1349:
									monitor.wait();
									break;
								case 1350:
									monitor.wait();
									break;
								case 1351:
									monitor.wait();
									break;
								case 1352:
									monitor.wait();
									break;
								case 1353:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1348;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1354:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1350;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1355:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1356;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1356:
									monitor.wait();
									break;
								case 1357:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1353;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1358:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1354;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1359:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1360;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1360:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1356;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1361:
									monitor.wait();
									break;
								case 1362:
									monitor.wait();
									break;
								case 1363:
									monitor.wait();
									break;
								case 1364:
									monitor.wait();
									break;
								case 1365:
									monitor.wait();
									break;
								case 1366:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1360;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1367:
									monitor.wait();
									break;
								case 1368:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2148;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1369:
									monitor.wait();
									break;
								case 1370:
									monitor.wait();
									break;
								case 1371:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1996;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1372:
									monitor.wait();
									break;
								case 1373:
									monitor.wait();
									break;
								case 1374:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1844;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1375:
									monitor.wait();
									break;
								case 1376:
									monitor.wait();
									break;
								case 1377:
									monitor.wait();
									break;
								case 1378:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1672;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1379:
									monitor.wait();
									break;
								case 1380:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1462;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1381:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1463;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1382:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1437;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1383:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1438;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1384:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 35;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1385:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1402;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1386:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1403;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1387:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1388;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1388:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1390;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1389:
									monitor.wait();
									break;
								case 1390:
									monitor.wait();
									break;
								case 1391:
									monitor.wait();
									break;
								case 1392:
									monitor.wait();
									break;
								case 1393:
									monitor.wait();
									break;
								case 1394:
									monitor.wait();
									break;
								case 1395:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1392;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1396:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1397;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1397:
									monitor.wait();
									break;
								case 1398:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1395;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1399:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1400;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1400:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1397;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1401:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 37;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1402:
									monitor.wait();
									break;
								case 1403:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1406;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1404:
									monitor.wait();
									break;
								case 1405:
									monitor.wait();
									break;
								case 1406:
									monitor.wait();
									break;
								case 1407:
									monitor.wait();
									break;
								case 1408:
									monitor.wait();
									break;
								case 1409:
									monitor.wait();
									break;
								case 1410:
									monitor.wait();
									break;
								case 1411:
									monitor.wait();
									break;
								case 1412:
									monitor.wait();
									break;
								case 1413:
									monitor.wait();
									break;
								case 1414:
									monitor.wait();
									break;
								case 1415:
									monitor.wait();
									break;
								case 1416:
									monitor.wait();
									break;
								case 1417:
									monitor.wait();
									break;
								case 1418:
									monitor.wait();
									break;
								case 1419:
									monitor.wait();
									break;
								case 1420:
									monitor.wait();
									break;
								case 1421:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 40;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1422:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1413;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1423:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1390;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1424:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1416;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1425:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1392;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1426:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1428;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1427:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1397;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1428:
									monitor.wait();
									break;
								case 1429:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 38;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1430:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1422;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1431:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1388;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1432:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1424;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1433:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1395;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1434:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1436;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1435:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1400;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1436:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1428;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1437:
									monitor.wait();
									break;
								case 1438:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1440;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1439:
									monitor.wait();
									break;
								case 1440:
									monitor.wait();
									break;
								case 1441:
									monitor.wait();
									break;
								case 1442:
									monitor.wait();
									break;
								case 1443:
									monitor.wait();
									break;
								case 1444:
									monitor.wait();
									break;
								case 1445:
									monitor.wait();
									break;
								case 1446:
									monitor.wait();
									break;
								case 1447:
									monitor.wait();
									break;
								case 1448:
									monitor.wait();
									break;
								case 1449:
									monitor.wait();
									break;
								case 1450:
									monitor.wait();
									break;
								case 1451:
									monitor.wait();
									break;
								case 1452:
									monitor.wait();
									break;
								case 1453:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1448;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1454:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1450;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1455:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1456;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1456:
									monitor.wait();
									break;
								case 1457:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1453;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1458:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1454;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1459:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1461;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1460:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1436;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1461:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1456;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1462:
									monitor.wait();
									break;
								case 1463:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1465;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1464:
									monitor.wait();
									break;
								case 1465:
									monitor.wait();
									break;
								case 1466:
									monitor.wait();
									break;
								case 1467:
									monitor.wait();
									break;
								case 1468:
									monitor.wait();
									break;
								case 1469:
									monitor.wait();
									break;
								case 1470:
									monitor.wait();
									break;
								case 1471:
									monitor.wait();
									break;
								case 1472:
									monitor.wait();
									break;
								case 1473:
									monitor.wait();
									break;
								case 1474:
									monitor.wait();
									break;
								case 1475:
									monitor.wait();
									break;
								case 1476:
									monitor.wait();
									break;
								case 1477:
									monitor.wait();
									break;
								case 1478:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1473;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1479:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1475;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1480:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1481;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1481:
									monitor.wait();
									break;
								case 1482:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1478;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1483:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1479;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1484:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1486;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1485:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1461;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1486:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1481;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1487:
									monitor.wait();
									break;
								case 1488:
									monitor.wait();
									break;
								case 1489:
									monitor.wait();
									break;
								case 1490:
									monitor.wait();
									break;
								case 1491:
									monitor.wait();
									break;
								case 1492:
									monitor.wait();
									break;
								case 1493:
									monitor.wait();
									break;
								case 1494:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1400;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1495:
									monitor.wait();
									break;
								case 1496:
									monitor.wait();
									break;
								case 1497:
									monitor.wait();
									break;
								case 1498:
									monitor.wait();
									break;
								case 1499:
									monitor.wait();
									break;
								case 1500:
									monitor.wait();
									break;
								case 1501:
									monitor.wait();
									break;
								case 1502:
									monitor.wait();
									break;
								case 1503:
									monitor.wait();
									break;
								case 1504:
									monitor.wait();
									break;
								case 1505:
									monitor.wait();
									break;
								case 1506:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1486;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1507:
									monitor.wait();
									break;
								case 1508:
									monitor.wait();
									break;
								case 1509:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1617;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1510:
									monitor.wait();
									break;
								case 1511:
									monitor.wait();
									break;
								case 1512:
									monitor.wait();
									break;
								case 1513:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1547;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1514:
									monitor.wait();
									break;
								case 1515:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1517;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1516:
									monitor.wait();
									break;
								case 1517:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1519;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1518:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1520;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1519:
									monitor.wait();
									break;
								case 1520:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1522;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1521:
									monitor.wait();
									break;
								case 1522:
									monitor.wait();
									break;
								case 1523:
									monitor.wait();
									break;
								case 1524:
									monitor.wait();
									break;
								case 1525:
									monitor.wait();
									break;
								case 1526:
									monitor.wait();
									break;
								case 1527:
									monitor.wait();
									break;
								case 1528:
									monitor.wait();
									break;
								case 1529:
									monitor.wait();
									break;
								case 1530:
									monitor.wait();
									break;
								case 1531:
									monitor.wait();
									break;
								case 1532:
									monitor.wait();
									break;
								case 1533:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1528;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1534:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1530;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1535:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1536;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1536:
									monitor.wait();
									break;
								case 1537:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1533;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1538:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1534;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1539:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1540;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1540:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1536;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1541:
									monitor.wait();
									break;
								case 1542:
									monitor.wait();
									break;
								case 1543:
									monitor.wait();
									break;
								case 1544:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1540;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1545:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1385;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1546:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1517;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1547:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1551;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1548:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1552;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1549:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1402;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1550:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1519;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1551:
									monitor.wait();
									break;
								case 1552:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1556;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1553:
									monitor.wait();
									break;
								case 1554:
									monitor.wait();
									break;
								case 1555:
									monitor.wait();
									break;
								case 1556:
									monitor.wait();
									break;
								case 1557:
									monitor.wait();
									break;
								case 1558:
									monitor.wait();
									break;
								case 1559:
									monitor.wait();
									break;
								case 1560:
									monitor.wait();
									break;
								case 1561:
									monitor.wait();
									break;
								case 1562:
									monitor.wait();
									break;
								case 1563:
									monitor.wait();
									break;
								case 1564:
									monitor.wait();
									break;
								case 1565:
									monitor.wait();
									break;
								case 1566:
									monitor.wait();
									break;
								case 1567:
									monitor.wait();
									break;
								case 1568:
									monitor.wait();
									break;
								case 1569:
									monitor.wait();
									break;
								case 1570:
									monitor.wait();
									break;
								case 1571:
									monitor.wait();
									break;
								case 1572:
									monitor.wait();
									break;
								case 1573:
									monitor.wait();
									break;
								case 1574:
									monitor.wait();
									break;
								case 1575:
									monitor.wait();
									break;
								case 1576:
									monitor.wait();
									break;
								case 1577:
									monitor.wait();
									break;
								case 1578:
									monitor.wait();
									break;
								case 1579:
									monitor.wait();
									break;
								case 1580:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1406;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1581:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1522;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1582:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1569;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1583:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1413;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1584:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1528;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1585:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1573;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1586:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1416;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1587:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1530;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1588:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1591;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1589:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1428;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1590:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1536;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1591:
									monitor.wait();
									break;
								case 1592:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1403;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1593:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1520;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1594:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1582;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1595:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1422;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1596:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1533;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1597:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1585;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1598:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1424;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1599:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1534;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1600:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1603;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1601:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1436;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1602:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1540;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1603:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1591;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1604:
									monitor.wait();
									break;
								case 1605:
									monitor.wait();
									break;
								case 1606:
									monitor.wait();
									break;
								case 1607:
									monitor.wait();
									break;
								case 1608:
									monitor.wait();
									break;
								case 1609:
									monitor.wait();
									break;
								case 1610:
									monitor.wait();
									break;
								case 1611:
									monitor.wait();
									break;
								case 1612:
									monitor.wait();
									break;
								case 1613:
									monitor.wait();
									break;
								case 1614:
									monitor.wait();
									break;
								case 1615:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1603;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1616:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1382;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1617:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1620;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1618:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1621;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1619:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1437;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1620:
									monitor.wait();
									break;
								case 1621:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1624;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1622:
									monitor.wait();
									break;
								case 1623:
									monitor.wait();
									break;
								case 1624:
									monitor.wait();
									break;
								case 1625:
									monitor.wait();
									break;
								case 1626:
									monitor.wait();
									break;
								case 1627:
									monitor.wait();
									break;
								case 1628:
									monitor.wait();
									break;
								case 1629:
									monitor.wait();
									break;
								case 1630:
									monitor.wait();
									break;
								case 1631:
									monitor.wait();
									break;
								case 1632:
									monitor.wait();
									break;
								case 1633:
									monitor.wait();
									break;
								case 1634:
									monitor.wait();
									break;
								case 1635:
									monitor.wait();
									break;
								case 1636:
									monitor.wait();
									break;
								case 1637:
									monitor.wait();
									break;
								case 1638:
									monitor.wait();
									break;
								case 1639:
									monitor.wait();
									break;
								case 1640:
									monitor.wait();
									break;
								case 1641:
									monitor.wait();
									break;
								case 1642:
									monitor.wait();
									break;
								case 1643:
									monitor.wait();
									break;
								case 1644:
									monitor.wait();
									break;
								case 1645:
									monitor.wait();
									break;
								case 1646:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1440;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1647:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1638;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1648:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1448;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1649:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1641;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1650:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1450;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1651:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1653;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1652:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1456;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1653:
									monitor.wait();
									break;
								case 1654:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1438;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1655:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1647;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1656:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1453;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1657:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1649;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1658:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1454;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1659:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1661;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1660:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1461;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1661:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1653;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1662:
									monitor.wait();
									break;
								case 1663:
									monitor.wait();
									break;
								case 1664:
									monitor.wait();
									break;
								case 1665:
									monitor.wait();
									break;
								case 1666:
									monitor.wait();
									break;
								case 1667:
									monitor.wait();
									break;
								case 1668:
									monitor.wait();
									break;
								case 1669:
									monitor.wait();
									break;
								case 1670:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1661;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1671:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1380;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1672:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1675;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1673:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1676;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1674:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1462;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1675:
									monitor.wait();
									break;
								case 1676:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1679;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1677:
									monitor.wait();
									break;
								case 1678:
									monitor.wait();
									break;
								case 1679:
									monitor.wait();
									break;
								case 1680:
									monitor.wait();
									break;
								case 1681:
									monitor.wait();
									break;
								case 1682:
									monitor.wait();
									break;
								case 1683:
									monitor.wait();
									break;
								case 1684:
									monitor.wait();
									break;
								case 1685:
									monitor.wait();
									break;
								case 1686:
									monitor.wait();
									break;
								case 1687:
									monitor.wait();
									break;
								case 1688:
									monitor.wait();
									break;
								case 1689:
									monitor.wait();
									break;
								case 1690:
									monitor.wait();
									break;
								case 1691:
									monitor.wait();
									break;
								case 1692:
									monitor.wait();
									break;
								case 1693:
									monitor.wait();
									break;
								case 1694:
									monitor.wait();
									break;
								case 1695:
									monitor.wait();
									break;
								case 1696:
									monitor.wait();
									break;
								case 1697:
									monitor.wait();
									break;
								case 1698:
									monitor.wait();
									break;
								case 1699:
									monitor.wait();
									break;
								case 1700:
									monitor.wait();
									break;
								case 1701:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1465;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1702:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1693;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1703:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1473;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1704:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1696;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1705:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1475;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1706:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1708;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1707:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1481;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1708:
									monitor.wait();
									break;
								case 1709:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1463;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1710:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1702;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1711:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1478;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1712:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1704;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1713:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1479;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1714:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1716;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1715:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1486;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1716:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1708;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1717:
									monitor.wait();
									break;
								case 1718:
									monitor.wait();
									break;
								case 1719:
									monitor.wait();
									break;
								case 1720:
									monitor.wait();
									break;
								case 1721:
									monitor.wait();
									break;
								case 1722:
									monitor.wait();
									break;
								case 1723:
									monitor.wait();
									break;
								case 1724:
									monitor.wait();
									break;
								case 1725:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1716;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1726:
									monitor.wait();
									break;
								case 1727:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1813;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1728:
									monitor.wait();
									break;
								case 1729:
									monitor.wait();
									break;
								case 1730:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1767;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1731:
									monitor.wait();
									break;
								case 1732:
									monitor.wait();
									break;
								case 1733:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1735;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1734:
									monitor.wait();
									break;
								case 1735:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1737;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1736:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1738;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1737:
									monitor.wait();
									break;
								case 1738:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1740;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1739:
									monitor.wait();
									break;
								case 1740:
									monitor.wait();
									break;
								case 1741:
									monitor.wait();
									break;
								case 1742:
									monitor.wait();
									break;
								case 1743:
									monitor.wait();
									break;
								case 1744:
									monitor.wait();
									break;
								case 1745:
									monitor.wait();
									break;
								case 1746:
									monitor.wait();
									break;
								case 1747:
									monitor.wait();
									break;
								case 1748:
									monitor.wait();
									break;
								case 1749:
									monitor.wait();
									break;
								case 1750:
									monitor.wait();
									break;
								case 1751:
									monitor.wait();
									break;
								case 1752:
									monitor.wait();
									break;
								case 1753:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1748;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1754:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1750;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1755:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1756;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1756:
									monitor.wait();
									break;
								case 1757:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1753;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1758:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1754;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1759:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1760;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1760:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1756;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1761:
									monitor.wait();
									break;
								case 1762:
									monitor.wait();
									break;
								case 1763:
									monitor.wait();
									break;
								case 1764:
									monitor.wait();
									break;
								case 1765:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1760;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1766:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1735;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1767:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1770;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1768:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1771;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1769:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1737;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1770:
									monitor.wait();
									break;
								case 1771:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1774;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1772:
									monitor.wait();
									break;
								case 1773:
									monitor.wait();
									break;
								case 1774:
									monitor.wait();
									break;
								case 1775:
									monitor.wait();
									break;
								case 1776:
									monitor.wait();
									break;
								case 1777:
									monitor.wait();
									break;
								case 1778:
									monitor.wait();
									break;
								case 1779:
									monitor.wait();
									break;
								case 1780:
									monitor.wait();
									break;
								case 1781:
									monitor.wait();
									break;
								case 1782:
									monitor.wait();
									break;
								case 1783:
									monitor.wait();
									break;
								case 1784:
									monitor.wait();
									break;
								case 1785:
									monitor.wait();
									break;
								case 1786:
									monitor.wait();
									break;
								case 1787:
									monitor.wait();
									break;
								case 1788:
									monitor.wait();
									break;
								case 1789:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1740;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1790:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1781;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1791:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1748;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1792:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1784;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1793:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1750;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1794:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1796;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1795:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1756;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1796:
									monitor.wait();
									break;
								case 1797:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1738;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1798:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1790;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1799:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1753;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1800:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1792;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1801:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1754;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1802:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1804;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1803:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1760;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1804:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1796;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1805:
									monitor.wait();
									break;
								case 1806:
									monitor.wait();
									break;
								case 1807:
									monitor.wait();
									break;
								case 1808:
									monitor.wait();
									break;
								case 1809:
									monitor.wait();
									break;
								case 1810:
									monitor.wait();
									break;
								case 1811:
									monitor.wait();
									break;
								case 1812:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1804;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1813:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1815;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1814:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1816;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1815:
									monitor.wait();
									break;
								case 1816:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1818;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1817:
									monitor.wait();
									break;
								case 1818:
									monitor.wait();
									break;
								case 1819:
									monitor.wait();
									break;
								case 1820:
									monitor.wait();
									break;
								case 1821:
									monitor.wait();
									break;
								case 1822:
									monitor.wait();
									break;
								case 1823:
									monitor.wait();
									break;
								case 1824:
									monitor.wait();
									break;
								case 1825:
									monitor.wait();
									break;
								case 1826:
									monitor.wait();
									break;
								case 1827:
									monitor.wait();
									break;
								case 1828:
									monitor.wait();
									break;
								case 1829:
									monitor.wait();
									break;
								case 1830:
									monitor.wait();
									break;
								case 1831:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1826;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1832:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1828;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1833:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1834;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1834:
									monitor.wait();
									break;
								case 1835:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1831;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1836:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1832;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1837:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1838;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1838:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1834;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1839:
									monitor.wait();
									break;
								case 1840:
									monitor.wait();
									break;
								case 1841:
									monitor.wait();
									break;
								case 1842:
									monitor.wait();
									break;
								case 1843:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1838;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1844:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1846;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1845:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1847;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1846:
									monitor.wait();
									break;
								case 1847:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1849;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1848:
									monitor.wait();
									break;
								case 1849:
									monitor.wait();
									break;
								case 1850:
									monitor.wait();
									break;
								case 1851:
									monitor.wait();
									break;
								case 1852:
									monitor.wait();
									break;
								case 1853:
									monitor.wait();
									break;
								case 1854:
									monitor.wait();
									break;
								case 1855:
									monitor.wait();
									break;
								case 1856:
									monitor.wait();
									break;
								case 1857:
									monitor.wait();
									break;
								case 1858:
									monitor.wait();
									break;
								case 1859:
									monitor.wait();
									break;
								case 1860:
									monitor.wait();
									break;
								case 1861:
									monitor.wait();
									break;
								case 1862:
									monitor.wait();
									break;
								case 1863:
									monitor.wait();
									break;
								case 1864:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1859;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1865:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1861;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1866:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1867;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1867:
									monitor.wait();
									break;
								case 1868:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1864;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1869:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1865;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1870:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1871;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1871:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1867;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1872:
									monitor.wait();
									break;
								case 1873:
									monitor.wait();
									break;
								case 1874:
									monitor.wait();
									break;
								case 1875:
									monitor.wait();
									break;
								case 1876:
									monitor.wait();
									break;
								case 1877:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1871;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1878:
									monitor.wait();
									break;
								case 1879:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1965;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1880:
									monitor.wait();
									break;
								case 1881:
									monitor.wait();
									break;
								case 1882:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1919;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1883:
									monitor.wait();
									break;
								case 1884:
									monitor.wait();
									break;
								case 1885:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1887;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1886:
									monitor.wait();
									break;
								case 1887:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1889;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1888:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1890;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1889:
									monitor.wait();
									break;
								case 1890:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1892;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1891:
									monitor.wait();
									break;
								case 1892:
									monitor.wait();
									break;
								case 1893:
									monitor.wait();
									break;
								case 1894:
									monitor.wait();
									break;
								case 1895:
									monitor.wait();
									break;
								case 1896:
									monitor.wait();
									break;
								case 1897:
									monitor.wait();
									break;
								case 1898:
									monitor.wait();
									break;
								case 1899:
									monitor.wait();
									break;
								case 1900:
									monitor.wait();
									break;
								case 1901:
									monitor.wait();
									break;
								case 1902:
									monitor.wait();
									break;
								case 1903:
									monitor.wait();
									break;
								case 1904:
									monitor.wait();
									break;
								case 1905:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1900;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1906:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1902;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1907:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1908;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1908:
									monitor.wait();
									break;
								case 1909:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1905;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1910:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1906;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1911:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1912;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1912:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1908;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1913:
									monitor.wait();
									break;
								case 1914:
									monitor.wait();
									break;
								case 1915:
									monitor.wait();
									break;
								case 1916:
									monitor.wait();
									break;
								case 1917:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1912;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1918:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1887;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1919:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1922;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1920:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1923;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1921:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1889;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1922:
									monitor.wait();
									break;
								case 1923:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1926;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1924:
									monitor.wait();
									break;
								case 1925:
									monitor.wait();
									break;
								case 1926:
									monitor.wait();
									break;
								case 1927:
									monitor.wait();
									break;
								case 1928:
									monitor.wait();
									break;
								case 1929:
									monitor.wait();
									break;
								case 1930:
									monitor.wait();
									break;
								case 1931:
									monitor.wait();
									break;
								case 1932:
									monitor.wait();
									break;
								case 1933:
									monitor.wait();
									break;
								case 1934:
									monitor.wait();
									break;
								case 1935:
									monitor.wait();
									break;
								case 1936:
									monitor.wait();
									break;
								case 1937:
									monitor.wait();
									break;
								case 1938:
									monitor.wait();
									break;
								case 1939:
									monitor.wait();
									break;
								case 1940:
									monitor.wait();
									break;
								case 1941:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1892;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1942:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1933;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1943:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1900;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1944:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1936;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1945:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1902;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1946:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1948;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1947:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1908;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1948:
									monitor.wait();
									break;
								case 1949:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1890;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1950:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1942;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1951:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1905;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1952:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1944;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1953:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1906;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1954:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1956;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1955:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1912;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1956:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1948;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1957:
									monitor.wait();
									break;
								case 1958:
									monitor.wait();
									break;
								case 1959:
									monitor.wait();
									break;
								case 1960:
									monitor.wait();
									break;
								case 1961:
									monitor.wait();
									break;
								case 1962:
									monitor.wait();
									break;
								case 1963:
									monitor.wait();
									break;
								case 1964:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1956;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1965:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1967;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1966:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1968;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1967:
									monitor.wait();
									break;
								case 1968:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1970;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1969:
									monitor.wait();
									break;
								case 1970:
									monitor.wait();
									break;
								case 1971:
									monitor.wait();
									break;
								case 1972:
									monitor.wait();
									break;
								case 1973:
									monitor.wait();
									break;
								case 1974:
									monitor.wait();
									break;
								case 1975:
									monitor.wait();
									break;
								case 1976:
									monitor.wait();
									break;
								case 1977:
									monitor.wait();
									break;
								case 1978:
									monitor.wait();
									break;
								case 1979:
									monitor.wait();
									break;
								case 1980:
									monitor.wait();
									break;
								case 1981:
									monitor.wait();
									break;
								case 1982:
									monitor.wait();
									break;
								case 1983:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1978;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1984:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1980;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1985:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1986;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1986:
									monitor.wait();
									break;
								case 1987:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1983;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1988:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1984;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1989:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1990;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1990:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1986;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1991:
									monitor.wait();
									break;
								case 1992:
									monitor.wait();
									break;
								case 1993:
									monitor.wait();
									break;
								case 1994:
									monitor.wait();
									break;
								case 1995:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1990;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1996:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1998;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1997:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 1999;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 1998:
									monitor.wait();
									break;
								case 1999:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2001;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2000:
									monitor.wait();
									break;
								case 2001:
									monitor.wait();
									break;
								case 2002:
									monitor.wait();
									break;
								case 2003:
									monitor.wait();
									break;
								case 2004:
									monitor.wait();
									break;
								case 2005:
									monitor.wait();
									break;
								case 2006:
									monitor.wait();
									break;
								case 2007:
									monitor.wait();
									break;
								case 2008:
									monitor.wait();
									break;
								case 2009:
									monitor.wait();
									break;
								case 2010:
									monitor.wait();
									break;
								case 2011:
									monitor.wait();
									break;
								case 2012:
									monitor.wait();
									break;
								case 2013:
									monitor.wait();
									break;
								case 2014:
									monitor.wait();
									break;
								case 2015:
									monitor.wait();
									break;
								case 2016:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2011;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2017:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2013;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2018:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2019;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2019:
									monitor.wait();
									break;
								case 2020:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2016;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2021:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2017;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2022:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2023;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2023:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2019;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2024:
									monitor.wait();
									break;
								case 2025:
									monitor.wait();
									break;
								case 2026:
									monitor.wait();
									break;
								case 2027:
									monitor.wait();
									break;
								case 2028:
									monitor.wait();
									break;
								case 2029:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2023;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2030:
									monitor.wait();
									break;
								case 2031:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2117;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2032:
									monitor.wait();
									break;
								case 2033:
									monitor.wait();
									break;
								case 2034:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2071;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2035:
									monitor.wait();
									break;
								case 2036:
									monitor.wait();
									break;
								case 2037:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2039;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2038:
									monitor.wait();
									break;
								case 2039:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2041;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2040:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2042;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2041:
									monitor.wait();
									break;
								case 2042:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2044;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2043:
									monitor.wait();
									break;
								case 2044:
									monitor.wait();
									break;
								case 2045:
									monitor.wait();
									break;
								case 2046:
									monitor.wait();
									break;
								case 2047:
									monitor.wait();
									break;
								case 2048:
									monitor.wait();
									break;
								case 2049:
									monitor.wait();
									break;
								case 2050:
									monitor.wait();
									break;
								case 2051:
									monitor.wait();
									break;
								case 2052:
									monitor.wait();
									break;
								case 2053:
									monitor.wait();
									break;
								case 2054:
									monitor.wait();
									break;
								case 2055:
									monitor.wait();
									break;
								case 2056:
									monitor.wait();
									break;
								case 2057:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2052;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2058:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2054;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2059:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2060;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2060:
									monitor.wait();
									break;
								case 2061:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2057;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2062:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2058;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2063:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2064;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2064:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2060;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2065:
									monitor.wait();
									break;
								case 2066:
									monitor.wait();
									break;
								case 2067:
									monitor.wait();
									break;
								case 2068:
									monitor.wait();
									break;
								case 2069:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2064;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2070:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2039;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2071:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2074;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2072:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2075;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2073:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2041;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2074:
									monitor.wait();
									break;
								case 2075:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2078;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2076:
									monitor.wait();
									break;
								case 2077:
									monitor.wait();
									break;
								case 2078:
									monitor.wait();
									break;
								case 2079:
									monitor.wait();
									break;
								case 2080:
									monitor.wait();
									break;
								case 2081:
									monitor.wait();
									break;
								case 2082:
									monitor.wait();
									break;
								case 2083:
									monitor.wait();
									break;
								case 2084:
									monitor.wait();
									break;
								case 2085:
									monitor.wait();
									break;
								case 2086:
									monitor.wait();
									break;
								case 2087:
									monitor.wait();
									break;
								case 2088:
									monitor.wait();
									break;
								case 2089:
									monitor.wait();
									break;
								case 2090:
									monitor.wait();
									break;
								case 2091:
									monitor.wait();
									break;
								case 2092:
									monitor.wait();
									break;
								case 2093:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2044;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2094:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2085;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2095:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2052;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2096:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2088;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2097:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2054;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2098:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2100;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2099:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2060;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2100:
									monitor.wait();
									break;
								case 2101:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2042;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2102:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2094;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2103:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2057;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2104:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2096;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2105:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2058;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2106:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2108;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2107:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2064;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2108:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2100;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2109:
									monitor.wait();
									break;
								case 2110:
									monitor.wait();
									break;
								case 2111:
									monitor.wait();
									break;
								case 2112:
									monitor.wait();
									break;
								case 2113:
									monitor.wait();
									break;
								case 2114:
									monitor.wait();
									break;
								case 2115:
									monitor.wait();
									break;
								case 2116:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2108;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2117:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2119;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2118:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2120;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2119:
									monitor.wait();
									break;
								case 2120:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2122;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2121:
									monitor.wait();
									break;
								case 2122:
									monitor.wait();
									break;
								case 2123:
									monitor.wait();
									break;
								case 2124:
									monitor.wait();
									break;
								case 2125:
									monitor.wait();
									break;
								case 2126:
									monitor.wait();
									break;
								case 2127:
									monitor.wait();
									break;
								case 2128:
									monitor.wait();
									break;
								case 2129:
									monitor.wait();
									break;
								case 2130:
									monitor.wait();
									break;
								case 2131:
									monitor.wait();
									break;
								case 2132:
									monitor.wait();
									break;
								case 2133:
									monitor.wait();
									break;
								case 2134:
									monitor.wait();
									break;
								case 2135:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2130;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2136:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2132;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2137:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2138;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2138:
									monitor.wait();
									break;
								case 2139:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2135;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2140:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2136;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2141:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2142;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2142:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2138;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2143:
									monitor.wait();
									break;
								case 2144:
									monitor.wait();
									break;
								case 2145:
									monitor.wait();
									break;
								case 2146:
									monitor.wait();
									break;
								case 2147:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2142;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2148:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2150;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2149:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2151;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2150:
									monitor.wait();
									break;
								case 2151:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2153;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2152:
									monitor.wait();
									break;
								case 2153:
									monitor.wait();
									break;
								case 2154:
									monitor.wait();
									break;
								case 2155:
									monitor.wait();
									break;
								case 2156:
									monitor.wait();
									break;
								case 2157:
									monitor.wait();
									break;
								case 2158:
									monitor.wait();
									break;
								case 2159:
									monitor.wait();
									break;
								case 2160:
									monitor.wait();
									break;
								case 2161:
									monitor.wait();
									break;
								case 2162:
									monitor.wait();
									break;
								case 2163:
									monitor.wait();
									break;
								case 2164:
									monitor.wait();
									break;
								case 2165:
									monitor.wait();
									break;
								case 2166:
									monitor.wait();
									break;
								case 2167:
									monitor.wait();
									break;
								case 2168:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2163;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2169:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2165;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2170:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2171;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2171:
									monitor.wait();
									break;
								case 2172:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2168;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2173:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2169;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2174:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2175;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2175:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2171;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2176:
									monitor.wait();
									break;
								case 2177:
									monitor.wait();
									break;
								case 2178:
									monitor.wait();
									break;
								case 2179:
									monitor.wait();
									break;
								case 2180:
									monitor.wait();
									break;
								case 2181:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2175;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2182:
									monitor.wait();
									break;
								case 2183:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2303;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2184:
									monitor.wait();
									break;
								case 2185:
									monitor.wait();
									break;
								case 2186:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2272;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2187:
									monitor.wait();
									break;
								case 2188:
									monitor.wait();
									break;
								case 2189:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2226;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2190:
									monitor.wait();
									break;
								case 2191:
									monitor.wait();
									break;
								case 2192:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2194;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2193:
									monitor.wait();
									break;
								case 2194:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2196;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2195:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2197;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2196:
									monitor.wait();
									break;
								case 2197:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2199;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2198:
									monitor.wait();
									break;
								case 2199:
									monitor.wait();
									break;
								case 2200:
									monitor.wait();
									break;
								case 2201:
									monitor.wait();
									break;
								case 2202:
									monitor.wait();
									break;
								case 2203:
									monitor.wait();
									break;
								case 2204:
									monitor.wait();
									break;
								case 2205:
									monitor.wait();
									break;
								case 2206:
									monitor.wait();
									break;
								case 2207:
									monitor.wait();
									break;
								case 2208:
									monitor.wait();
									break;
								case 2209:
									monitor.wait();
									break;
								case 2210:
									monitor.wait();
									break;
								case 2211:
									monitor.wait();
									break;
								case 2212:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2207;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2213:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2209;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2214:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2215;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2215:
									monitor.wait();
									break;
								case 2216:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2212;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2217:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2213;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2218:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2219;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2219:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2215;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2220:
									monitor.wait();
									break;
								case 2221:
									monitor.wait();
									break;
								case 2222:
									monitor.wait();
									break;
								case 2223:
									monitor.wait();
									break;
								case 2224:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2219;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2225:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2194;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2226:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2229;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2227:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2230;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2228:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2196;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2229:
									monitor.wait();
									break;
								case 2230:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2233;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2231:
									monitor.wait();
									break;
								case 2232:
									monitor.wait();
									break;
								case 2233:
									monitor.wait();
									break;
								case 2234:
									monitor.wait();
									break;
								case 2235:
									monitor.wait();
									break;
								case 2236:
									monitor.wait();
									break;
								case 2237:
									monitor.wait();
									break;
								case 2238:
									monitor.wait();
									break;
								case 2239:
									monitor.wait();
									break;
								case 2240:
									monitor.wait();
									break;
								case 2241:
									monitor.wait();
									break;
								case 2242:
									monitor.wait();
									break;
								case 2243:
									monitor.wait();
									break;
								case 2244:
									monitor.wait();
									break;
								case 2245:
									monitor.wait();
									break;
								case 2246:
									monitor.wait();
									break;
								case 2247:
									monitor.wait();
									break;
								case 2248:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2199;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2249:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2240;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2250:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2207;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2251:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2243;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2252:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2209;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2253:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2255;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2254:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2215;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2255:
									monitor.wait();
									break;
								case 2256:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2197;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2257:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2249;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2258:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2212;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2259:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2251;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2260:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2213;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2261:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2263;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2262:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2219;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2263:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2255;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2264:
									monitor.wait();
									break;
								case 2265:
									monitor.wait();
									break;
								case 2266:
									monitor.wait();
									break;
								case 2267:
									monitor.wait();
									break;
								case 2268:
									monitor.wait();
									break;
								case 2269:
									monitor.wait();
									break;
								case 2270:
									monitor.wait();
									break;
								case 2271:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2263;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2272:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2274;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2273:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2275;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2274:
									monitor.wait();
									break;
								case 2275:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2277;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2276:
									monitor.wait();
									break;
								case 2277:
									monitor.wait();
									break;
								case 2278:
									monitor.wait();
									break;
								case 2279:
									monitor.wait();
									break;
								case 2280:
									monitor.wait();
									break;
								case 2281:
									monitor.wait();
									break;
								case 2282:
									monitor.wait();
									break;
								case 2283:
									monitor.wait();
									break;
								case 2284:
									monitor.wait();
									break;
								case 2285:
									monitor.wait();
									break;
								case 2286:
									monitor.wait();
									break;
								case 2287:
									monitor.wait();
									break;
								case 2288:
									monitor.wait();
									break;
								case 2289:
									monitor.wait();
									break;
								case 2290:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2285;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2291:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2287;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2292:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2293;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2293:
									monitor.wait();
									break;
								case 2294:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2290;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2295:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2291;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2296:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2297;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2297:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2293;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2298:
									monitor.wait();
									break;
								case 2299:
									monitor.wait();
									break;
								case 2300:
									monitor.wait();
									break;
								case 2301:
									monitor.wait();
									break;
								case 2302:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2297;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2303:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2305;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2304:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2306;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2305:
									monitor.wait();
									break;
								case 2306:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2308;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2307:
									monitor.wait();
									break;
								case 2308:
									monitor.wait();
									break;
								case 2309:
									monitor.wait();
									break;
								case 2310:
									monitor.wait();
									break;
								case 2311:
									monitor.wait();
									break;
								case 2312:
									monitor.wait();
									break;
								case 2313:
									monitor.wait();
									break;
								case 2314:
									monitor.wait();
									break;
								case 2315:
									monitor.wait();
									break;
								case 2316:
									monitor.wait();
									break;
								case 2317:
									monitor.wait();
									break;
								case 2318:
									monitor.wait();
									break;
								case 2319:
									monitor.wait();
									break;
								case 2320:
									monitor.wait();
									break;
								case 2321:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2316;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2322:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2318;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2323:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2324;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2324:
									monitor.wait();
									break;
								case 2325:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2321;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2326:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2322;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2327:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2328;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2328:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2324;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2329:
									monitor.wait();
									break;
								case 2330:
									monitor.wait();
									break;
								case 2331:
									monitor.wait();
									break;
								case 2332:
									monitor.wait();
									break;
								case 2333:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2328;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2334:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2460;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2335:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2461;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2336:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2435;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2337:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2436;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2338:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2410;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2339:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2411;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2340:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2343;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2341:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2370;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2342:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2371;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2343:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2345;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2344:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2346;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2345:
									monitor.wait();
									break;
								case 2346:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2348;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2347:
									monitor.wait();
									break;
								case 2348:
									monitor.wait();
									break;
								case 2349:
									monitor.wait();
									break;
								case 2350:
									monitor.wait();
									break;
								case 2351:
									monitor.wait();
									break;
								case 2352:
									monitor.wait();
									break;
								case 2353:
									monitor.wait();
									break;
								case 2354:
									monitor.wait();
									break;
								case 2355:
									monitor.wait();
									break;
								case 2356:
									monitor.wait();
									break;
								case 2357:
									monitor.wait();
									break;
								case 2358:
									monitor.wait();
									break;
								case 2359:
									monitor.wait();
									break;
								case 2360:
									monitor.wait();
									break;
								case 2361:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2356;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2362:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2358;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2363:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2364;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2364:
									monitor.wait();
									break;
								case 2365:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2361;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2366:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2362;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2367:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2368;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2368:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2364;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2369:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2345;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2370:
									monitor.wait();
									break;
								case 2371:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2374;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2372:
									monitor.wait();
									break;
								case 2373:
									monitor.wait();
									break;
								case 2374:
									monitor.wait();
									break;
								case 2375:
									monitor.wait();
									break;
								case 2376:
									monitor.wait();
									break;
								case 2377:
									monitor.wait();
									break;
								case 2378:
									monitor.wait();
									break;
								case 2379:
									monitor.wait();
									break;
								case 2380:
									monitor.wait();
									break;
								case 2381:
									monitor.wait();
									break;
								case 2382:
									monitor.wait();
									break;
								case 2383:
									monitor.wait();
									break;
								case 2384:
									monitor.wait();
									break;
								case 2385:
									monitor.wait();
									break;
								case 2386:
									monitor.wait();
									break;
								case 2387:
									monitor.wait();
									break;
								case 2388:
									monitor.wait();
									break;
								case 2389:
									monitor.wait();
									break;
								case 2390:
									monitor.wait();
									break;
								case 2391:
									monitor.wait();
									break;
								case 2392:
									monitor.wait();
									break;
								case 2393:
									monitor.wait();
									break;
								case 2394:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2348;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2395:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2386;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2396:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2356;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2397:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2389;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2398:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2358;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2399:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2401;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2400:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2364;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2401:
									monitor.wait();
									break;
								case 2402:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2346;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2403:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2395;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2404:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2361;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2405:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2397;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2406:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2362;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2407:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2409;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2408:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2368;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2409:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2401;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2410:
									monitor.wait();
									break;
								case 2411:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2413;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2412:
									monitor.wait();
									break;
								case 2413:
									monitor.wait();
									break;
								case 2414:
									monitor.wait();
									break;
								case 2415:
									monitor.wait();
									break;
								case 2416:
									monitor.wait();
									break;
								case 2417:
									monitor.wait();
									break;
								case 2418:
									monitor.wait();
									break;
								case 2419:
									monitor.wait();
									break;
								case 2420:
									monitor.wait();
									break;
								case 2421:
									monitor.wait();
									break;
								case 2422:
									monitor.wait();
									break;
								case 2423:
									monitor.wait();
									break;
								case 2424:
									monitor.wait();
									break;
								case 2425:
									monitor.wait();
									break;
								case 2426:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2421;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2427:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2423;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2428:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2429;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2429:
									monitor.wait();
									break;
								case 2430:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2426;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2431:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2427;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2432:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2434;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2433:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2409;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2434:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2429;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2435:
									monitor.wait();
									break;
								case 2436:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2438;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2437:
									monitor.wait();
									break;
								case 2438:
									monitor.wait();
									break;
								case 2439:
									monitor.wait();
									break;
								case 2440:
									monitor.wait();
									break;
								case 2441:
									monitor.wait();
									break;
								case 2442:
									monitor.wait();
									break;
								case 2443:
									monitor.wait();
									break;
								case 2444:
									monitor.wait();
									break;
								case 2445:
									monitor.wait();
									break;
								case 2446:
									monitor.wait();
									break;
								case 2447:
									monitor.wait();
									break;
								case 2448:
									monitor.wait();
									break;
								case 2449:
									monitor.wait();
									break;
								case 2450:
									monitor.wait();
									break;
								case 2451:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2446;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2452:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2448;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2453:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2454;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2454:
									monitor.wait();
									break;
								case 2455:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2451;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2456:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2452;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2457:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2459;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2458:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2434;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2459:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2454;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2460:
									monitor.wait();
									break;
								case 2461:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2463;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2462:
									monitor.wait();
									break;
								case 2463:
									monitor.wait();
									break;
								case 2464:
									monitor.wait();
									break;
								case 2465:
									monitor.wait();
									break;
								case 2466:
									monitor.wait();
									break;
								case 2467:
									monitor.wait();
									break;
								case 2468:
									monitor.wait();
									break;
								case 2469:
									monitor.wait();
									break;
								case 2470:
									monitor.wait();
									break;
								case 2471:
									monitor.wait();
									break;
								case 2472:
									monitor.wait();
									break;
								case 2473:
									monitor.wait();
									break;
								case 2474:
									monitor.wait();
									break;
								case 2475:
									monitor.wait();
									break;
								case 2476:
									monitor.wait();
									break;
								case 2477:
									monitor.wait();
									break;
								case 2478:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2473;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2479:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2475;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2480:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2481;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2481:
									monitor.wait();
									break;
								case 2482:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2478;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2483:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2479;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2484:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2486;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2485:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2459;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2486:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2481;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2487:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2489;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2488:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2490;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2489:
									monitor.wait();
									break;
								case 2490:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2492;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2491:
									monitor.wait();
									break;
								case 2492:
									monitor.wait();
									break;
								case 2493:
									monitor.wait();
									break;
								case 2494:
									monitor.wait();
									break;
								case 2495:
									monitor.wait();
									break;
								case 2496:
									monitor.wait();
									break;
								case 2497:
									monitor.wait();
									break;
								case 2498:
									monitor.wait();
									break;
								case 2499:
									monitor.wait();
									break;
								case 2500:
									monitor.wait();
									break;
								case 2501:
									monitor.wait();
									break;
								case 2502:
									monitor.wait();
									break;
								case 2503:
									monitor.wait();
									break;
								case 2504:
									monitor.wait();
									break;
								case 2505:
									monitor.wait();
									break;
								case 2506:
									monitor.wait();
									break;
								case 2507:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2502;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2508:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2504;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2509:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2510;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2510:
									monitor.wait();
									break;
								case 2511:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2507;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2512:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2508;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2513:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2514;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2514:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2510;
											queueFromworker_2_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2515:
									monitor.wait();
									break;
								case 2516:
									monitor.wait();
									break;
								case 2517:
									monitor.wait();
									break;
								case 2518:
									monitor.wait();
									break;
								case 2519:
									monitor.wait();
									break;
								case 2520:
									monitor.wait();
									break;
								case 2521:
									monitor.wait();
									break;
								case 2522:
									monitor.wait();
									break;
								case 2523:
									monitor.wait();
									break;
								case 2524:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2368;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2525:
									monitor.wait();
									break;
								case 2526:
									monitor.wait();
									break;
								case 2527:
									monitor.wait();
									break;
								case 2528:
									monitor.wait();
									break;
								case 2529:
									monitor.wait();
									break;
								case 2530:
									monitor.wait();
									break;
								case 2531:
									monitor.wait();
									break;
								case 2532:
									monitor.wait();
									break;
								case 2533:
									monitor.wait();
									break;
								case 2534:
									monitor.wait();
									break;
								case 2535:
									monitor.wait();
									break;
								case 2536:
									monitor.wait();
									break;
								case 2537:
									monitor.wait();
									break;
								case 2538:
									monitor.wait();
									break;
								case 2539:
									monitor.wait();
									break;
								case 2540:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2486;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								case 2541:
									monitor.wait();
									break;
								case 2542:
									monitor.wait();
									break;
								case 2543:
									monitor.wait();
									break;
								case 2544:
									monitor.wait();
									break;
								case 2545:
									monitor.wait();
									break;
								case 2546:
									if (queueFrommasterToworker_2_.peek() != null ) {
										monitor.notifyAll();
										state = 2514;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_2_.take());
									}
									monitor.wait();
									break;
								default: throw new Exception("State number out of bounds");
							}
						}
					}
					
				}
			};
			case "worker_3_": return new IEnvironment() {
				
				@Override
				public String getName(){
					return environmentName;
				}
				
				@Override
				public <Any, AnyInput> Optional<Any> exchange(Optional<AnyInput> box, String receiver, boolean isCloseAction) throws Exception{
					synchronized (monitor){
						while (true){
							switch (state){
								case 0:
									monitor.wait();
									break;
								case 1:
									monitor.wait();
									break;
								case 2:
									monitor.wait();
									break;
								case 3:
									monitor.wait();
									break;
								case 4:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2515;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 5:
									monitor.wait();
									break;
								case 6:
									monitor.wait();
									break;
								case 7:
									monitor.wait();
									break;
								case 8:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2541;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 9:
									monitor.wait();
									break;
								case 10:
									monitor.wait();
									break;
								case 11:
									monitor.wait();
									break;
								case 12:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2516;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 13:
									monitor.wait();
									break;
								case 14:
									monitor.wait();
									break;
								case 15:
									monitor.wait();
									break;
								case 16:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2517;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 17:
									monitor.wait();
									break;
								case 18:
									monitor.wait();
									break;
								case 19:
									monitor.wait();
									break;
								case 20:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2519;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 21:
									monitor.wait();
									break;
								case 22:
									monitor.wait();
									break;
								case 23:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2520;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 24:
									monitor.wait();
									break;
								case 25:
									monitor.wait();
									break;
								case 26:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1487;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 27:
									monitor.wait();
									break;
								case 28:
									monitor.wait();
									break;
								case 29:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1488;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 30:
									monitor.wait();
									break;
								case 31:
									monitor.wait();
									break;
								case 32:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1490;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 33:
									monitor.wait();
									break;
								case 34:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1491;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 35:
									monitor.wait();
									break;
								case 36:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1387;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 37:
									monitor.wait();
									break;
								case 38:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1388;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 39:
									monitor.wait();
									break;
								case 40:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1390;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 41:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 42;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 42:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 43;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 43:
									monitor.wait();
									break;
								case 44:
									monitor.wait();
									break;
								case 45:
									monitor.wait();
									break;
								case 46:
									monitor.wait();
									break;
								case 47:
									monitor.wait();
									break;
								case 48:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1361;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 49:
									monitor.wait();
									break;
								case 50:
									monitor.wait();
									break;
								case 51:
									monitor.wait();
									break;
								case 52:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1175;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 53:
									monitor.wait();
									break;
								case 54:
									monitor.wait();
									break;
								case 55:
									monitor.wait();
									break;
								case 56:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 987;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 57:
									monitor.wait();
									break;
								case 58:
									monitor.wait();
									break;
								case 59:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 712;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 60:
									monitor.wait();
									break;
								case 61:
									monitor.wait();
									break;
								case 62:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 681;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 63:
									monitor.wait();
									break;
								case 64:
									monitor.wait();
									break;
								case 65:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 650;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 66:
									monitor.wait();
									break;
								case 67:
									monitor.wait();
									break;
								case 68:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 617;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 69:
									monitor.wait();
									break;
								case 70:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 573;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 71:
									monitor.wait();
									break;
								case 72:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 569;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 73:
									monitor.wait();
									break;
								case 74:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 565;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 75:
									monitor.wait();
									break;
								case 76:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 560;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 77:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 78;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 78:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 79;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 79:
									monitor.wait();
									break;
								case 80:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 88;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 81:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 95;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 82:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 308;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 83:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 394;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 84:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 480;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 85:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 541;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 86:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 552;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 87:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 555;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 88:
									monitor.wait();
									break;
								case 89:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 101;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 90:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 204;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 91:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 246;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 92:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 286;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 93:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 296;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 94:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 299;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 95:
									monitor.wait();
									break;
								case 96:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 106;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 97:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 165;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 98:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 184;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 99:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 193;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 100:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 196;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 101:
									monitor.wait();
									break;
								case 102:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 110;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 103:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 130;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 104:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 145;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 105:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 152;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 106:
									monitor.wait();
									break;
								case 107:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 113;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 108:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 120;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 109:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 123;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 110:
									monitor.wait();
									break;
								case 111:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 115;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 112:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 117;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 113:
									monitor.wait();
									break;
								case 114:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 115:
									monitor.wait();
									break;
								case 116:
									monitor.wait();
									break;
								case 117:
									monitor.wait();
									break;
								case 118:
									monitor.wait();
									break;
								case 119:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 121;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 120:
									monitor.wait();
									break;
								case 121:
									monitor.wait();
									break;
								case 122:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 117;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 123:
									monitor.wait();
									break;
								case 124:
									monitor.wait();
									break;
								case 125:
									monitor.wait();
									break;
								case 126:
									monitor.wait();
									break;
								case 127:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 113;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 128:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 133;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 129:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 138;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 130:
									monitor.wait();
									break;
								case 131:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 115;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 132:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 135;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 133:
									monitor.wait();
									break;
								case 134:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 116;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 135:
									monitor.wait();
									break;
								case 136:
									monitor.wait();
									break;
								case 137:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 117;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 138:
									monitor.wait();
									break;
								case 139:
									monitor.wait();
									break;
								case 140:
									monitor.wait();
									break;
								case 141:
									monitor.wait();
									break;
								case 142:
									monitor.wait();
									break;
								case 143:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 120;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 144:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 147;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 145:
									monitor.wait();
									break;
								case 146:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 121;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 147:
									monitor.wait();
									break;
								case 148:
									monitor.wait();
									break;
								case 149:
									monitor.wait();
									break;
								case 150:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 123;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 151:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 138;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 152:
									monitor.wait();
									break;
								case 153:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 117;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 154:
									monitor.wait();
									break;
								case 155:
									monitor.wait();
									break;
								case 156:
									monitor.wait();
									break;
								case 157:
									monitor.wait();
									break;
								case 158:
									monitor.wait();
									break;
								case 159:
									monitor.wait();
									break;
								case 160:
									monitor.wait();
									break;
								case 161:
									monitor.wait();
									break;
								case 162:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 168;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 163:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 175;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 164:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 178;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 165:
									monitor.wait();
									break;
								case 166:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 170;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 167:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 172;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 168:
									monitor.wait();
									break;
								case 169:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 171;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 170:
									monitor.wait();
									break;
								case 171:
									monitor.wait();
									break;
								case 172:
									monitor.wait();
									break;
								case 173:
									monitor.wait();
									break;
								case 174:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 176;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 175:
									monitor.wait();
									break;
								case 176:
									monitor.wait();
									break;
								case 177:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 172;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 178:
									monitor.wait();
									break;
								case 179:
									monitor.wait();
									break;
								case 180:
									monitor.wait();
									break;
								case 181:
									monitor.wait();
									break;
								case 182:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 186;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 183:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 190;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 184:
									monitor.wait();
									break;
								case 185:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 187;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 186:
									monitor.wait();
									break;
								case 187:
									monitor.wait();
									break;
								case 188:
									monitor.wait();
									break;
								case 189:
									monitor.wait();
									break;
								case 190:
									monitor.wait();
									break;
								case 191:
									monitor.wait();
									break;
								case 192:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 194;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 193:
									monitor.wait();
									break;
								case 194:
									monitor.wait();
									break;
								case 195:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 190;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 196:
									monitor.wait();
									break;
								case 197:
									monitor.wait();
									break;
								case 198:
									monitor.wait();
									break;
								case 199:
									monitor.wait();
									break;
								case 200:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 208;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 201:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 227;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 202:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 235;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 203:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 238;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 204:
									monitor.wait();
									break;
								case 205:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 211;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 206:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 218;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 207:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 221;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 208:
									monitor.wait();
									break;
								case 209:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 213;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 210:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 215;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 211:
									monitor.wait();
									break;
								case 212:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 214;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 213:
									monitor.wait();
									break;
								case 214:
									monitor.wait();
									break;
								case 215:
									monitor.wait();
									break;
								case 216:
									monitor.wait();
									break;
								case 217:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 219;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 218:
									monitor.wait();
									break;
								case 219:
									monitor.wait();
									break;
								case 220:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 215;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 221:
									monitor.wait();
									break;
								case 222:
									monitor.wait();
									break;
								case 223:
									monitor.wait();
									break;
								case 224:
									monitor.wait();
									break;
								case 225:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 229;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 226:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 232;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 227:
									monitor.wait();
									break;
								case 228:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 230;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 229:
									monitor.wait();
									break;
								case 230:
									monitor.wait();
									break;
								case 231:
									monitor.wait();
									break;
								case 232:
									monitor.wait();
									break;
								case 233:
									monitor.wait();
									break;
								case 234:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 236;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 235:
									monitor.wait();
									break;
								case 236:
									monitor.wait();
									break;
								case 237:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 232;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 238:
									monitor.wait();
									break;
								case 239:
									monitor.wait();
									break;
								case 240:
									monitor.wait();
									break;
								case 241:
									monitor.wait();
									break;
								case 242:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 250;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 243:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 269;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 244:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 277;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 245:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 280;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 246:
									monitor.wait();
									break;
								case 247:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 253;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 248:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 260;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 249:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 263;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 250:
									monitor.wait();
									break;
								case 251:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 255;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 252:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 257;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 253:
									monitor.wait();
									break;
								case 254:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 256;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 255:
									monitor.wait();
									break;
								case 256:
									monitor.wait();
									break;
								case 257:
									monitor.wait();
									break;
								case 258:
									monitor.wait();
									break;
								case 259:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 261;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 260:
									monitor.wait();
									break;
								case 261:
									monitor.wait();
									break;
								case 262:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 257;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 263:
									monitor.wait();
									break;
								case 264:
									monitor.wait();
									break;
								case 265:
									monitor.wait();
									break;
								case 266:
									monitor.wait();
									break;
								case 267:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 271;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 268:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 274;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 269:
									monitor.wait();
									break;
								case 270:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 272;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 271:
									monitor.wait();
									break;
								case 272:
									monitor.wait();
									break;
								case 273:
									monitor.wait();
									break;
								case 274:
									monitor.wait();
									break;
								case 275:
									monitor.wait();
									break;
								case 276:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 278;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 277:
									monitor.wait();
									break;
								case 278:
									monitor.wait();
									break;
								case 279:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 274;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 280:
									monitor.wait();
									break;
								case 281:
									monitor.wait();
									break;
								case 282:
									monitor.wait();
									break;
								case 283:
									monitor.wait();
									break;
								case 284:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 288;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 285:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 293;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 286:
									monitor.wait();
									break;
								case 287:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 289;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 288:
									monitor.wait();
									break;
								case 289:
									monitor.wait();
									break;
								case 290:
									monitor.wait();
									break;
								case 291:
									monitor.wait();
									break;
								case 292:
									monitor.wait();
									break;
								case 293:
									monitor.wait();
									break;
								case 294:
									monitor.wait();
									break;
								case 295:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 297;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 296:
									monitor.wait();
									break;
								case 297:
									monitor.wait();
									break;
								case 298:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 293;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 299:
									monitor.wait();
									break;
								case 300:
									monitor.wait();
									break;
								case 301:
									monitor.wait();
									break;
								case 302:
									monitor.wait();
									break;
								case 303:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 313;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 304:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 354;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 305:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 373;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 306:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 382;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 307:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 385;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 308:
									monitor.wait();
									break;
								case 309:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 317;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 310:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 336;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 311:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 344;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 312:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 347;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 313:
									monitor.wait();
									break;
								case 314:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 320;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 315:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 327;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 316:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 330;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 317:
									monitor.wait();
									break;
								case 318:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 322;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 319:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 324;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 320:
									monitor.wait();
									break;
								case 321:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 323;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 322:
									monitor.wait();
									break;
								case 323:
									monitor.wait();
									break;
								case 324:
									monitor.wait();
									break;
								case 325:
									monitor.wait();
									break;
								case 326:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 328;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 327:
									monitor.wait();
									break;
								case 328:
									monitor.wait();
									break;
								case 329:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 324;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 330:
									monitor.wait();
									break;
								case 331:
									monitor.wait();
									break;
								case 332:
									monitor.wait();
									break;
								case 333:
									monitor.wait();
									break;
								case 334:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 338;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 335:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 341;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 336:
									monitor.wait();
									break;
								case 337:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 339;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 338:
									monitor.wait();
									break;
								case 339:
									monitor.wait();
									break;
								case 340:
									monitor.wait();
									break;
								case 341:
									monitor.wait();
									break;
								case 342:
									monitor.wait();
									break;
								case 343:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 345;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 344:
									monitor.wait();
									break;
								case 345:
									monitor.wait();
									break;
								case 346:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 341;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 347:
									monitor.wait();
									break;
								case 348:
									monitor.wait();
									break;
								case 349:
									monitor.wait();
									break;
								case 350:
									monitor.wait();
									break;
								case 351:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 357;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 352:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 364;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 353:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 367;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 354:
									monitor.wait();
									break;
								case 355:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 359;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 356:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 361;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 357:
									monitor.wait();
									break;
								case 358:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 360;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 359:
									monitor.wait();
									break;
								case 360:
									monitor.wait();
									break;
								case 361:
									monitor.wait();
									break;
								case 362:
									monitor.wait();
									break;
								case 363:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 365;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 364:
									monitor.wait();
									break;
								case 365:
									monitor.wait();
									break;
								case 366:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 361;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 367:
									monitor.wait();
									break;
								case 368:
									monitor.wait();
									break;
								case 369:
									monitor.wait();
									break;
								case 370:
									monitor.wait();
									break;
								case 371:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 375;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 372:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 379;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 373:
									monitor.wait();
									break;
								case 374:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 376;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 375:
									monitor.wait();
									break;
								case 376:
									monitor.wait();
									break;
								case 377:
									monitor.wait();
									break;
								case 378:
									monitor.wait();
									break;
								case 379:
									monitor.wait();
									break;
								case 380:
									monitor.wait();
									break;
								case 381:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 383;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 382:
									monitor.wait();
									break;
								case 383:
									monitor.wait();
									break;
								case 384:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 379;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 385:
									monitor.wait();
									break;
								case 386:
									monitor.wait();
									break;
								case 387:
									monitor.wait();
									break;
								case 388:
									monitor.wait();
									break;
								case 389:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 398;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 390:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 419;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 391:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 459;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 392:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 468;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 393:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 471;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 394:
									monitor.wait();
									break;
								case 395:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 401;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 396:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 408;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 397:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 411;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 398:
									monitor.wait();
									break;
								case 399:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 403;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 400:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 405;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 401:
									monitor.wait();
									break;
								case 402:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 404;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 403:
									monitor.wait();
									break;
								case 404:
									monitor.wait();
									break;
								case 405:
									monitor.wait();
									break;
								case 406:
									monitor.wait();
									break;
								case 407:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 409;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 408:
									monitor.wait();
									break;
								case 409:
									monitor.wait();
									break;
								case 410:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 405;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 411:
									monitor.wait();
									break;
								case 412:
									monitor.wait();
									break;
								case 413:
									monitor.wait();
									break;
								case 414:
									monitor.wait();
									break;
								case 415:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 423;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 416:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 442;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 417:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 450;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 418:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 453;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 419:
									monitor.wait();
									break;
								case 420:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 426;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 421:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 433;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 422:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 436;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 423:
									monitor.wait();
									break;
								case 424:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 428;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 425:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 430;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 426:
									monitor.wait();
									break;
								case 427:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 429;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 428:
									monitor.wait();
									break;
								case 429:
									monitor.wait();
									break;
								case 430:
									monitor.wait();
									break;
								case 431:
									monitor.wait();
									break;
								case 432:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 434;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 433:
									monitor.wait();
									break;
								case 434:
									monitor.wait();
									break;
								case 435:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 430;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 436:
									monitor.wait();
									break;
								case 437:
									monitor.wait();
									break;
								case 438:
									monitor.wait();
									break;
								case 439:
									monitor.wait();
									break;
								case 440:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 444;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 441:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 447;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 442:
									monitor.wait();
									break;
								case 443:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 445;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 444:
									monitor.wait();
									break;
								case 445:
									monitor.wait();
									break;
								case 446:
									monitor.wait();
									break;
								case 447:
									monitor.wait();
									break;
								case 448:
									monitor.wait();
									break;
								case 449:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 451;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 450:
									monitor.wait();
									break;
								case 451:
									monitor.wait();
									break;
								case 452:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 447;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 453:
									monitor.wait();
									break;
								case 454:
									monitor.wait();
									break;
								case 455:
									monitor.wait();
									break;
								case 456:
									monitor.wait();
									break;
								case 457:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 461;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 458:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 465;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 459:
									monitor.wait();
									break;
								case 460:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 462;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 461:
									monitor.wait();
									break;
								case 462:
									monitor.wait();
									break;
								case 463:
									monitor.wait();
									break;
								case 464:
									monitor.wait();
									break;
								case 465:
									monitor.wait();
									break;
								case 466:
									monitor.wait();
									break;
								case 467:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 469;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 468:
									monitor.wait();
									break;
								case 469:
									monitor.wait();
									break;
								case 470:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 465;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 471:
									monitor.wait();
									break;
								case 472:
									monitor.wait();
									break;
								case 473:
									monitor.wait();
									break;
								case 474:
									monitor.wait();
									break;
								case 475:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 484;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 476:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 504;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 477:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 523;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 478:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 532;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 479:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 535;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 480:
									monitor.wait();
									break;
								case 481:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 487;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 482:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 494;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 483:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 497;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 484:
									monitor.wait();
									break;
								case 485:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 489;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 486:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 491;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 487:
									monitor.wait();
									break;
								case 488:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 490;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 489:
									monitor.wait();
									break;
								case 490:
									monitor.wait();
									break;
								case 491:
									monitor.wait();
									break;
								case 492:
									monitor.wait();
									break;
								case 493:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 495;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 494:
									monitor.wait();
									break;
								case 495:
									monitor.wait();
									break;
								case 496:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 491;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 497:
									monitor.wait();
									break;
								case 498:
									monitor.wait();
									break;
								case 499:
									monitor.wait();
									break;
								case 500:
									monitor.wait();
									break;
								case 501:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 507;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 502:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 514;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 503:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 517;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 504:
									monitor.wait();
									break;
								case 505:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 509;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 506:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 511;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 507:
									monitor.wait();
									break;
								case 508:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 510;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 509:
									monitor.wait();
									break;
								case 510:
									monitor.wait();
									break;
								case 511:
									monitor.wait();
									break;
								case 512:
									monitor.wait();
									break;
								case 513:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 515;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 514:
									monitor.wait();
									break;
								case 515:
									monitor.wait();
									break;
								case 516:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 511;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 517:
									monitor.wait();
									break;
								case 518:
									monitor.wait();
									break;
								case 519:
									monitor.wait();
									break;
								case 520:
									monitor.wait();
									break;
								case 521:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 525;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 522:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 529;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 523:
									monitor.wait();
									break;
								case 524:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 526;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 525:
									monitor.wait();
									break;
								case 526:
									monitor.wait();
									break;
								case 527:
									monitor.wait();
									break;
								case 528:
									monitor.wait();
									break;
								case 529:
									monitor.wait();
									break;
								case 530:
									monitor.wait();
									break;
								case 531:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 533;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 532:
									monitor.wait();
									break;
								case 533:
									monitor.wait();
									break;
								case 534:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 529;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 535:
									monitor.wait();
									break;
								case 536:
									monitor.wait();
									break;
								case 537:
									monitor.wait();
									break;
								case 538:
									monitor.wait();
									break;
								case 539:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 543;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 540:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 549;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 541:
									monitor.wait();
									break;
								case 542:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 544;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 543:
									monitor.wait();
									break;
								case 544:
									monitor.wait();
									break;
								case 545:
									monitor.wait();
									break;
								case 546:
									monitor.wait();
									break;
								case 547:
									monitor.wait();
									break;
								case 548:
									monitor.wait();
									break;
								case 549:
									monitor.wait();
									break;
								case 550:
									monitor.wait();
									break;
								case 551:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 553;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 552:
									monitor.wait();
									break;
								case 553:
									monitor.wait();
									break;
								case 554:
									if (isCloseAction) {
										monitor.notifyAll();
										state = 549;
										return Optional.empty();
									}
									monitor.wait();
									break;
								case 555:
									monitor.wait();
									break;
								case 556:
									monitor.wait();
									break;
								case 557:
									monitor.wait();
									break;
								case 558:
									monitor.wait();
									break;
								case 559:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 78;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 560:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 562;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 561:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 79;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 562:
									monitor.wait();
									break;
								case 563:
									monitor.wait();
									break;
								case 564:
									monitor.wait();
									break;
								case 565:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 566;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 566:
									monitor.wait();
									break;
								case 567:
									monitor.wait();
									break;
								case 568:
									monitor.wait();
									break;
								case 569:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 570;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 570:
									monitor.wait();
									break;
								case 571:
									monitor.wait();
									break;
								case 572:
									monitor.wait();
									break;
								case 573:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 574;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 574:
									monitor.wait();
									break;
								case 575:
									monitor.wait();
									break;
								case 576:
									monitor.wait();
									break;
								case 577:
									monitor.wait();
									break;
								case 578:
									monitor.wait();
									break;
								case 579:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 609;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 580:
									monitor.wait();
									break;
								case 581:
									monitor.wait();
									break;
								case 582:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 601;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 583:
									monitor.wait();
									break;
								case 584:
									monitor.wait();
									break;
								case 585:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 592;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 586:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 587;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 587:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 588;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 588:
									monitor.wait();
									break;
								case 589:
									monitor.wait();
									break;
								case 590:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 560;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 591:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 587;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 592:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 595;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 593:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 562;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 594:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 588;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 595:
									monitor.wait();
									break;
								case 596:
									monitor.wait();
									break;
								case 597:
									monitor.wait();
									break;
								case 598:
									monitor.wait();
									break;
								case 599:
									monitor.wait();
									break;
								case 600:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 565;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 601:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 603;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 602:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 566;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 603:
									monitor.wait();
									break;
								case 604:
									monitor.wait();
									break;
								case 605:
									monitor.wait();
									break;
								case 606:
									monitor.wait();
									break;
								case 607:
									monitor.wait();
									break;
								case 608:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 569;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 609:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 611;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 610:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 570;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 611:
									monitor.wait();
									break;
								case 612:
									monitor.wait();
									break;
								case 613:
									monitor.wait();
									break;
								case 614:
									monitor.wait();
									break;
								case 615:
									monitor.wait();
									break;
								case 616:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 573;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 617:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 619;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 618:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 574;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 619:
									monitor.wait();
									break;
								case 620:
									monitor.wait();
									break;
								case 621:
									monitor.wait();
									break;
								case 622:
									monitor.wait();
									break;
								case 623:
									monitor.wait();
									break;
								case 624:
									monitor.wait();
									break;
								case 625:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 646;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 626:
									monitor.wait();
									break;
								case 627:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 642;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 628:
									monitor.wait();
									break;
								case 629:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 637;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 630:
									monitor.wait();
									break;
								case 631:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 632;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 632:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 633;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 633:
									monitor.wait();
									break;
								case 634:
									monitor.wait();
									break;
								case 635:
									monitor.wait();
									break;
								case 636:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 632;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 637:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 639;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 638:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 633;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 639:
									monitor.wait();
									break;
								case 640:
									monitor.wait();
									break;
								case 641:
									monitor.wait();
									break;
								case 642:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 643;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 643:
									monitor.wait();
									break;
								case 644:
									monitor.wait();
									break;
								case 645:
									monitor.wait();
									break;
								case 646:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 647;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 647:
									monitor.wait();
									break;
								case 648:
									monitor.wait();
									break;
								case 649:
									monitor.wait();
									break;
								case 650:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 651;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 651:
									monitor.wait();
									break;
								case 652:
									monitor.wait();
									break;
								case 653:
									monitor.wait();
									break;
								case 654:
									monitor.wait();
									break;
								case 655:
									monitor.wait();
									break;
								case 656:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 677;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 657:
									monitor.wait();
									break;
								case 658:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 673;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 659:
									monitor.wait();
									break;
								case 660:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 668;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 661:
									monitor.wait();
									break;
								case 662:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 663;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 663:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 664;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 664:
									monitor.wait();
									break;
								case 665:
									monitor.wait();
									break;
								case 666:
									monitor.wait();
									break;
								case 667:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 663;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 668:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 670;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 669:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 664;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 670:
									monitor.wait();
									break;
								case 671:
									monitor.wait();
									break;
								case 672:
									monitor.wait();
									break;
								case 673:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 674;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 674:
									monitor.wait();
									break;
								case 675:
									monitor.wait();
									break;
								case 676:
									monitor.wait();
									break;
								case 677:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 678;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 678:
									monitor.wait();
									break;
								case 679:
									monitor.wait();
									break;
								case 680:
									monitor.wait();
									break;
								case 681:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 682;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 682:
									monitor.wait();
									break;
								case 683:
									monitor.wait();
									break;
								case 684:
									monitor.wait();
									break;
								case 685:
									monitor.wait();
									break;
								case 686:
									monitor.wait();
									break;
								case 687:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 708;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 688:
									monitor.wait();
									break;
								case 689:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 704;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 690:
									monitor.wait();
									break;
								case 691:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 699;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 692:
									monitor.wait();
									break;
								case 693:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 694;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 694:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 695;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 695:
									monitor.wait();
									break;
								case 696:
									monitor.wait();
									break;
								case 697:
									monitor.wait();
									break;
								case 698:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 694;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 699:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 701;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 700:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 695;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 701:
									monitor.wait();
									break;
								case 702:
									monitor.wait();
									break;
								case 703:
									monitor.wait();
									break;
								case 704:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 705;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 705:
									monitor.wait();
									break;
								case 706:
									monitor.wait();
									break;
								case 707:
									monitor.wait();
									break;
								case 708:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 709;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 709:
									monitor.wait();
									break;
								case 710:
									monitor.wait();
									break;
								case 711:
									monitor.wait();
									break;
								case 712:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 713;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 713:
									monitor.wait();
									break;
								case 714:
									monitor.wait();
									break;
								case 715:
									monitor.wait();
									break;
								case 716:
									monitor.wait();
									break;
								case 717:
									monitor.wait();
									break;
								case 718:
									monitor.wait();
									break;
								case 719:
									monitor.wait();
									break;
								case 720:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 932;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 721:
									monitor.wait();
									break;
								case 722:
									monitor.wait();
									break;
								case 723:
									monitor.wait();
									break;
								case 724:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 877;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 725:
									monitor.wait();
									break;
								case 726:
									monitor.wait();
									break;
								case 727:
									monitor.wait();
									break;
								case 728:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 820;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 729:
									monitor.wait();
									break;
								case 730:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 755;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 731:
									monitor.wait();
									break;
								case 732:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 751;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 733:
									monitor.wait();
									break;
								case 734:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 747;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 735:
									monitor.wait();
									break;
								case 736:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 742;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 737:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 738;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 738:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 739;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 739:
									monitor.wait();
									break;
								case 740:
									monitor.wait();
									break;
								case 741:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 738;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 742:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 744;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 743:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 739;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 744:
									monitor.wait();
									break;
								case 745:
									monitor.wait();
									break;
								case 746:
									monitor.wait();
									break;
								case 747:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 748;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 748:
									monitor.wait();
									break;
								case 749:
									monitor.wait();
									break;
								case 750:
									monitor.wait();
									break;
								case 751:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 752;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 752:
									monitor.wait();
									break;
								case 753:
									monitor.wait();
									break;
								case 754:
									monitor.wait();
									break;
								case 755:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 756;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 756:
									monitor.wait();
									break;
								case 757:
									monitor.wait();
									break;
								case 758:
									monitor.wait();
									break;
								case 759:
									monitor.wait();
									break;
								case 760:
									monitor.wait();
									break;
								case 761:
									monitor.wait();
									break;
								case 762:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 808;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 763:
									monitor.wait();
									break;
								case 764:
									monitor.wait();
									break;
								case 765:
									monitor.wait();
									break;
								case 766:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 796;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 767:
									monitor.wait();
									break;
								case 768:
									monitor.wait();
									break;
								case 769:
									monitor.wait();
									break;
								case 770:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 783;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 771:
									monitor.wait();
									break;
								case 772:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 774;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 773:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 587;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 774:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 776;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 775:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 588;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 776:
									monitor.wait();
									break;
								case 777:
									monitor.wait();
									break;
								case 778:
									monitor.wait();
									break;
								case 779:
									monitor.wait();
									break;
								case 780:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 592;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 781:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 742;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 782:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 774;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 783:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 787;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 784:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 595;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 785:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 744;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 786:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 776;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 787:
									monitor.wait();
									break;
								case 788:
									monitor.wait();
									break;
								case 789:
									monitor.wait();
									break;
								case 790:
									monitor.wait();
									break;
								case 791:
									monitor.wait();
									break;
								case 792:
									monitor.wait();
									break;
								case 793:
									monitor.wait();
									break;
								case 794:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 601;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 795:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 747;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 796:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 799;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 797:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 603;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 798:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 748;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 799:
									monitor.wait();
									break;
								case 800:
									monitor.wait();
									break;
								case 801:
									monitor.wait();
									break;
								case 802:
									monitor.wait();
									break;
								case 803:
									monitor.wait();
									break;
								case 804:
									monitor.wait();
									break;
								case 805:
									monitor.wait();
									break;
								case 806:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 609;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 807:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 751;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 808:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 811;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 809:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 611;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 810:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 752;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 811:
									monitor.wait();
									break;
								case 812:
									monitor.wait();
									break;
								case 813:
									monitor.wait();
									break;
								case 814:
									monitor.wait();
									break;
								case 815:
									monitor.wait();
									break;
								case 816:
									monitor.wait();
									break;
								case 817:
									monitor.wait();
									break;
								case 818:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 617;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 819:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 755;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 820:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 823;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 821:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 619;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 822:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 756;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 823:
									monitor.wait();
									break;
								case 824:
									monitor.wait();
									break;
								case 825:
									monitor.wait();
									break;
								case 826:
									monitor.wait();
									break;
								case 827:
									monitor.wait();
									break;
								case 828:
									monitor.wait();
									break;
								case 829:
									monitor.wait();
									break;
								case 830:
									monitor.wait();
									break;
								case 831:
									monitor.wait();
									break;
								case 832:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 869;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 833:
									monitor.wait();
									break;
								case 834:
									monitor.wait();
									break;
								case 835:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 861;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 836:
									monitor.wait();
									break;
								case 837:
									monitor.wait();
									break;
								case 838:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 852;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 839:
									monitor.wait();
									break;
								case 840:
									monitor.wait();
									break;
								case 841:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 843;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 842:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 632;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 843:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 845;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 844:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 633;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 845:
									monitor.wait();
									break;
								case 846:
									monitor.wait();
									break;
								case 847:
									monitor.wait();
									break;
								case 848:
									monitor.wait();
									break;
								case 849:
									monitor.wait();
									break;
								case 850:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 637;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 851:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 843;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 852:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 855;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 853:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 639;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 854:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 845;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 855:
									monitor.wait();
									break;
								case 856:
									monitor.wait();
									break;
								case 857:
									monitor.wait();
									break;
								case 858:
									monitor.wait();
									break;
								case 859:
									monitor.wait();
									break;
								case 860:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 642;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 861:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 863;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 862:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 643;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 863:
									monitor.wait();
									break;
								case 864:
									monitor.wait();
									break;
								case 865:
									monitor.wait();
									break;
								case 866:
									monitor.wait();
									break;
								case 867:
									monitor.wait();
									break;
								case 868:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 646;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 869:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 871;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 870:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 647;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 871:
									monitor.wait();
									break;
								case 872:
									monitor.wait();
									break;
								case 873:
									monitor.wait();
									break;
								case 874:
									monitor.wait();
									break;
								case 875:
									monitor.wait();
									break;
								case 876:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 650;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 877:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 879;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 878:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 651;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 879:
									monitor.wait();
									break;
								case 880:
									monitor.wait();
									break;
								case 881:
									monitor.wait();
									break;
								case 882:
									monitor.wait();
									break;
								case 883:
									monitor.wait();
									break;
								case 884:
									monitor.wait();
									break;
								case 885:
									monitor.wait();
									break;
								case 886:
									monitor.wait();
									break;
								case 887:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 924;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 888:
									monitor.wait();
									break;
								case 889:
									monitor.wait();
									break;
								case 890:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 916;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 891:
									monitor.wait();
									break;
								case 892:
									monitor.wait();
									break;
								case 893:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 907;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 894:
									monitor.wait();
									break;
								case 895:
									monitor.wait();
									break;
								case 896:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 898;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 897:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 663;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 898:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 900;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 899:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 664;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 900:
									monitor.wait();
									break;
								case 901:
									monitor.wait();
									break;
								case 902:
									monitor.wait();
									break;
								case 903:
									monitor.wait();
									break;
								case 904:
									monitor.wait();
									break;
								case 905:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 668;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 906:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 898;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 907:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 910;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 908:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 670;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 909:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 900;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 910:
									monitor.wait();
									break;
								case 911:
									monitor.wait();
									break;
								case 912:
									monitor.wait();
									break;
								case 913:
									monitor.wait();
									break;
								case 914:
									monitor.wait();
									break;
								case 915:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 673;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 916:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 918;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 917:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 674;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 918:
									monitor.wait();
									break;
								case 919:
									monitor.wait();
									break;
								case 920:
									monitor.wait();
									break;
								case 921:
									monitor.wait();
									break;
								case 922:
									monitor.wait();
									break;
								case 923:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 677;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 924:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 926;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 925:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 678;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 926:
									monitor.wait();
									break;
								case 927:
									monitor.wait();
									break;
								case 928:
									monitor.wait();
									break;
								case 929:
									monitor.wait();
									break;
								case 930:
									monitor.wait();
									break;
								case 931:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 681;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 932:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 934;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 933:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 682;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 934:
									monitor.wait();
									break;
								case 935:
									monitor.wait();
									break;
								case 936:
									monitor.wait();
									break;
								case 937:
									monitor.wait();
									break;
								case 938:
									monitor.wait();
									break;
								case 939:
									monitor.wait();
									break;
								case 940:
									monitor.wait();
									break;
								case 941:
									monitor.wait();
									break;
								case 942:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 979;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 943:
									monitor.wait();
									break;
								case 944:
									monitor.wait();
									break;
								case 945:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 971;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 946:
									monitor.wait();
									break;
								case 947:
									monitor.wait();
									break;
								case 948:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 962;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 949:
									monitor.wait();
									break;
								case 950:
									monitor.wait();
									break;
								case 951:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 953;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 952:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 694;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 953:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 955;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 954:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 695;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 955:
									monitor.wait();
									break;
								case 956:
									monitor.wait();
									break;
								case 957:
									monitor.wait();
									break;
								case 958:
									monitor.wait();
									break;
								case 959:
									monitor.wait();
									break;
								case 960:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 699;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 961:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 953;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 962:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 965;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 963:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 701;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 964:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 955;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 965:
									monitor.wait();
									break;
								case 966:
									monitor.wait();
									break;
								case 967:
									monitor.wait();
									break;
								case 968:
									monitor.wait();
									break;
								case 969:
									monitor.wait();
									break;
								case 970:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 704;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 971:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 973;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 972:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 705;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 973:
									monitor.wait();
									break;
								case 974:
									monitor.wait();
									break;
								case 975:
									monitor.wait();
									break;
								case 976:
									monitor.wait();
									break;
								case 977:
									monitor.wait();
									break;
								case 978:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 708;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 979:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 981;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 980:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 709;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 981:
									monitor.wait();
									break;
								case 982:
									monitor.wait();
									break;
								case 983:
									monitor.wait();
									break;
								case 984:
									monitor.wait();
									break;
								case 985:
									monitor.wait();
									break;
								case 986:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 712;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 987:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 989;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 988:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 713;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 989:
									monitor.wait();
									break;
								case 990:
									monitor.wait();
									break;
								case 991:
									monitor.wait();
									break;
								case 992:
									monitor.wait();
									break;
								case 993:
									monitor.wait();
									break;
								case 994:
									monitor.wait();
									break;
								case 995:
									monitor.wait();
									break;
								case 996:
									monitor.wait();
									break;
								case 997:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1142;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 998:
									monitor.wait();
									break;
								case 999:
									monitor.wait();
									break;
								case 1000:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1111;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1001:
									monitor.wait();
									break;
								case 1002:
									monitor.wait();
									break;
								case 1003:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1078;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1004:
									monitor.wait();
									break;
								case 1005:
									monitor.wait();
									break;
								case 1006:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1033;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1007:
									monitor.wait();
									break;
								case 1008:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1029;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1009:
									monitor.wait();
									break;
								case 1010:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1025;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1011:
									monitor.wait();
									break;
								case 1012:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1020;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1013:
									monitor.wait();
									break;
								case 1014:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1015;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1015:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1016;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1016:
									monitor.wait();
									break;
								case 1017:
									monitor.wait();
									break;
								case 1018:
									monitor.wait();
									break;
								case 1019:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1015;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1020:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1022;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1021:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1016;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1022:
									monitor.wait();
									break;
								case 1023:
									monitor.wait();
									break;
								case 1024:
									monitor.wait();
									break;
								case 1025:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1026;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1026:
									monitor.wait();
									break;
								case 1027:
									monitor.wait();
									break;
								case 1028:
									monitor.wait();
									break;
								case 1029:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1030;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1030:
									monitor.wait();
									break;
								case 1031:
									monitor.wait();
									break;
								case 1032:
									monitor.wait();
									break;
								case 1033:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1034;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1034:
									monitor.wait();
									break;
								case 1035:
									monitor.wait();
									break;
								case 1036:
									monitor.wait();
									break;
								case 1037:
									monitor.wait();
									break;
								case 1038:
									monitor.wait();
									break;
								case 1039:
									monitor.wait();
									break;
								case 1040:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1070;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1041:
									monitor.wait();
									break;
								case 1042:
									monitor.wait();
									break;
								case 1043:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1062;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1044:
									monitor.wait();
									break;
								case 1045:
									monitor.wait();
									break;
								case 1046:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1053;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1047:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1048;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1048:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1049;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1049:
									monitor.wait();
									break;
								case 1050:
									monitor.wait();
									break;
								case 1051:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1020;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1052:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1048;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1053:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1056;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1054:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1022;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1055:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1049;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1056:
									monitor.wait();
									break;
								case 1057:
									monitor.wait();
									break;
								case 1058:
									monitor.wait();
									break;
								case 1059:
									monitor.wait();
									break;
								case 1060:
									monitor.wait();
									break;
								case 1061:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1025;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1062:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1064;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1063:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1026;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1064:
									monitor.wait();
									break;
								case 1065:
									monitor.wait();
									break;
								case 1066:
									monitor.wait();
									break;
								case 1067:
									monitor.wait();
									break;
								case 1068:
									monitor.wait();
									break;
								case 1069:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1029;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1070:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1072;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1071:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1030;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1072:
									monitor.wait();
									break;
								case 1073:
									monitor.wait();
									break;
								case 1074:
									monitor.wait();
									break;
								case 1075:
									monitor.wait();
									break;
								case 1076:
									monitor.wait();
									break;
								case 1077:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1033;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1078:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1080;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1079:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1034;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1080:
									monitor.wait();
									break;
								case 1081:
									monitor.wait();
									break;
								case 1082:
									monitor.wait();
									break;
								case 1083:
									monitor.wait();
									break;
								case 1084:
									monitor.wait();
									break;
								case 1085:
									monitor.wait();
									break;
								case 1086:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1107;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1087:
									monitor.wait();
									break;
								case 1088:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1103;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1089:
									monitor.wait();
									break;
								case 1090:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1098;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1091:
									monitor.wait();
									break;
								case 1092:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1093;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1093:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1094;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1094:
									monitor.wait();
									break;
								case 1095:
									monitor.wait();
									break;
								case 1096:
									monitor.wait();
									break;
								case 1097:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1093;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1098:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1100;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1099:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1094;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1100:
									monitor.wait();
									break;
								case 1101:
									monitor.wait();
									break;
								case 1102:
									monitor.wait();
									break;
								case 1103:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1104;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1104:
									monitor.wait();
									break;
								case 1105:
									monitor.wait();
									break;
								case 1106:
									monitor.wait();
									break;
								case 1107:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1108;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1108:
									monitor.wait();
									break;
								case 1109:
									monitor.wait();
									break;
								case 1110:
									monitor.wait();
									break;
								case 1111:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1112;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1112:
									monitor.wait();
									break;
								case 1113:
									monitor.wait();
									break;
								case 1114:
									monitor.wait();
									break;
								case 1115:
									monitor.wait();
									break;
								case 1116:
									monitor.wait();
									break;
								case 1117:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1138;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1118:
									monitor.wait();
									break;
								case 1119:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1134;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1120:
									monitor.wait();
									break;
								case 1121:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1129;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1122:
									monitor.wait();
									break;
								case 1123:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1124;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1124:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1125;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1125:
									monitor.wait();
									break;
								case 1126:
									monitor.wait();
									break;
								case 1127:
									monitor.wait();
									break;
								case 1128:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1124;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1129:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1131;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1130:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1125;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1131:
									monitor.wait();
									break;
								case 1132:
									monitor.wait();
									break;
								case 1133:
									monitor.wait();
									break;
								case 1134:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1135;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1135:
									monitor.wait();
									break;
								case 1136:
									monitor.wait();
									break;
								case 1137:
									monitor.wait();
									break;
								case 1138:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1139;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1139:
									monitor.wait();
									break;
								case 1140:
									monitor.wait();
									break;
								case 1141:
									monitor.wait();
									break;
								case 1142:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1143;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1143:
									monitor.wait();
									break;
								case 1144:
									monitor.wait();
									break;
								case 1145:
									monitor.wait();
									break;
								case 1146:
									monitor.wait();
									break;
								case 1147:
									monitor.wait();
									break;
								case 1148:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1171;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1149:
									monitor.wait();
									break;
								case 1150:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1167;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1151:
									monitor.wait();
									break;
								case 1152:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1162;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1153:
									monitor.wait();
									break;
								case 1154:
									monitor.wait();
									break;
								case 1155:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1156;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1156:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1157;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1157:
									monitor.wait();
									break;
								case 1158:
									monitor.wait();
									break;
								case 1159:
									monitor.wait();
									break;
								case 1160:
									monitor.wait();
									break;
								case 1161:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1156;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1162:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1164;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1163:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1157;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1164:
									monitor.wait();
									break;
								case 1165:
									monitor.wait();
									break;
								case 1166:
									monitor.wait();
									break;
								case 1167:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1168;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1168:
									monitor.wait();
									break;
								case 1169:
									monitor.wait();
									break;
								case 1170:
									monitor.wait();
									break;
								case 1171:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1172;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1172:
									monitor.wait();
									break;
								case 1173:
									monitor.wait();
									break;
								case 1174:
									monitor.wait();
									break;
								case 1175:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1176;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1176:
									monitor.wait();
									break;
								case 1177:
									monitor.wait();
									break;
								case 1178:
									monitor.wait();
									break;
								case 1179:
									monitor.wait();
									break;
								case 1180:
									monitor.wait();
									break;
								case 1181:
									monitor.wait();
									break;
								case 1182:
									monitor.wait();
									break;
								case 1183:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1328;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1184:
									monitor.wait();
									break;
								case 1185:
									monitor.wait();
									break;
								case 1186:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1297;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1187:
									monitor.wait();
									break;
								case 1188:
									monitor.wait();
									break;
								case 1189:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1264;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1190:
									monitor.wait();
									break;
								case 1191:
									monitor.wait();
									break;
								case 1192:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1219;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1193:
									monitor.wait();
									break;
								case 1194:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1215;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1195:
									monitor.wait();
									break;
								case 1196:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1211;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1197:
									monitor.wait();
									break;
								case 1198:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1206;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1199:
									monitor.wait();
									break;
								case 1200:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1201;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1201:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1202;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1202:
									monitor.wait();
									break;
								case 1203:
									monitor.wait();
									break;
								case 1204:
									monitor.wait();
									break;
								case 1205:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1201;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1206:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1208;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1207:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1202;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1208:
									monitor.wait();
									break;
								case 1209:
									monitor.wait();
									break;
								case 1210:
									monitor.wait();
									break;
								case 1211:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1212;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1212:
									monitor.wait();
									break;
								case 1213:
									monitor.wait();
									break;
								case 1214:
									monitor.wait();
									break;
								case 1215:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1216;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1216:
									monitor.wait();
									break;
								case 1217:
									monitor.wait();
									break;
								case 1218:
									monitor.wait();
									break;
								case 1219:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1220;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1220:
									monitor.wait();
									break;
								case 1221:
									monitor.wait();
									break;
								case 1222:
									monitor.wait();
									break;
								case 1223:
									monitor.wait();
									break;
								case 1224:
									monitor.wait();
									break;
								case 1225:
									monitor.wait();
									break;
								case 1226:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1256;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1227:
									monitor.wait();
									break;
								case 1228:
									monitor.wait();
									break;
								case 1229:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1248;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1230:
									monitor.wait();
									break;
								case 1231:
									monitor.wait();
									break;
								case 1232:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1239;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1233:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1234;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1234:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1235;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1235:
									monitor.wait();
									break;
								case 1236:
									monitor.wait();
									break;
								case 1237:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1206;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1238:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1234;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1239:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1242;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1240:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1208;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1241:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1235;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1242:
									monitor.wait();
									break;
								case 1243:
									monitor.wait();
									break;
								case 1244:
									monitor.wait();
									break;
								case 1245:
									monitor.wait();
									break;
								case 1246:
									monitor.wait();
									break;
								case 1247:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1211;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1248:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1250;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1249:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1212;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1250:
									monitor.wait();
									break;
								case 1251:
									monitor.wait();
									break;
								case 1252:
									monitor.wait();
									break;
								case 1253:
									monitor.wait();
									break;
								case 1254:
									monitor.wait();
									break;
								case 1255:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1215;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1256:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1258;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1257:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1216;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1258:
									monitor.wait();
									break;
								case 1259:
									monitor.wait();
									break;
								case 1260:
									monitor.wait();
									break;
								case 1261:
									monitor.wait();
									break;
								case 1262:
									monitor.wait();
									break;
								case 1263:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1219;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1264:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1266;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1265:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1220;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1266:
									monitor.wait();
									break;
								case 1267:
									monitor.wait();
									break;
								case 1268:
									monitor.wait();
									break;
								case 1269:
									monitor.wait();
									break;
								case 1270:
									monitor.wait();
									break;
								case 1271:
									monitor.wait();
									break;
								case 1272:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1293;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1273:
									monitor.wait();
									break;
								case 1274:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1289;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1275:
									monitor.wait();
									break;
								case 1276:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1284;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1277:
									monitor.wait();
									break;
								case 1278:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1279;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1279:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1280;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1280:
									monitor.wait();
									break;
								case 1281:
									monitor.wait();
									break;
								case 1282:
									monitor.wait();
									break;
								case 1283:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1279;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1284:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1286;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1285:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1280;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1286:
									monitor.wait();
									break;
								case 1287:
									monitor.wait();
									break;
								case 1288:
									monitor.wait();
									break;
								case 1289:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1290;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1290:
									monitor.wait();
									break;
								case 1291:
									monitor.wait();
									break;
								case 1292:
									monitor.wait();
									break;
								case 1293:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1294;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1294:
									monitor.wait();
									break;
								case 1295:
									monitor.wait();
									break;
								case 1296:
									monitor.wait();
									break;
								case 1297:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1298;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1298:
									monitor.wait();
									break;
								case 1299:
									monitor.wait();
									break;
								case 1300:
									monitor.wait();
									break;
								case 1301:
									monitor.wait();
									break;
								case 1302:
									monitor.wait();
									break;
								case 1303:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1324;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1304:
									monitor.wait();
									break;
								case 1305:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1320;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1306:
									monitor.wait();
									break;
								case 1307:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1315;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1308:
									monitor.wait();
									break;
								case 1309:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1310;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1310:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1311;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1311:
									monitor.wait();
									break;
								case 1312:
									monitor.wait();
									break;
								case 1313:
									monitor.wait();
									break;
								case 1314:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1310;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1315:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1317;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1316:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1311;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1317:
									monitor.wait();
									break;
								case 1318:
									monitor.wait();
									break;
								case 1319:
									monitor.wait();
									break;
								case 1320:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1321;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1321:
									monitor.wait();
									break;
								case 1322:
									monitor.wait();
									break;
								case 1323:
									monitor.wait();
									break;
								case 1324:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1325;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1325:
									monitor.wait();
									break;
								case 1326:
									monitor.wait();
									break;
								case 1327:
									monitor.wait();
									break;
								case 1328:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1329;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1329:
									monitor.wait();
									break;
								case 1330:
									monitor.wait();
									break;
								case 1331:
									monitor.wait();
									break;
								case 1332:
									monitor.wait();
									break;
								case 1333:
									monitor.wait();
									break;
								case 1334:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1357;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1335:
									monitor.wait();
									break;
								case 1336:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1353;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1337:
									monitor.wait();
									break;
								case 1338:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1348;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1339:
									monitor.wait();
									break;
								case 1340:
									monitor.wait();
									break;
								case 1341:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1342;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1342:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1343;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1343:
									monitor.wait();
									break;
								case 1344:
									monitor.wait();
									break;
								case 1345:
									monitor.wait();
									break;
								case 1346:
									monitor.wait();
									break;
								case 1347:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1342;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1348:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1350;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1349:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1343;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1350:
									monitor.wait();
									break;
								case 1351:
									monitor.wait();
									break;
								case 1352:
									monitor.wait();
									break;
								case 1353:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1354;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1354:
									monitor.wait();
									break;
								case 1355:
									monitor.wait();
									break;
								case 1356:
									monitor.wait();
									break;
								case 1357:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1358;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1358:
									monitor.wait();
									break;
								case 1359:
									monitor.wait();
									break;
								case 1360:
									monitor.wait();
									break;
								case 1361:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1362;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1362:
									monitor.wait();
									break;
								case 1363:
									monitor.wait();
									break;
								case 1364:
									monitor.wait();
									break;
								case 1365:
									monitor.wait();
									break;
								case 1366:
									monitor.wait();
									break;
								case 1367:
									monitor.wait();
									break;
								case 1368:
									monitor.wait();
									break;
								case 1369:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2176;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1370:
									monitor.wait();
									break;
								case 1371:
									monitor.wait();
									break;
								case 1372:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2024;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1373:
									monitor.wait();
									break;
								case 1374:
									monitor.wait();
									break;
								case 1375:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1872;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1376:
									monitor.wait();
									break;
								case 1377:
									monitor.wait();
									break;
								case 1378:
									monitor.wait();
									break;
								case 1379:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1718;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1380:
									monitor.wait();
									break;
								case 1381:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1482;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1382:
									monitor.wait();
									break;
								case 1383:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1457;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1384:
									monitor.wait();
									break;
								case 1385:
									monitor.wait();
									break;
								case 1386:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1430;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1387:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1398;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1388:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1395;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1389:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 42;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1390:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1392;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1391:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 43;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1392:
									monitor.wait();
									break;
								case 1393:
									monitor.wait();
									break;
								case 1394:
									monitor.wait();
									break;
								case 1395:
									monitor.wait();
									break;
								case 1396:
									monitor.wait();
									break;
								case 1397:
									monitor.wait();
									break;
								case 1398:
									monitor.wait();
									break;
								case 1399:
									monitor.wait();
									break;
								case 1400:
									monitor.wait();
									break;
								case 1401:
									monitor.wait();
									break;
								case 1402:
									monitor.wait();
									break;
								case 1403:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1422;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1404:
									monitor.wait();
									break;
								case 1405:
									monitor.wait();
									break;
								case 1406:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1413;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1407:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1408;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1408:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1409;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1409:
									monitor.wait();
									break;
								case 1410:
									monitor.wait();
									break;
								case 1411:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1390;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1412:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1408;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1413:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1416;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1414:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1392;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1415:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1409;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1416:
									monitor.wait();
									break;
								case 1417:
									monitor.wait();
									break;
								case 1418:
									monitor.wait();
									break;
								case 1419:
									monitor.wait();
									break;
								case 1420:
									monitor.wait();
									break;
								case 1421:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1388;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1422:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1424;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1423:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1395;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1424:
									monitor.wait();
									break;
								case 1425:
									monitor.wait();
									break;
								case 1426:
									monitor.wait();
									break;
								case 1427:
									monitor.wait();
									break;
								case 1428:
									monitor.wait();
									break;
								case 1429:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1387;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1430:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1432;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1431:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1398;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1432:
									monitor.wait();
									break;
								case 1433:
									monitor.wait();
									break;
								case 1434:
									monitor.wait();
									break;
								case 1435:
									monitor.wait();
									break;
								case 1436:
									monitor.wait();
									break;
								case 1437:
									monitor.wait();
									break;
								case 1438:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1453;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1439:
									monitor.wait();
									break;
								case 1440:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1448;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1441:
									monitor.wait();
									break;
								case 1442:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1443;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1443:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1444;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1444:
									monitor.wait();
									break;
								case 1445:
									monitor.wait();
									break;
								case 1446:
									monitor.wait();
									break;
								case 1447:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1443;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1448:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1450;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1449:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1444;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1450:
									monitor.wait();
									break;
								case 1451:
									monitor.wait();
									break;
								case 1452:
									monitor.wait();
									break;
								case 1453:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1454;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1454:
									monitor.wait();
									break;
								case 1455:
									monitor.wait();
									break;
								case 1456:
									monitor.wait();
									break;
								case 1457:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1458;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1458:
									monitor.wait();
									break;
								case 1459:
									monitor.wait();
									break;
								case 1460:
									monitor.wait();
									break;
								case 1461:
									monitor.wait();
									break;
								case 1462:
									monitor.wait();
									break;
								case 1463:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1478;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1464:
									monitor.wait();
									break;
								case 1465:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1473;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1466:
									monitor.wait();
									break;
								case 1467:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1468;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1468:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1469;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1469:
									monitor.wait();
									break;
								case 1470:
									monitor.wait();
									break;
								case 1471:
									monitor.wait();
									break;
								case 1472:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1468;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1473:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1475;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1474:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1469;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1475:
									monitor.wait();
									break;
								case 1476:
									monitor.wait();
									break;
								case 1477:
									monitor.wait();
									break;
								case 1478:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1479;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1479:
									monitor.wait();
									break;
								case 1480:
									monitor.wait();
									break;
								case 1481:
									monitor.wait();
									break;
								case 1482:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1483;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1483:
									monitor.wait();
									break;
								case 1484:
									monitor.wait();
									break;
								case 1485:
									monitor.wait();
									break;
								case 1486:
									monitor.wait();
									break;
								case 1487:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1503;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1488:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1500;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1489:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1491;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1490:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1496;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1491:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1492;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1492:
									monitor.wait();
									break;
								case 1493:
									monitor.wait();
									break;
								case 1494:
									monitor.wait();
									break;
								case 1495:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1492;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1496:
									monitor.wait();
									break;
								case 1497:
									monitor.wait();
									break;
								case 1498:
									monitor.wait();
									break;
								case 1499:
									monitor.wait();
									break;
								case 1500:
									monitor.wait();
									break;
								case 1501:
									monitor.wait();
									break;
								case 1502:
									monitor.wait();
									break;
								case 1503:
									monitor.wait();
									break;
								case 1504:
									monitor.wait();
									break;
								case 1505:
									monitor.wait();
									break;
								case 1506:
									monitor.wait();
									break;
								case 1507:
									monitor.wait();
									break;
								case 1508:
									monitor.wait();
									break;
								case 1509:
									monitor.wait();
									break;
								case 1510:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1663;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1511:
									monitor.wait();
									break;
								case 1512:
									monitor.wait();
									break;
								case 1513:
									monitor.wait();
									break;
								case 1514:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1606;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1515:
									monitor.wait();
									break;
								case 1516:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1541;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1517:
									monitor.wait();
									break;
								case 1518:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1537;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1519:
									monitor.wait();
									break;
								case 1520:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1533;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1521:
									monitor.wait();
									break;
								case 1522:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1528;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1523:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1524;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1524:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1525;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1525:
									monitor.wait();
									break;
								case 1526:
									monitor.wait();
									break;
								case 1527:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1524;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1528:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1530;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1529:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1525;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1530:
									monitor.wait();
									break;
								case 1531:
									monitor.wait();
									break;
								case 1532:
									monitor.wait();
									break;
								case 1533:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1534;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1534:
									monitor.wait();
									break;
								case 1535:
									monitor.wait();
									break;
								case 1536:
									monitor.wait();
									break;
								case 1537:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1538;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1538:
									monitor.wait();
									break;
								case 1539:
									monitor.wait();
									break;
								case 1540:
									monitor.wait();
									break;
								case 1541:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1542;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1542:
									monitor.wait();
									break;
								case 1543:
									monitor.wait();
									break;
								case 1544:
									monitor.wait();
									break;
								case 1545:
									monitor.wait();
									break;
								case 1546:
									monitor.wait();
									break;
								case 1547:
									monitor.wait();
									break;
								case 1548:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1594;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1549:
									monitor.wait();
									break;
								case 1550:
									monitor.wait();
									break;
								case 1551:
									monitor.wait();
									break;
								case 1552:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1582;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1553:
									monitor.wait();
									break;
								case 1554:
									monitor.wait();
									break;
								case 1555:
									monitor.wait();
									break;
								case 1556:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1569;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1557:
									monitor.wait();
									break;
								case 1558:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1560;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1559:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1408;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1560:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1562;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1561:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1409;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1562:
									monitor.wait();
									break;
								case 1563:
									monitor.wait();
									break;
								case 1564:
									monitor.wait();
									break;
								case 1565:
									monitor.wait();
									break;
								case 1566:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1413;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1567:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1528;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1568:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1560;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1569:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1573;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1570:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1416;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1571:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1530;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1572:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1562;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1573:
									monitor.wait();
									break;
								case 1574:
									monitor.wait();
									break;
								case 1575:
									monitor.wait();
									break;
								case 1576:
									monitor.wait();
									break;
								case 1577:
									monitor.wait();
									break;
								case 1578:
									monitor.wait();
									break;
								case 1579:
									monitor.wait();
									break;
								case 1580:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1422;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1581:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1533;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1582:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1585;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1583:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1424;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1584:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1534;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1585:
									monitor.wait();
									break;
								case 1586:
									monitor.wait();
									break;
								case 1587:
									monitor.wait();
									break;
								case 1588:
									monitor.wait();
									break;
								case 1589:
									monitor.wait();
									break;
								case 1590:
									monitor.wait();
									break;
								case 1591:
									monitor.wait();
									break;
								case 1592:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1430;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1593:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1537;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1594:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1597;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1595:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1432;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1596:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1538;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1597:
									monitor.wait();
									break;
								case 1598:
									monitor.wait();
									break;
								case 1599:
									monitor.wait();
									break;
								case 1600:
									monitor.wait();
									break;
								case 1601:
									monitor.wait();
									break;
								case 1602:
									monitor.wait();
									break;
								case 1603:
									monitor.wait();
									break;
								case 1604:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1490;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1605:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1541;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1606:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1609;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1607:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1496;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1608:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1542;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1609:
									monitor.wait();
									break;
								case 1610:
									monitor.wait();
									break;
								case 1611:
									monitor.wait();
									break;
								case 1612:
									monitor.wait();
									break;
								case 1613:
									monitor.wait();
									break;
								case 1614:
									monitor.wait();
									break;
								case 1615:
									monitor.wait();
									break;
								case 1616:
									monitor.wait();
									break;
								case 1617:
									monitor.wait();
									break;
								case 1618:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1655;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1619:
									monitor.wait();
									break;
								case 1620:
									monitor.wait();
									break;
								case 1621:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1647;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1622:
									monitor.wait();
									break;
								case 1623:
									monitor.wait();
									break;
								case 1624:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1638;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1625:
									monitor.wait();
									break;
								case 1626:
									monitor.wait();
									break;
								case 1627:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1629;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1628:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1443;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1629:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1631;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1630:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1444;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1631:
									monitor.wait();
									break;
								case 1632:
									monitor.wait();
									break;
								case 1633:
									monitor.wait();
									break;
								case 1634:
									monitor.wait();
									break;
								case 1635:
									monitor.wait();
									break;
								case 1636:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1448;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1637:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1629;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1638:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1641;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1639:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1450;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1640:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1631;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1641:
									monitor.wait();
									break;
								case 1642:
									monitor.wait();
									break;
								case 1643:
									monitor.wait();
									break;
								case 1644:
									monitor.wait();
									break;
								case 1645:
									monitor.wait();
									break;
								case 1646:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1453;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1647:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1649;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1648:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1454;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1649:
									monitor.wait();
									break;
								case 1650:
									monitor.wait();
									break;
								case 1651:
									monitor.wait();
									break;
								case 1652:
									monitor.wait();
									break;
								case 1653:
									monitor.wait();
									break;
								case 1654:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1457;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1655:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1657;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1656:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1458;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1657:
									monitor.wait();
									break;
								case 1658:
									monitor.wait();
									break;
								case 1659:
									monitor.wait();
									break;
								case 1660:
									monitor.wait();
									break;
								case 1661:
									monitor.wait();
									break;
								case 1662:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1488;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1663:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1665;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1664:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1500;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1665:
									monitor.wait();
									break;
								case 1666:
									monitor.wait();
									break;
								case 1667:
									monitor.wait();
									break;
								case 1668:
									monitor.wait();
									break;
								case 1669:
									monitor.wait();
									break;
								case 1670:
									monitor.wait();
									break;
								case 1671:
									monitor.wait();
									break;
								case 1672:
									monitor.wait();
									break;
								case 1673:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1710;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1674:
									monitor.wait();
									break;
								case 1675:
									monitor.wait();
									break;
								case 1676:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1702;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1677:
									monitor.wait();
									break;
								case 1678:
									monitor.wait();
									break;
								case 1679:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1693;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1680:
									monitor.wait();
									break;
								case 1681:
									monitor.wait();
									break;
								case 1682:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1684;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1683:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1468;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1684:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1686;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1685:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1469;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1686:
									monitor.wait();
									break;
								case 1687:
									monitor.wait();
									break;
								case 1688:
									monitor.wait();
									break;
								case 1689:
									monitor.wait();
									break;
								case 1690:
									monitor.wait();
									break;
								case 1691:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1473;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1692:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1684;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1693:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1696;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1694:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1475;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1695:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1686;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1696:
									monitor.wait();
									break;
								case 1697:
									monitor.wait();
									break;
								case 1698:
									monitor.wait();
									break;
								case 1699:
									monitor.wait();
									break;
								case 1700:
									monitor.wait();
									break;
								case 1701:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1478;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1702:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1704;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1703:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1479;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1704:
									monitor.wait();
									break;
								case 1705:
									monitor.wait();
									break;
								case 1706:
									monitor.wait();
									break;
								case 1707:
									monitor.wait();
									break;
								case 1708:
									monitor.wait();
									break;
								case 1709:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1482;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1710:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1712;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1711:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1483;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1712:
									monitor.wait();
									break;
								case 1713:
									monitor.wait();
									break;
								case 1714:
									monitor.wait();
									break;
								case 1715:
									monitor.wait();
									break;
								case 1716:
									monitor.wait();
									break;
								case 1717:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1487;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1718:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1720;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1719:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1503;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1720:
									monitor.wait();
									break;
								case 1721:
									monitor.wait();
									break;
								case 1722:
									monitor.wait();
									break;
								case 1723:
									monitor.wait();
									break;
								case 1724:
									monitor.wait();
									break;
								case 1725:
									monitor.wait();
									break;
								case 1726:
									monitor.wait();
									break;
								case 1727:
									monitor.wait();
									break;
								case 1728:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1839;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1729:
									monitor.wait();
									break;
								case 1730:
									monitor.wait();
									break;
								case 1731:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1806;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1732:
									monitor.wait();
									break;
								case 1733:
									monitor.wait();
									break;
								case 1734:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1761;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1735:
									monitor.wait();
									break;
								case 1736:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1757;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1737:
									monitor.wait();
									break;
								case 1738:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1753;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1739:
									monitor.wait();
									break;
								case 1740:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1748;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1741:
									monitor.wait();
									break;
								case 1742:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1743;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1743:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1744;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1744:
									monitor.wait();
									break;
								case 1745:
									monitor.wait();
									break;
								case 1746:
									monitor.wait();
									break;
								case 1747:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1743;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1748:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1750;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1749:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1744;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1750:
									monitor.wait();
									break;
								case 1751:
									monitor.wait();
									break;
								case 1752:
									monitor.wait();
									break;
								case 1753:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1754;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1754:
									monitor.wait();
									break;
								case 1755:
									monitor.wait();
									break;
								case 1756:
									monitor.wait();
									break;
								case 1757:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1758;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1758:
									monitor.wait();
									break;
								case 1759:
									monitor.wait();
									break;
								case 1760:
									monitor.wait();
									break;
								case 1761:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1762;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1762:
									monitor.wait();
									break;
								case 1763:
									monitor.wait();
									break;
								case 1764:
									monitor.wait();
									break;
								case 1765:
									monitor.wait();
									break;
								case 1766:
									monitor.wait();
									break;
								case 1767:
									monitor.wait();
									break;
								case 1768:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1798;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1769:
									monitor.wait();
									break;
								case 1770:
									monitor.wait();
									break;
								case 1771:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1790;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1772:
									monitor.wait();
									break;
								case 1773:
									monitor.wait();
									break;
								case 1774:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1781;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1775:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1776;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1776:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1777;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1777:
									monitor.wait();
									break;
								case 1778:
									monitor.wait();
									break;
								case 1779:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1748;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1780:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1776;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1781:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1784;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1782:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1750;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1783:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1777;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1784:
									monitor.wait();
									break;
								case 1785:
									monitor.wait();
									break;
								case 1786:
									monitor.wait();
									break;
								case 1787:
									monitor.wait();
									break;
								case 1788:
									monitor.wait();
									break;
								case 1789:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1753;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1790:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1792;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1791:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1754;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1792:
									monitor.wait();
									break;
								case 1793:
									monitor.wait();
									break;
								case 1794:
									monitor.wait();
									break;
								case 1795:
									monitor.wait();
									break;
								case 1796:
									monitor.wait();
									break;
								case 1797:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1757;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1798:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1800;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1799:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1758;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1800:
									monitor.wait();
									break;
								case 1801:
									monitor.wait();
									break;
								case 1802:
									monitor.wait();
									break;
								case 1803:
									monitor.wait();
									break;
								case 1804:
									monitor.wait();
									break;
								case 1805:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1761;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1806:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1808;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1807:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1762;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1808:
									monitor.wait();
									break;
								case 1809:
									monitor.wait();
									break;
								case 1810:
									monitor.wait();
									break;
								case 1811:
									monitor.wait();
									break;
								case 1812:
									monitor.wait();
									break;
								case 1813:
									monitor.wait();
									break;
								case 1814:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1835;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1815:
									monitor.wait();
									break;
								case 1816:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1831;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1817:
									monitor.wait();
									break;
								case 1818:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1826;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1819:
									monitor.wait();
									break;
								case 1820:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1821;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1821:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1822;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1822:
									monitor.wait();
									break;
								case 1823:
									monitor.wait();
									break;
								case 1824:
									monitor.wait();
									break;
								case 1825:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1821;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1826:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1828;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1827:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1822;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1828:
									monitor.wait();
									break;
								case 1829:
									monitor.wait();
									break;
								case 1830:
									monitor.wait();
									break;
								case 1831:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1832;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1832:
									monitor.wait();
									break;
								case 1833:
									monitor.wait();
									break;
								case 1834:
									monitor.wait();
									break;
								case 1835:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1836;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1836:
									monitor.wait();
									break;
								case 1837:
									monitor.wait();
									break;
								case 1838:
									monitor.wait();
									break;
								case 1839:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1840;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1840:
									monitor.wait();
									break;
								case 1841:
									monitor.wait();
									break;
								case 1842:
									monitor.wait();
									break;
								case 1843:
									monitor.wait();
									break;
								case 1844:
									monitor.wait();
									break;
								case 1845:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1868;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1846:
									monitor.wait();
									break;
								case 1847:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1864;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1848:
									monitor.wait();
									break;
								case 1849:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1859;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1850:
									monitor.wait();
									break;
								case 1851:
									monitor.wait();
									break;
								case 1852:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1853;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1853:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1854;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1854:
									monitor.wait();
									break;
								case 1855:
									monitor.wait();
									break;
								case 1856:
									monitor.wait();
									break;
								case 1857:
									monitor.wait();
									break;
								case 1858:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1853;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1859:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1861;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1860:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1854;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1861:
									monitor.wait();
									break;
								case 1862:
									monitor.wait();
									break;
								case 1863:
									monitor.wait();
									break;
								case 1864:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1865;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1865:
									monitor.wait();
									break;
								case 1866:
									monitor.wait();
									break;
								case 1867:
									monitor.wait();
									break;
								case 1868:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1869;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1869:
									monitor.wait();
									break;
								case 1870:
									monitor.wait();
									break;
								case 1871:
									monitor.wait();
									break;
								case 1872:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1873;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1873:
									monitor.wait();
									break;
								case 1874:
									monitor.wait();
									break;
								case 1875:
									monitor.wait();
									break;
								case 1876:
									monitor.wait();
									break;
								case 1877:
									monitor.wait();
									break;
								case 1878:
									monitor.wait();
									break;
								case 1879:
									monitor.wait();
									break;
								case 1880:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1991;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1881:
									monitor.wait();
									break;
								case 1882:
									monitor.wait();
									break;
								case 1883:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1958;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1884:
									monitor.wait();
									break;
								case 1885:
									monitor.wait();
									break;
								case 1886:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1913;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1887:
									monitor.wait();
									break;
								case 1888:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1909;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1889:
									monitor.wait();
									break;
								case 1890:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1905;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1891:
									monitor.wait();
									break;
								case 1892:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1900;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1893:
									monitor.wait();
									break;
								case 1894:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1895;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1895:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1896;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1896:
									monitor.wait();
									break;
								case 1897:
									monitor.wait();
									break;
								case 1898:
									monitor.wait();
									break;
								case 1899:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1895;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1900:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1902;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1901:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1896;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1902:
									monitor.wait();
									break;
								case 1903:
									monitor.wait();
									break;
								case 1904:
									monitor.wait();
									break;
								case 1905:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1906;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1906:
									monitor.wait();
									break;
								case 1907:
									monitor.wait();
									break;
								case 1908:
									monitor.wait();
									break;
								case 1909:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1910;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1910:
									monitor.wait();
									break;
								case 1911:
									monitor.wait();
									break;
								case 1912:
									monitor.wait();
									break;
								case 1913:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1914;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1914:
									monitor.wait();
									break;
								case 1915:
									monitor.wait();
									break;
								case 1916:
									monitor.wait();
									break;
								case 1917:
									monitor.wait();
									break;
								case 1918:
									monitor.wait();
									break;
								case 1919:
									monitor.wait();
									break;
								case 1920:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1950;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1921:
									monitor.wait();
									break;
								case 1922:
									monitor.wait();
									break;
								case 1923:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1942;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1924:
									monitor.wait();
									break;
								case 1925:
									monitor.wait();
									break;
								case 1926:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1933;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1927:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1928;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1928:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1929;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1929:
									monitor.wait();
									break;
								case 1930:
									monitor.wait();
									break;
								case 1931:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1900;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1932:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1928;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1933:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1936;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1934:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1902;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1935:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1929;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1936:
									monitor.wait();
									break;
								case 1937:
									monitor.wait();
									break;
								case 1938:
									monitor.wait();
									break;
								case 1939:
									monitor.wait();
									break;
								case 1940:
									monitor.wait();
									break;
								case 1941:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1905;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1942:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1944;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1943:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1906;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1944:
									monitor.wait();
									break;
								case 1945:
									monitor.wait();
									break;
								case 1946:
									monitor.wait();
									break;
								case 1947:
									monitor.wait();
									break;
								case 1948:
									monitor.wait();
									break;
								case 1949:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1909;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1950:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1952;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1951:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1910;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1952:
									monitor.wait();
									break;
								case 1953:
									monitor.wait();
									break;
								case 1954:
									monitor.wait();
									break;
								case 1955:
									monitor.wait();
									break;
								case 1956:
									monitor.wait();
									break;
								case 1957:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1913;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1958:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1960;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1959:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1914;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1960:
									monitor.wait();
									break;
								case 1961:
									monitor.wait();
									break;
								case 1962:
									monitor.wait();
									break;
								case 1963:
									monitor.wait();
									break;
								case 1964:
									monitor.wait();
									break;
								case 1965:
									monitor.wait();
									break;
								case 1966:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1987;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1967:
									monitor.wait();
									break;
								case 1968:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1983;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1969:
									monitor.wait();
									break;
								case 1970:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1978;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1971:
									monitor.wait();
									break;
								case 1972:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1973;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1973:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1974;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1974:
									monitor.wait();
									break;
								case 1975:
									monitor.wait();
									break;
								case 1976:
									monitor.wait();
									break;
								case 1977:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 1973;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1978:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1980;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1979:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1974;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1980:
									monitor.wait();
									break;
								case 1981:
									monitor.wait();
									break;
								case 1982:
									monitor.wait();
									break;
								case 1983:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1984;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1984:
									monitor.wait();
									break;
								case 1985:
									monitor.wait();
									break;
								case 1986:
									monitor.wait();
									break;
								case 1987:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1988;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1988:
									monitor.wait();
									break;
								case 1989:
									monitor.wait();
									break;
								case 1990:
									monitor.wait();
									break;
								case 1991:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 1992;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 1992:
									monitor.wait();
									break;
								case 1993:
									monitor.wait();
									break;
								case 1994:
									monitor.wait();
									break;
								case 1995:
									monitor.wait();
									break;
								case 1996:
									monitor.wait();
									break;
								case 1997:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2020;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 1998:
									monitor.wait();
									break;
								case 1999:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2016;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2000:
									monitor.wait();
									break;
								case 2001:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2011;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2002:
									monitor.wait();
									break;
								case 2003:
									monitor.wait();
									break;
								case 2004:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2005;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2005:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2006;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2006:
									monitor.wait();
									break;
								case 2007:
									monitor.wait();
									break;
								case 2008:
									monitor.wait();
									break;
								case 2009:
									monitor.wait();
									break;
								case 2010:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2005;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2011:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2013;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2012:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2006;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2013:
									monitor.wait();
									break;
								case 2014:
									monitor.wait();
									break;
								case 2015:
									monitor.wait();
									break;
								case 2016:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2017;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2017:
									monitor.wait();
									break;
								case 2018:
									monitor.wait();
									break;
								case 2019:
									monitor.wait();
									break;
								case 2020:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2021;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2021:
									monitor.wait();
									break;
								case 2022:
									monitor.wait();
									break;
								case 2023:
									monitor.wait();
									break;
								case 2024:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2025;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2025:
									monitor.wait();
									break;
								case 2026:
									monitor.wait();
									break;
								case 2027:
									monitor.wait();
									break;
								case 2028:
									monitor.wait();
									break;
								case 2029:
									monitor.wait();
									break;
								case 2030:
									monitor.wait();
									break;
								case 2031:
									monitor.wait();
									break;
								case 2032:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2143;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2033:
									monitor.wait();
									break;
								case 2034:
									monitor.wait();
									break;
								case 2035:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2110;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2036:
									monitor.wait();
									break;
								case 2037:
									monitor.wait();
									break;
								case 2038:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2065;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2039:
									monitor.wait();
									break;
								case 2040:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2061;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2041:
									monitor.wait();
									break;
								case 2042:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2057;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2043:
									monitor.wait();
									break;
								case 2044:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2052;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2045:
									monitor.wait();
									break;
								case 2046:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2047;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2047:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2048;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2048:
									monitor.wait();
									break;
								case 2049:
									monitor.wait();
									break;
								case 2050:
									monitor.wait();
									break;
								case 2051:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2047;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2052:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2054;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2053:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2048;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2054:
									monitor.wait();
									break;
								case 2055:
									monitor.wait();
									break;
								case 2056:
									monitor.wait();
									break;
								case 2057:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2058;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2058:
									monitor.wait();
									break;
								case 2059:
									monitor.wait();
									break;
								case 2060:
									monitor.wait();
									break;
								case 2061:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2062;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2062:
									monitor.wait();
									break;
								case 2063:
									monitor.wait();
									break;
								case 2064:
									monitor.wait();
									break;
								case 2065:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2066;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2066:
									monitor.wait();
									break;
								case 2067:
									monitor.wait();
									break;
								case 2068:
									monitor.wait();
									break;
								case 2069:
									monitor.wait();
									break;
								case 2070:
									monitor.wait();
									break;
								case 2071:
									monitor.wait();
									break;
								case 2072:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2102;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2073:
									monitor.wait();
									break;
								case 2074:
									monitor.wait();
									break;
								case 2075:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2094;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2076:
									monitor.wait();
									break;
								case 2077:
									monitor.wait();
									break;
								case 2078:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2085;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2079:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2080;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2080:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2081;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2081:
									monitor.wait();
									break;
								case 2082:
									monitor.wait();
									break;
								case 2083:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2052;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2084:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2080;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2085:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2088;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2086:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2054;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2087:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2081;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2088:
									monitor.wait();
									break;
								case 2089:
									monitor.wait();
									break;
								case 2090:
									monitor.wait();
									break;
								case 2091:
									monitor.wait();
									break;
								case 2092:
									monitor.wait();
									break;
								case 2093:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2057;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2094:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2096;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2095:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2058;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2096:
									monitor.wait();
									break;
								case 2097:
									monitor.wait();
									break;
								case 2098:
									monitor.wait();
									break;
								case 2099:
									monitor.wait();
									break;
								case 2100:
									monitor.wait();
									break;
								case 2101:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2061;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2102:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2104;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2103:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2062;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2104:
									monitor.wait();
									break;
								case 2105:
									monitor.wait();
									break;
								case 2106:
									monitor.wait();
									break;
								case 2107:
									monitor.wait();
									break;
								case 2108:
									monitor.wait();
									break;
								case 2109:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2065;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2110:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2112;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2111:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2066;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2112:
									monitor.wait();
									break;
								case 2113:
									monitor.wait();
									break;
								case 2114:
									monitor.wait();
									break;
								case 2115:
									monitor.wait();
									break;
								case 2116:
									monitor.wait();
									break;
								case 2117:
									monitor.wait();
									break;
								case 2118:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2139;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2119:
									monitor.wait();
									break;
								case 2120:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2135;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2121:
									monitor.wait();
									break;
								case 2122:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2130;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2123:
									monitor.wait();
									break;
								case 2124:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2125;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2125:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2126;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2126:
									monitor.wait();
									break;
								case 2127:
									monitor.wait();
									break;
								case 2128:
									monitor.wait();
									break;
								case 2129:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2125;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2130:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2132;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2131:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2126;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2132:
									monitor.wait();
									break;
								case 2133:
									monitor.wait();
									break;
								case 2134:
									monitor.wait();
									break;
								case 2135:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2136;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2136:
									monitor.wait();
									break;
								case 2137:
									monitor.wait();
									break;
								case 2138:
									monitor.wait();
									break;
								case 2139:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2140;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2140:
									monitor.wait();
									break;
								case 2141:
									monitor.wait();
									break;
								case 2142:
									monitor.wait();
									break;
								case 2143:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2144;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2144:
									monitor.wait();
									break;
								case 2145:
									monitor.wait();
									break;
								case 2146:
									monitor.wait();
									break;
								case 2147:
									monitor.wait();
									break;
								case 2148:
									monitor.wait();
									break;
								case 2149:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2172;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2150:
									monitor.wait();
									break;
								case 2151:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2168;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2152:
									monitor.wait();
									break;
								case 2153:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2163;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2154:
									monitor.wait();
									break;
								case 2155:
									monitor.wait();
									break;
								case 2156:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2157;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2157:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2158;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2158:
									monitor.wait();
									break;
								case 2159:
									monitor.wait();
									break;
								case 2160:
									monitor.wait();
									break;
								case 2161:
									monitor.wait();
									break;
								case 2162:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2157;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2163:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2165;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2164:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2158;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2165:
									monitor.wait();
									break;
								case 2166:
									monitor.wait();
									break;
								case 2167:
									monitor.wait();
									break;
								case 2168:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2169;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2169:
									monitor.wait();
									break;
								case 2170:
									monitor.wait();
									break;
								case 2171:
									monitor.wait();
									break;
								case 2172:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2173;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2173:
									monitor.wait();
									break;
								case 2174:
									monitor.wait();
									break;
								case 2175:
									monitor.wait();
									break;
								case 2176:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2177;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2177:
									monitor.wait();
									break;
								case 2178:
									monitor.wait();
									break;
								case 2179:
									monitor.wait();
									break;
								case 2180:
									monitor.wait();
									break;
								case 2181:
									monitor.wait();
									break;
								case 2182:
									monitor.wait();
									break;
								case 2183:
									monitor.wait();
									break;
								case 2184:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2329;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2185:
									monitor.wait();
									break;
								case 2186:
									monitor.wait();
									break;
								case 2187:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2298;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2188:
									monitor.wait();
									break;
								case 2189:
									monitor.wait();
									break;
								case 2190:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2265;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2191:
									monitor.wait();
									break;
								case 2192:
									monitor.wait();
									break;
								case 2193:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2220;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2194:
									monitor.wait();
									break;
								case 2195:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2216;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2196:
									monitor.wait();
									break;
								case 2197:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2212;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2198:
									monitor.wait();
									break;
								case 2199:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2207;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2200:
									monitor.wait();
									break;
								case 2201:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2202;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2202:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2203;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2203:
									monitor.wait();
									break;
								case 2204:
									monitor.wait();
									break;
								case 2205:
									monitor.wait();
									break;
								case 2206:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2202;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2207:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2209;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2208:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2203;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2209:
									monitor.wait();
									break;
								case 2210:
									monitor.wait();
									break;
								case 2211:
									monitor.wait();
									break;
								case 2212:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2213;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2213:
									monitor.wait();
									break;
								case 2214:
									monitor.wait();
									break;
								case 2215:
									monitor.wait();
									break;
								case 2216:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2217;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2217:
									monitor.wait();
									break;
								case 2218:
									monitor.wait();
									break;
								case 2219:
									monitor.wait();
									break;
								case 2220:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2221;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2221:
									monitor.wait();
									break;
								case 2222:
									monitor.wait();
									break;
								case 2223:
									monitor.wait();
									break;
								case 2224:
									monitor.wait();
									break;
								case 2225:
									monitor.wait();
									break;
								case 2226:
									monitor.wait();
									break;
								case 2227:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2257;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2228:
									monitor.wait();
									break;
								case 2229:
									monitor.wait();
									break;
								case 2230:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2249;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2231:
									monitor.wait();
									break;
								case 2232:
									monitor.wait();
									break;
								case 2233:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2240;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2234:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2235;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2235:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2236;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2236:
									monitor.wait();
									break;
								case 2237:
									monitor.wait();
									break;
								case 2238:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2207;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2239:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2235;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2240:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2243;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2241:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2209;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2242:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2236;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2243:
									monitor.wait();
									break;
								case 2244:
									monitor.wait();
									break;
								case 2245:
									monitor.wait();
									break;
								case 2246:
									monitor.wait();
									break;
								case 2247:
									monitor.wait();
									break;
								case 2248:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2212;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2249:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2251;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2250:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2213;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2251:
									monitor.wait();
									break;
								case 2252:
									monitor.wait();
									break;
								case 2253:
									monitor.wait();
									break;
								case 2254:
									monitor.wait();
									break;
								case 2255:
									monitor.wait();
									break;
								case 2256:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2216;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2257:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2259;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2258:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2217;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2259:
									monitor.wait();
									break;
								case 2260:
									monitor.wait();
									break;
								case 2261:
									monitor.wait();
									break;
								case 2262:
									monitor.wait();
									break;
								case 2263:
									monitor.wait();
									break;
								case 2264:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2220;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2265:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2267;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2266:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2221;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2267:
									monitor.wait();
									break;
								case 2268:
									monitor.wait();
									break;
								case 2269:
									monitor.wait();
									break;
								case 2270:
									monitor.wait();
									break;
								case 2271:
									monitor.wait();
									break;
								case 2272:
									monitor.wait();
									break;
								case 2273:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2294;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2274:
									monitor.wait();
									break;
								case 2275:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2290;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2276:
									monitor.wait();
									break;
								case 2277:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2285;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2278:
									monitor.wait();
									break;
								case 2279:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2280;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2280:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2281;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2281:
									monitor.wait();
									break;
								case 2282:
									monitor.wait();
									break;
								case 2283:
									monitor.wait();
									break;
								case 2284:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2280;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2285:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2287;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2286:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2281;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2287:
									monitor.wait();
									break;
								case 2288:
									monitor.wait();
									break;
								case 2289:
									monitor.wait();
									break;
								case 2290:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2291;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2291:
									monitor.wait();
									break;
								case 2292:
									monitor.wait();
									break;
								case 2293:
									monitor.wait();
									break;
								case 2294:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2295;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2295:
									monitor.wait();
									break;
								case 2296:
									monitor.wait();
									break;
								case 2297:
									monitor.wait();
									break;
								case 2298:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2299;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2299:
									monitor.wait();
									break;
								case 2300:
									monitor.wait();
									break;
								case 2301:
									monitor.wait();
									break;
								case 2302:
									monitor.wait();
									break;
								case 2303:
									monitor.wait();
									break;
								case 2304:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2325;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2305:
									monitor.wait();
									break;
								case 2306:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2321;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2307:
									monitor.wait();
									break;
								case 2308:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2316;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2309:
									monitor.wait();
									break;
								case 2310:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2311;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2311:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2312;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2312:
									monitor.wait();
									break;
								case 2313:
									monitor.wait();
									break;
								case 2314:
									monitor.wait();
									break;
								case 2315:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2311;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2316:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2318;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2317:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2312;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2318:
									monitor.wait();
									break;
								case 2319:
									monitor.wait();
									break;
								case 2320:
									monitor.wait();
									break;
								case 2321:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2322;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2322:
									monitor.wait();
									break;
								case 2323:
									monitor.wait();
									break;
								case 2324:
									monitor.wait();
									break;
								case 2325:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2326;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2326:
									monitor.wait();
									break;
								case 2327:
									monitor.wait();
									break;
								case 2328:
									monitor.wait();
									break;
								case 2329:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2330;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2330:
									monitor.wait();
									break;
								case 2331:
									monitor.wait();
									break;
								case 2332:
									monitor.wait();
									break;
								case 2333:
									monitor.wait();
									break;
								case 2334:
									monitor.wait();
									break;
								case 2335:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2482;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2336:
									monitor.wait();
									break;
								case 2337:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2455;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2338:
									monitor.wait();
									break;
								case 2339:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2430;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2340:
									monitor.wait();
									break;
								case 2341:
									monitor.wait();
									break;
								case 2342:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2403;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2343:
									monitor.wait();
									break;
								case 2344:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2365;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2345:
									monitor.wait();
									break;
								case 2346:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2361;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2347:
									monitor.wait();
									break;
								case 2348:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2356;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2349:
									monitor.wait();
									break;
								case 2350:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2351;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2351:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2352;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2352:
									monitor.wait();
									break;
								case 2353:
									monitor.wait();
									break;
								case 2354:
									monitor.wait();
									break;
								case 2355:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2351;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2356:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2358;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2357:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2352;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2358:
									monitor.wait();
									break;
								case 2359:
									monitor.wait();
									break;
								case 2360:
									monitor.wait();
									break;
								case 2361:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2362;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2362:
									monitor.wait();
									break;
								case 2363:
									monitor.wait();
									break;
								case 2364:
									monitor.wait();
									break;
								case 2365:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2366;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2366:
									monitor.wait();
									break;
								case 2367:
									monitor.wait();
									break;
								case 2368:
									monitor.wait();
									break;
								case 2369:
									monitor.wait();
									break;
								case 2370:
									monitor.wait();
									break;
								case 2371:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2395;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2372:
									monitor.wait();
									break;
								case 2373:
									monitor.wait();
									break;
								case 2374:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2386;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2375:
									monitor.wait();
									break;
								case 2376:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2378;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2377:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2351;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2378:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2380;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2379:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2352;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2380:
									monitor.wait();
									break;
								case 2381:
									monitor.wait();
									break;
								case 2382:
									monitor.wait();
									break;
								case 2383:
									monitor.wait();
									break;
								case 2384:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2356;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2385:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2378;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2386:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2389;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2387:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2358;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2388:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2380;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2389:
									monitor.wait();
									break;
								case 2390:
									monitor.wait();
									break;
								case 2391:
									monitor.wait();
									break;
								case 2392:
									monitor.wait();
									break;
								case 2393:
									monitor.wait();
									break;
								case 2394:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2361;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2395:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2397;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2396:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2362;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2397:
									monitor.wait();
									break;
								case 2398:
									monitor.wait();
									break;
								case 2399:
									monitor.wait();
									break;
								case 2400:
									monitor.wait();
									break;
								case 2401:
									monitor.wait();
									break;
								case 2402:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2365;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2403:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2405;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2404:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2366;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2405:
									monitor.wait();
									break;
								case 2406:
									monitor.wait();
									break;
								case 2407:
									monitor.wait();
									break;
								case 2408:
									monitor.wait();
									break;
								case 2409:
									monitor.wait();
									break;
								case 2410:
									monitor.wait();
									break;
								case 2411:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2426;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2412:
									monitor.wait();
									break;
								case 2413:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2421;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2414:
									monitor.wait();
									break;
								case 2415:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2416;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2416:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2417;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2417:
									monitor.wait();
									break;
								case 2418:
									monitor.wait();
									break;
								case 2419:
									monitor.wait();
									break;
								case 2420:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2416;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2421:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2423;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2422:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2417;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2423:
									monitor.wait();
									break;
								case 2424:
									monitor.wait();
									break;
								case 2425:
									monitor.wait();
									break;
								case 2426:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2427;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2427:
									monitor.wait();
									break;
								case 2428:
									monitor.wait();
									break;
								case 2429:
									monitor.wait();
									break;
								case 2430:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2431;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2431:
									monitor.wait();
									break;
								case 2432:
									monitor.wait();
									break;
								case 2433:
									monitor.wait();
									break;
								case 2434:
									monitor.wait();
									break;
								case 2435:
									monitor.wait();
									break;
								case 2436:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2451;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2437:
									monitor.wait();
									break;
								case 2438:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2446;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2439:
									monitor.wait();
									break;
								case 2440:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2441;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2441:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2442;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2442:
									monitor.wait();
									break;
								case 2443:
									monitor.wait();
									break;
								case 2444:
									monitor.wait();
									break;
								case 2445:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2441;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2446:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2448;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2447:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2442;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2448:
									monitor.wait();
									break;
								case 2449:
									monitor.wait();
									break;
								case 2450:
									monitor.wait();
									break;
								case 2451:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2452;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2452:
									monitor.wait();
									break;
								case 2453:
									monitor.wait();
									break;
								case 2454:
									monitor.wait();
									break;
								case 2455:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2456;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2456:
									monitor.wait();
									break;
								case 2457:
									monitor.wait();
									break;
								case 2458:
									monitor.wait();
									break;
								case 2459:
									monitor.wait();
									break;
								case 2460:
									monitor.wait();
									break;
								case 2461:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2478;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2462:
									monitor.wait();
									break;
								case 2463:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2473;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2464:
									monitor.wait();
									break;
								case 2465:
									monitor.wait();
									break;
								case 2466:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2467;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2467:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2468;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2468:
									monitor.wait();
									break;
								case 2469:
									monitor.wait();
									break;
								case 2470:
									monitor.wait();
									break;
								case 2471:
									monitor.wait();
									break;
								case 2472:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2467;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2473:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2475;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2474:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2468;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2475:
									monitor.wait();
									break;
								case 2476:
									monitor.wait();
									break;
								case 2477:
									monitor.wait();
									break;
								case 2478:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2479;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2479:
									monitor.wait();
									break;
								case 2480:
									monitor.wait();
									break;
								case 2481:
									monitor.wait();
									break;
								case 2482:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2483;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2483:
									monitor.wait();
									break;
								case 2484:
									monitor.wait();
									break;
								case 2485:
									monitor.wait();
									break;
								case 2486:
									monitor.wait();
									break;
								case 2487:
									monitor.wait();
									break;
								case 2488:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2511;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2489:
									monitor.wait();
									break;
								case 2490:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2507;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2491:
									monitor.wait();
									break;
								case 2492:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2502;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2493:
									monitor.wait();
									break;
								case 2494:
									monitor.wait();
									break;
								case 2495:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2496;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2496:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2497;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2497:
									monitor.wait();
									break;
								case 2498:
									monitor.wait();
									break;
								case 2499:
									monitor.wait();
									break;
								case 2500:
									monitor.wait();
									break;
								case 2501:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2496;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2502:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2504;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2503:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2497;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2504:
									monitor.wait();
									break;
								case 2505:
									monitor.wait();
									break;
								case 2506:
									monitor.wait();
									break;
								case 2507:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2508;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2508:
									monitor.wait();
									break;
								case 2509:
									monitor.wait();
									break;
								case 2510:
									monitor.wait();
									break;
								case 2511:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2512;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2512:
									monitor.wait();
									break;
								case 2513:
									monitor.wait();
									break;
								case 2514:
									monitor.wait();
									break;
								case 2515:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2536;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2516:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2533;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2517:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2530;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2518:
									if (queueFrommasterToworker_3_.peek() != null ) {
										monitor.notifyAll();
										state = 2520;
										// Disabling unchecked inspection: We did check the class in the if statement above
										//noinspection unchecked
										return Optional.of((Any)queueFrommasterToworker_3_.take());
									}
									monitor.wait();
									break;
								case 2519:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2526;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2520:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2521;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2521:
									monitor.wait();
									break;
								case 2522:
									monitor.wait();
									break;
								case 2523:
									monitor.wait();
									break;
								case 2524:
									monitor.wait();
									break;
								case 2525:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2521;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2526:
									monitor.wait();
									break;
								case 2527:
									monitor.wait();
									break;
								case 2528:
									monitor.wait();
									break;
								case 2529:
									monitor.wait();
									break;
								case 2530:
									monitor.wait();
									break;
								case 2531:
									monitor.wait();
									break;
								case 2532:
									monitor.wait();
									break;
								case 2533:
									monitor.wait();
									break;
								case 2534:
									monitor.wait();
									break;
								case 2535:
									monitor.wait();
									break;
								case 2536:
									monitor.wait();
									break;
								case 2537:
									monitor.wait();
									break;
								case 2538:
									monitor.wait();
									break;
								case 2539:
									monitor.wait();
									break;
								case 2540:
									monitor.wait();
									break;
								case 2541:
									if (box.isPresent() && box.get().getClass() == discourje.examples.npb3.impl.DoneMessage.class ) {
										if (receiver == null) {
											receiver = "master";
										}
										if (receiver.equals("master")) {
											monitor.notifyAll();
											state = 2542;
											queueFromworker_3_Tomaster.put(box.get());
											return Optional.empty();
										}
									}
									monitor.wait();
									break;
								case 2542:
									monitor.wait();
									break;
								case 2543:
									monitor.wait();
									break;
								case 2544:
									monitor.wait();
									break;
								case 2545:
									monitor.wait();
									break;
								case 2546:
									monitor.wait();
									break;
								default: throw new Exception("State number out of bounds");
							}
						}
					}
					
				}
			};
			default: throw new Exception("Unknown environment");
		}
	}
	
	@Override
	public String[] threadNames(){
		return new String[] { "worker_1_","worker_2_","worker_0_","master","worker_3_" };
	}
	
	@Override
	public Object[] dummies(){
		return new Object[]{"TestStringDummy"};
	}
	
	@Override
	public int getState(){
		return this.state;
	}
}
