
;(s/defrole "master")
;(s/defrole "interp")
;(s/defrole "psinv")
;(s/defrole "rprj")
;(s/defrole "resid")

;(s/defsession ::mg [k]
  (s/cat (s/* (s/alt (s/par-every [i (range 1)]
                       (s/cat (s/-->> discourje.examples.npb3.impl.MGThreads.InterpMessage "master" ("interp" i))
                              (s/-->> discourje.examples.npb3.impl.DoneMessage ("interp" i) "master")))
                     (s/par-every [i (range 1)]
                       (s/cat (s/-->> discourje.examples.npb3.impl.MGThreads.PsinvMessage "master" ("psinv" i))
                              (s/-->> discourje.examples.npb3.impl.DoneMessage ("psinv" i) "master")))
                     (s/par-every [i (range 1)]
                       (s/cat (s/-->> discourje.examples.npb3.impl.MGThreads.RprjMessage "master" ("rprj" i))
                              (s/-->> discourje.examples.npb3.impl.DoneMessage ("rprj" i) "master")))
                     (s/par-every [i (range 1)]
                       (s/cat (s/-->> discourje.examples.npb3.impl.MGThreads.ResidMessage "master" ("resid" i))
                              (s/-->> discourje.examples.npb3.impl.DoneMessage ("resid" i) "master")))))
         (s/par-every [i (range 1)]
           (s/par (s/cat (s/-->> discourje.examples.npb3.impl.ExitMessage "master" ("interp" i))
                         (s/-->> discourje.examples.npb3.impl.DoneMessage ("interp" i) "master"))
                  (s/cat (s/-->> discourje.examples.npb3.impl.ExitMessage "master" ("psinv" i))
                         (s/-->> discourje.examples.npb3.impl.DoneMessage ("psinv" i) "master"))
                  (s/cat (s/-->> discourje.examples.npb3.impl.ExitMessage "master" ("rprj" i))
                         (s/-->> discourje.examples.npb3.impl.DoneMessage ("rprj" i) "master"))
                  (s/cat (s/-->> discourje.examples.npb3.impl.ExitMessage "master" ("resid" i))
                         (s/-->> discourje.examples.npb3.impl.DoneMessage ("resid" i) "master"))))
         (s/par (s/par-every [i (range 1)]
                  (s/close "master" ("interp" i)))
                (s/par-every [i (range 1)]
                  (s/close ("interp" i) "master"))
                (s/par-every [i (range 1)]
                  (s/close "master" ("psinv" i)))
                (s/par-every [i (range 1)]
                  (s/close ("psinv" i) "master"))
                (s/par-every [i (range 1)]
                  (s/close "master" ("rprj" i)))
                (s/par-every [i (range 1)]
                  (s/close ("rprj" i) "master"))
                (s/par-every [i (range 1)]
                  (s/close "master" ("resid" i)))
                (s/par-every [i (range 1)]
                  (s/close ("resid" i) "master"))))
;)